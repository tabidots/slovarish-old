{"version":3,"sources":["slovarish/frontend/verbs/verb_view.cljs"],"mappings":"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","names":["slovarish.frontend.verbs.verb-view/verb-type-names","slovarish.frontend.verbs.verb-view/fleeting-vowel-indices","infinitive","ya","ty","on","my","vy","oni","cljs.core._EQ_","fexpr__70225","temp__5753__auto__","conjugated","cljs.core/first","cljs.core.remove","cljs.core/nil?","cljs.core.apply","cljs.core/merge","iter__4652__auto__","s__70235","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__70237","cljs.core/chunk-buffer","i__70236","vec__70251","cljs.core/-nth","cljs.core.nth","vec__70254","vec__70257","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__70234","cljs.core/chunk-rest","vec__70277","vec__70280","vec__70283","cljs.core/cons","cljs.core/rest","i","c1","_","c2","a'","c3","c4","b'","p1__70220#","cljs.core.map","cljs.core.partition","slovarish.frontend.display-inflections/destress","cljs.core.range","cljs.core/map","cljs.core/vector","a","cljs.core/str","b","and__4251__auto__","cljs.core/re-find","clojure.string/includes?","slovarish.frontend.verbs.verb-view/siblings-menu","siblings","p1__70300#","word","slovarish.frontend.navigation/go-to-word","cljs.core.doall","s__70303","b__70305","i__70304","map__70312","cljs.core/--destructure-map","cljs.core.get","iter__70302","map__70319","sibling","prefix","reflexive","p__70333","map__70338","slovarish.frontend.verbs.verb-view/nonpast-forms","gloss","aspect","conjugation","category","dont-confuse","irregular?","no-nonpast?","impersonal?","no-1sg?","conj-fv-idx","map__70340","mobile-stress?","G__70347","cljs.core/Keyword","js/Error","fexpr__70348","fexpr__70349","fexpr__70350","slovarish.frontend.display-inflections/display-form","G__70356","cljs.core/deref","slovarish.frontend.state/display-language","slovarish.frontend.verbs.verb-view/past-tense-forms","primary?","past","G__70368","cljs.core/seq?","clojure.string.join","p1__70359#","vec__70370","which-set","end-stressed?","stem-stressed?","cljs.core/complement","m","f","n","p","pasts","s__70375","b__70377","i__70376","iter__70374","form","cljs.core/vals","cljs.core/second","reflexive?","cljs.core.not_EQ_","clojure.string/replace","irl","cljs.core/every?","slovarish.frontend.display_inflections.dstr","G__70393","cljs.core.conj","cljs.core/not","or__4253__auto__","p__70408","p__70409","map__70410","map__70411","slovarish.frontend.verbs.verb-view/participle-forms","pres-act","pres-pass","pres-adv","past-act","past-pass","past-adv","slovarish.frontend.data/all-adjectives","slovarish.frontend.navigation.go_to_word","pp","G__70424","p__70439","map__70440","slovarish.frontend.verbs.verb-view/single-verb","verb-type","partners","model","verb","map__70445","map__70446","past-part","pres-part","imperative","inf-fv-idx","alternate-pasts?","slovarish.frontend.state/which-verb-forms?","cljs.core/some","cljs.core/coll?","cljs.core.get_in","G__70454","slovarish.frontend.state/show-stress?","slovarish.frontend.display-inflections/decompose-fv","G__70456","clojure.string.split","G__70460","slovarish.frontend.state/result","slovarish.frontend.gloss/render-glosses","slovarish.frontend.verbs.siblings/get-siblings","G__70465","G__70467","G__70474","G__70475","G__70478","e","p1__70436#","G__70485","G__70489","cljs.core/not-empty","G__70492","slovarish.frontend.verbs.verb-view/get-partner","partner","partner-aspect","G__70497","fexpr__70499","slovarish.frontend.data/all-verbs","p1__70495#","cljs.core.filter","slovarish.frontend.display-inflections/destress-mono","p__70505","map__70506","slovarish.frontend.verbs.verb-view/verb-table","motion-partner","definiteness","self","partner-verbs","G__70508","p1__70501#","cljs.core.keep","motion-partner-verb","G__70510","fexpr__70515","G__70516","G__70517","G__70518","G__70520","fexpr__70519","fexpr__70521","fexpr__70522","s__70526","b__70528","i__70527","iter__70525","p1__70502#","cljs.core.sort_by","cljs.core/<","s__70530","b__70532","i__70531","iter__70529","p1__70503#","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.verbs.verb-view\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.dom :as gdom]\n            [goog.dom.classlist :as cl]\n            [goog.style :as style]\n            [goog.color :as gcolor]\n            [clojure.string :as s]\n            [cljs.reader :as reader]\n            [slovarish.frontend.state :refer [input results which-result? result display-language show-stress? which-verb-forms?]]\n            [slovarish.frontend.navigation :refer [go-to-word]]\n            [slovarish.frontend.data :refer [all-verbs all-adjectives]]\n            [slovarish.frontend.display-inflections :refer [destress destress-mono dstr decompose-fv display-form]]\n            [slovarish.frontend.gloss :refer [render-glosses]]\n            [slovarish.frontend.verbs.siblings :refer [get-siblings]]))\n\n(def verb-type-names\n  {\"indefinite\"   {:emoji \"\ud83d\udd04\" :full-name \"indefinite verb / \u0440\u0430\u0437\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043b\u0430\u0433\u043e\u043b\"}\n   \"definite\"     {:emoji \"\u27a1\ufe0f\" :full-name \"definite verb / \u043e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043b\u0430\u0433\u043e\u043b\"}\n   \"imperfective\" {:emoji \"\u23f3\" :full-name \"imperfective verb / \u0433\u043b\u0430\u0433\u043e\u043b \u041d\u0421\u0412\"}\n   \"perfective\"   {:emoji \"\ud83d\udccc\" :full-name \"perfective verb / \u0433\u043b\u0430\u0433\u043e\u043b \u0421\u0412\"}\n   \"biaspectual\"  {:emoji \"\u23f3\ud83d\udccc\" :full-name \"biaspectual verb / \u0434\u0432\u0443\u0432\u0438\u0434\u043e\u0432\u043e\u0439 \u0433\u043b\u0430\u0433\u043e\u043b\"}})\n\n(defn fleeting-vowel-indices\n  [infinitive ya ty on my vy oni]\n  (cond ;; hard-coded exceptions\n    (= infinitive \"\u043e\u043f\u0435\u0440\u0435\u0301\u0442\u044c\u0441\u044f\")  {:inf-fv-idx 2 :conj-fv-idx 2}\n    (= infinitive \"\u0438\u0441\u043f\u0438\u0301\u0442\u044c\")     {:inf-fv-idx nil :conj-fv-idx 2}\n    (#{\"\u0440\u0430\u0441\u043f\u0438\u0301\u0442\u044c\" \"\u0440\u0430\u0441\u0442\u0435\u0440\u0435\u0301\u0442\u044c\" \"\u0440\u0430\u0441\u043f\u0435\u0440\u0435\u0301\u0442\u044c\"} infinitive)\n    ,                           {:inf-fv-idx nil :conj-fv-idx 3}\n    :else\n    (when-let [conjugated (first (remove nil? [ya ty on my vy oni]))]\n      (apply merge\n        (for [[i [c1 _ c2 :as a']\n               [c3 _ c4 :as b']] (->> [infinitive conjugated]\n                                      (map #(partition 3 1 (destress %)))\n                                      (cons (rest (range)))\n                                      (apply map vector))\n              :let [a (apply str a')\n                    b (apply str b')]]\n          (cond\n            (and (re-find #\"[^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b][\u043e\u0435][^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b]\" a)\n                 (s/includes? b (str c1 c2)))                   {:inf-fv-idx i}\n            (and (re-find #\"[^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b][\u043e\u0435][^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b]\" b)\n                 (s/includes? a (str c3 c4)))                   {:conj-fv-idx i}\n            :else nil))))))\n\n(defn siblings-menu\n  [siblings]\n  (when (> (count siblings) 1)\n    [:div\n     [:select {:name \"sibling\"\n               :defaultValue \"siblings\"\n               :onChange #(let [word (-> % .-target .-value)]\n                            (when-not (= word \"siblings\")\n                              (go-to-word (destress word))))}\n      [:option \"siblings\"]\n      (doall\n        (for [{sibling :sibling prefix :prefix} siblings\n              :let [reflexive (re-find #\"\u0441[\u044c\u044f]$\" sibling)]]\n          ^{:key (str \"sibling-\" sibling)}\n          [:option {:value sibling}\n           (cond\n             (and prefix reflexive) (str prefix \"_\" reflexive)\n             reflexive              (str \"-\" reflexive)\n             prefix                 (str prefix \"-\")\n             :else                  sibling)]))]]))\n\n(defn nonpast-forms\n  [{:keys [infinitive gloss aspect conjugation category dont-confuse\n           irregular? no-nonpast? impersonal? no-1sg?]}\n   conj-fv-idx]\n  (let [{:keys [ya ty on my vy oni]} conjugation\n        mobile-stress?               (re-find #\"^(\\d+|irreg-)c\" category)]\n    (cond\n      no-nonpast?\n      [:<>\n       [:div.row-header.left.sans.italic]\n       [:div.full-width.no-form.sans.italic.present.triple-row\n        (str \"(no \" (case aspect\n                      :pf \"future\"\n                      :impf \"present\"\n                      :bias \"present/future\") \" tense)\")]]\n\n      impersonal?\n      [:<>\n       [:div.row-header.left.sans.italic\n        (cond\n          (#{\"\u043f\u043e\u043d\u043e\u0301\u0441\u0438\u0442\u044c\" \"\u0440\u0432\u0430\u0301\u0442\u044c\" \"\u0442\u043e\u0448\u043d\u0438\u0301\u0442\u044c\"} infinitive) \"\u043a\u043e\u0433\u043e-\u043b.\"\n          (#{\"\u043f\u0440\u0438\u0441\u043f\u0438\u0301\u0447\u0438\u0442\u044c\" \"\u0437\u0430\u0431\u043b\u0430\u0433\u043e\u0440\u0430\u0441\u0441\u0443\u0301\u0434\u0438\u0442\u044c\u0441\u044f\"} infinitive) \"\u043a\u043e\u043c\u0443-\u043b.\"\n          (#{\"\u0440\u0430\u0437\u0443\u043c\u0435\u0301\u0442\u044c\u0441\u044f\" \"\u0440\u0430\u0441\u0441\u0432\u0435\u0441\u0442\u0438\u0301\" \"\u0440\u0430\u0441\u0441\u0432\u0435\u0442\u0430\u0301\u0442\u044c\" \"\u0441\u0432\u0435\u0442\u0430\u0301\u0442\u044c\" \"\u0442\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f\"} infinitive) \"\u043e\u043d\"\n          (s/includes? gloss \"impersonal\") \"\u043a\u043e\u043c\u0443-\u043b.\"\n          :else \"\u043e\u043d\")]\n       [display-form \"present ya full-width\" on :fv-idx conj-fv-idx]]\n\n      irregular?\n      [:<>\n       [:div.row-header.left.sans.italic.row1 \"\u044f / \u043c\u044b\"]\n       [:div.row-header.left.sans.italic.row2 \"\u0442\u044b / \u0432\u044b\"]\n       [:div.row-header.left.sans.italic.row3 \"\u043e\u043d / \u043e\u043d\u0438\"]\n       [display-form \"present ya half-width row1\" ya :fv-idx conj-fv-idx]\n       [display-form \"my half-width\" my :fv-idx conj-fv-idx]\n       [display-form [\"present\" \"ty\" \"half-width\" \"row2\"\n                      (when mobile-stress? \"unpredictable-stress\")] ty :fv-idx conj-fv-idx]\n       [display-form \"vy half-width\" vy :fv-idx conj-fv-idx]\n       [display-form [\"present\" \"on\" \"half-width\" \"row3\"\n                      (when mobile-stress? \"unpredictable-stress\")] on :fv-idx conj-fv-idx]\n       [display-form \"oni half-width\" oni :fv-idx conj-fv-idx]]\n\n      :else\n      [:<>\n       [:div.row-header.left.sans.italic.row1 \"\u044f\"]\n       [:div.row-header.left.sans.italic.row2 \"\u0442\u044b\"]\n       [:div.row-header.left.sans.italic.row3 \"\u043e\u043d\u0438\"]\n       (if no-1sg?\n         [:div.full-width.row1.no-form.sans.italic.present.irregular-form \"(no \u044f form)\"]\n         [display-form \"present ya full-width row1\" ya :fv-idx conj-fv-idx\n          :supplement (when dont-confuse\n                        [:div.dont-confuse\n                         [:span\n                          \"\u2757\\u00A0\"\n                          [:span.italic.sans\n                           (case @display-language\n                             :english \"don\u2018t confuse with\\u00A0\"\n                             :russian \"\u043d\u0435 \u043f\u0443\u0442\u0430\u0439\u0442\u0435 \u0441\\u00A0\")]]\n                         [:a.word-button {:on-click #(go-to-word (destress dont-confuse))}\n                          dont-confuse]])])\n       [display-form [\"present\" \"ty\" \"full-width\" \"row2\"\n                      (when mobile-stress? \"unpredictable-stress\")] ty :fv-idx conj-fv-idx]\n       [display-form [\"present\" \"oni\" \"full-width\" \"row 3\"\n                      (when mobile-stress? \"unpredictable-stress\")] oni :fv-idx conj-fv-idx]])))\n\n(defn past-tense-forms\n  [infinitive primary? past category]\n  (if (nil? (:masculine past)); impersonal verbs have only neuter past forms\n    [:div.word-form.row1.past.neuter.light (cond->> (:neuter past)\n                                              (seq? (:neuter past)) (s/join \", \"))]\n\n    (let [which-set           (if primary? \"primary\" \"alternate\")\n          end-stressed?       #(re-find #\"(?:\u0441\u044f\\u0301|[\u0430\u0438\u043e]\\u0301(?:\u0441\u044c)?)$\" %)\n          stem-stressed?      (complement end-stressed?)\n          [m f n p :as pasts] (for [form (vals past)]\n                                (cond\n                                  (string? form)   form\n                                  primary?         (first form)\n                                  :else            (second form)))\n          reflexive?          (re-find #\"\u0441\u044c$\" f)\n          irregular?          (not= (destress (s/replace m #\"\u0441\u044f\\u0301?$\" \"\"))\n                                    (destress (s/replace infinitive #\"\u0442\u044c(\u0441\u044f)?$\" \"\u043b\")))\n          irl                 (when irregular? \"\u043b\")]\n      [:<>\n       (cond ; Take care of the triple-row cases first\n         ;; NOTE: verbs like \u043d\u0430\u0447\u0430\u0442\u044c\u0441\u044f should have the masculine form separated,\n         ;;       since end stress is unusual for masculine past forms\n         ;(and (not irregular?) reflexive? (every? end-stressed? pasts))\n         ;, [:div.word-form.row1.past.light.triple-row {:class which-set}]\n         ;  (dstr (s/replace m #\"\u0441\u044f\u0301$\" \"|\u0441\u044f\u0301\") \", -\u0430\u0301\u0441\u044c, -\u043e\u0301\u0441\u044c, -\u0438\u0301\u0441\u044c\")\n         (and (not irregular?) reflexive? (every? stem-stressed? pasts))\n         , [:div.word-form.row1.past.light.triple-row {:class which-set}\n            (dstr (s/replace m #\"\u0441\u044f$\" \"|\u0441\u044f\") \", -\u0430\u0441\u044c, -\u043e\u0441\u044c, -\u0438\u0441\u044c\")]\n         (and (not irregular?) (every? stem-stressed? [f n p]))\n         , [:div.word-form.row1.past.light.triple-row {:class which-set}\n            (dstr m \" + \u0430, \u043e, \u0438\")]\n         :else\n         [:<> ; If not triple-row, then masc has its own row\n          [:div.word-form.row1.past.masculine\n           {:class (cond-> []\n                     (not (string? (:masculine past)))  (conj which-set)\n                     (and (not irregular?)\n                          (s/includes? category \"c,a\")) (conj which-set)\n                     irregular?                         (conj \"irregular-form\")\n                     (end-stressed? m)                  (conj \"unpredictable-stress\")\n                     (not (or irregular?\n                              (end-stressed? m)))       (conj \"light\"))}\n           (dstr m)]\n          (cond ; Double-row cases\n            (every? end-stressed? [f n p])\n            , [:div.word-form.row2.past.light.double-row\n               {:class (when-not (re-find #\"/b\\*,b$\" category)\n                         which-set)}\n               (dstr f \", -\" irl \"\u043e\u0301\" reflexive? \", -\" irl \"\u0438\u0301\" reflexive?)]\n            (every? stem-stressed? [f n p])\n            , [:div.word-form.row2.past.light.double-row {:class which-set}\n               (dstr f \", -\" irl \"\u043e\" reflexive? \", -\" irl \"\u0438\" reflexive?)]\n            :else\n            [:<> ; All others\n             [:div.word-form.row2.past.feminine.unpredictable-stress\n              {:class (when-not (re-find #\"/c'$\" category)\n                        which-set)}\n              (dstr f)]\n             (if (every? end-stressed? [f n])\n\n               [:<> ; (#{\"\u0434\u0430\u0301\u0442\u044c\" \"\u0441\u043d\u044f\u0301\u0442\u044c\" \"\u043f\u043b\u044b\u0301\u0442\u044c\" \"\u0432\u0437\u044f\u0301\u0442\u044c\" \"\u0441\u043b\u044b\u0301\u0442\u044c\" \"\u0436\u0438\u0301\u0442\u044c\"} infinitive)\n                [:div.word-form.row3.past.neuter.unpredictable-stress.half-width {:class which-set}\n                 (dstr n)]\n                [:div.word-form.row3.past.plural.half-width.light {:class which-set} (dstr p)]]\n\n               [:div.word-form.row3.past.light {:class which-set}\n                (if (every? end-stressed? [n p])  (dstr n \", -\" irl \"\u0438\u0301\" reflexive?)\n                  (dstr n \", -\" irl \"\u0438\" reflexive?))])])])])))\n\n(defn participle-forms\n  [aspect {:keys [pres-act pres-pass pres-adv]} {:keys [past-act past-pass past-adv]}]\n  [:<>\n   [:div.row-header.middle.sans.italic.row1 \"active\"]\n   [:div.row-header.middle.sans.italic.row2 \"passive\"]\n   [:div.row-header.middle.sans.italic.row3 \"adverbial\"]\n\n   (when-not (= aspect :pf)\n     [:<>\n      (if (get @all-adjectives (destress pres-act))\n        [:a.row1.present.active.participle\n         {:on-click #(go-to-word (destress pres-act) :target-pos :adjective)}\n         [display-form \"\" pres-act]]\n        [display-form \"row1 present active participle\" pres-act])\n\n      (if (get @all-adjectives (destress pres-pass))\n        [:a.row2.present.passive.participle\n         {:on-click #(go-to-word (destress pres-pass) :target-pos :adjective)}\n         [display-form \"\" pres-pass]]\n        [display-form \"row2 present passive participle\" pres-pass])\n      [display-form \"row3 present adverbial participle\" pres-adv]])\n\n   (if (get @all-adjectives (destress past-act))\n     [:a.row2.past.passive.participle\n      {:on-click #(go-to-word (destress past-act) :target-pos :adjective)}\n      [display-form \"\" past-act]]\n     [display-form \"row1 past passive participle\" past-act])\n\n   (let [pp (some-> past-pass\n              (s/replace #\"\u043d+\u044b\u0439$\" \"\u043d(\u043d\u044b\u0439)\")\n              (s/replace #\"\u044b\u0439$\" \"(\u044b\u0439)\"))]\n     (if (get @all-adjectives (destress past-pass))\n      [:a.row2.past.passive.participle\n       {:on-click #(go-to-word (destress past-pass) :target-pos :adjective)}\n       [display-form \"\" pp]]\n      [display-form \"row2 past passive participle\" pp]))\n\n   [display-form \"row3 past adverbial participle\" past-adv]])\n\n(defn single-verb\n  [verb-type {:keys [infinitive aspect partners category\n                     gloss conjugation model dont-confuse\n                     irregular? no-nonpast? impersonal? no-1sg?] :as verb}]\n  (when verb\n    (let [{:keys [past past-part pres-part imperative ya ty on my vy oni]}\n          , conjugation\n          {:keys [inf-fv-idx conj-fv-idx]}\n          , (fleeting-vowel-indices infinitive ya ty on my vy oni)\n          alternate-pasts? (and (= @which-verb-forms? :main)\n                                (not impersonal?)\n                                (some coll? (vals past)))]\n\n      [:div.verb-entry {:class verb-type :data-verb infinitive}\n\n       [:div]\n       [:div.top-left\n        [:div.infinitive {:class verb-type}\n         [:span.icon {:title (get-in verb-type-names [verb-type :full-name])}\n          (get-in verb-type-names [verb-type :emoji])]\n         (cond->> infinitive\n           (false? @show-stress?) destress\n           inf-fv-idx             (decompose-fv inf-fv-idx))]]\n\n       [:div.top-right\n        (when (and #_(> (count (:partners (result))) 1)\n                   (not= (some-> gloss (s/split #\"\\|\") first)\n                         (some-> (:gloss (result)) (s/split #\"\\|\")\n                                 first)))\n          [render-glosses verb verb-type])]\n\n       [:div.column-header.half-width\n        [siblings-menu (get-siblings (destress infinitive))]]\n\n       [:div.column-header.present.sans\n        (when-not no-nonpast?\n          [:<>\n           (if (or (= verb-type \"perfective\") (= infinitive \"\u0431\u044b\u0301\u0442\u044c\"))\n             (case @display-language\n               :english \"future\" :russian \"\u0431\u0443\u0434.\")\n             (case @display-language\n               :english \"present\" :russian \"\u043d\u0430\u0441\u0442.\"))\n           (when (and (= @which-verb-forms? :participles)\n                      (= aspect :bias))\n             [:span.italic.sans.note (case @display-language\n                                       :english \" (imperf. only)\" :russian \" (\u0442\u043e\u043b\u044c\u043a\u043e \u041d\u0421\u0412)\")])])\n\n        (when-not (or no-nonpast? (nil? model))\n          [:div.conjugation-model\n           (if (= infinitive model)\n             [:<>\n              [:span \"\ud83d\udca1\\u00A0\"\n               [:span.italic.sans.note (case @display-language\n                                         :english \"model verb\"\n                                         :russian \"\u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043e\u0431\u0440\u0430\u0437\u0435\u0446\")]]]\n             [:<>\n              [:span.italic.sans.note (case @display-language\n                                        :english \"like\"\n                                        :russian \"\u043f\u043e\u0445\u043e\u0436 \u043d\u0430\")]\n              \"\\u00A0\"\n              [:a.word-button\n               {:data-destination model\n                :on-click (fn [e]\n                            (let [word (-> e .-target (.getAttribute \"data-destination\"))]\n                              (go-to-word (destress word)\n                                          :filter-fn #(and (= (:infinitive %) word)\n                                                           (= (:model %) word)))))}\n               (dstr model)]])])]\n\n       [:div.column-header.half-width]\n\n       [:div.column-header.past.sans\n        {:class [(when alternate-pasts? \"alternate-forms-trigger\")]}\n        (str (case @display-language :english \"past\" :russian \"\u043f\u0440\u043e\u0448.\"))\n        (when alternate-pasts? \"\\u00A0\ud83d\udd00\")]\n\n       (case @which-verb-forms?\n         :main\n         [:<>\n          [nonpast-forms verb conj-fv-idx]\n\n          [:<>\n           (if impersonal? [:div.row-header.middle.sans.row1 \"\ud83d\udc7d\"]\n             [:<>\n              [:div.row-header.middle.sans.row1 \"\ud83d\udc68\"]\n              [:div.row-header.middle.sans.row2 \"\ud83d\udc69\"]\n              [:div.row-header.middle.sans.row3 \"\ud83d\udc7d\ud83d\udc6b\"]])\n\n           [past-tense-forms infinitive \"primary\" past category]\n           (when alternate-pasts?\n             [past-tense-forms infinitive false past category])]]\n\n         :participles [participle-forms aspect pres-part past-part])\n\n       (when (and (not impersonal?) (not-empty imperative))\n         [:<>\n          [:div.column-header.half-width.imperative.sans\n           (case @display-language\n             :english \"imperative\" :russian \"\u043f\u043e\u0432\u0435\u043b.\")]\n          [display-form \"row1 imperative\" (:ty imperative) :fv-idx conj-fv-idx]\n          [display-form \"row2 imperative\" (:vy imperative) :fv-idx conj-fv-idx]])])))\n\n(defn get-partner\n  [partner partner-aspect]\n  (some->> partner\n           destress\n           (@all-verbs)            ; \u2193 monosyllabic partner verbs are inconsistently stressed on Wiktionary\n           (filter #(and (= partner (destress-mono (:infinitive %)))\n                         (= partner-aspect (:aspect %))))\n           first))\n\n(defn verb-table\n  [{:keys [infinitive aspect conjugation partners motion-partner definiteness] :as self}]\n  (when infinitive\n    (let [partner-aspect      (if (= aspect :pf) :impf :pf)\n          partner-verbs       (some->> partners\n                                       (keep #(get-partner % partner-aspect)))\n          motion-partner-verb (some->> (or motion-partner\n                                           (:motion-partner (first partner-verbs)))\n                                       (destress)\n                                       (@all-verbs)\n                                       (first))]\n      [:div#verb-table\n       (cond\n         ;; Verbs of motion: Indefinite, definite, perfective\n         motion-partner-verb\n         [:<>\n          [single-verb \"indefinite\" (case definiteness\n                                      :indefinite self\n                                      :definite motion-partner-verb\n                                      nil motion-partner-verb)]\n          [single-verb \"definite\"   (case definiteness\n                                      :definite self\n                                      :indefinite motion-partner-verb\n                                      nil (first partner-verbs))]\n          [single-verb \"perfective\" (case definiteness\n                                      :definite (first partner-verbs)\n                                      :indefinite (->> (:partners motion-partner-verb)\n                                                       first\n                                                       destress\n                                                       (@all-verbs)\n                                                       first)\n                                      nil self)]]\n\n         (#{:impf :bias} aspect)\n         [:<>\n          [single-verb ({:impf \"imperfective\" :bias \"biaspectual\"} aspect) self]\n          (doall\n            (for [partner (sort-by #(or (:rank %) 30000) < partner-verbs)]\n              ^{:key (:infinitive partner)}\n              [single-verb \"perfective\" partner]))]\n\n         :else\n         [:<>\n          (doall\n            (for [partner (sort-by #(or (:rank %) 30000) < partner-verbs)]\n              ^{:key (:infinitive partner)}\n              [single-verb \"imperfective\" partner]))\n          [single-verb \"perfective\" self]])])))\n"]}