{"version":3,"sources":["slovarish/frontend/nouns/stress.cljs"],"mappings":"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","names":["slovarish.frontend.nouns.stress/base-pattern","sg","pl","cljs.core.apply","cljs.core/merge","iter__4652__auto__","s__1025910","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__1025912","cljs.core/chunk-buffer","i__1025911","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__1025909","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","padezh","js/Object","js/RussianNouns","cljs.core.map","cljs.core.comp","cljs.core/keyword","clojure.string/lower-case","cljs.core.drop_last","slovarish.frontend.nouns.stress/patterns","tag","a","b","c","d","f","cljs.core/assoc-in","slovarish.frontend.nouns.stress/nom-sing-exceptional-stem-stress","slovarish.frontend.nouns.stress/nom-sing-exceptional-ending-stress","slovarish.frontend.nouns.stress/gen-plur-exceptional-stem-stress","slovarish.frontend.nouns.stress/gen-plur-exceptional-ending-stress","slovarish.frontend.nouns.stress/generate-pattern","word","nom-plur","pattern-name","animate?","s-tag","e-tag","ludi?","p1__1025933#","cljs.core/some","clojure.string/ends-with?","G__1025939","cljs.core._EQ_","cljs.core/not","fexpr__1025952","p","cljs.core.get_in","slovarish.frontend.nouns.stress/vowel-indices","slovarish.frontend.utils/re-pos","slovarish.frontend.nouns.stress/monosyllable?","cljs.core/re-seq","slovarish.frontend.nouns.stress/add-stress-mark","index","or__4253__auto__","cljs.core/re-find","cljs.core.subs","slovarish.frontend.nouns.stress/add-stem-stress","unstressed","lemma","and__4251__auto__","slovarish.frontend.nouns.stress/add-end-stress","vec__1025972","seq__1025973","first__1025974","cljs.core/next","final","penult","_","cljs.core/reverse","cljs.core/inc","cljs.core/key","p__1025984","map__1025985","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.nouns.stress/add-stressed-form","text","stress","stressed","entry","ssi","esi","clojure.string/blank?","cljs.core.assoc","G__1025988","js/Error","p__1025990","map__1025991","slovarish.frontend.nouns.stress/apply-stress","singular-only?","plural-only?","table","stressed-headword","p-ssi","cljs.core/second","special-esi","G__1025992","cljs.core/not-empty","G__1025996","s__1025998","b__1026000","i__1025999","vec__1026001","cljs.core.nth","iter__1025997","vec__1026006","chisla","G__1026004","G__1026009","cljs.core.update","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.nouns.stress\n  \"Namespace for generating and applying Zaliznyak's stress patterns.\"\n  (:require [clojure.string :as s]\n            [slovarish.frontend.utils :refer [re-pos]]))\n\n(defn- base-pattern\n  \"From the keywords :stem and :ending, creates a basic template for a noun's\n  stress pattern in which all cases of the same number have the same stress,\n  that is, SS, EE, SE, or ES.\"\n  [sg pl]\n  (apply merge\n    (for [padezh (->> (.keys js/Object (. js/RussianNouns -Case))\n                      (map (comp keyword s/lower-case))\n                      (drop-last))]\n      {padezh {:singular {:stress sg} :plural {:stress pl}}})))\n\n(def patterns\n  \"A hash-map of Andrey Zaliznyak's stress patterns as found on Wiktionary.\"\n  (let [tag {:stress :stem :unpredictable-stress? true}\n        a (base-pattern :stem :stem)\n        b (base-pattern :ending :ending)\n        c (base-pattern :stem :ending)\n        d (base-pattern :ending :stem)\n        f (assoc-in b [:nominative :plural] tag)]\n    {:a a :b b :c c :d d :f f\n     ;; Technically, the only difference between b* and b is the inst. sg.,\n     ;; but this does not seem to work for \u043b\u044e\u0431\u043e\u0432\u044c. That is the only polysyllabic\n     ;; word in the group, and the group itself is very small, so this deviation\n     ;; from the \"official stress pattern chart\" is okay.\n     :b*  (-> b\n              (assoc-in [:nominative :singular]   {:stress :stem})\n              (assoc-in [:accusative :singular]   {:stress :stem})\n              (assoc-in [:instrumental :singular] tag))\n     :d*  (assoc-in d [:accusative :singular]     tag)\n     :e   (assoc-in c [:nominative :plural]       tag)\n     :f*  (assoc-in f [:accusative :singular]     tag)\n     :f** (assoc-in f [:instrumental :singular]   tag)}))\n\n(comment\n \"A small number of words have stem stress in the nominative singular\n or ending stress in the genitive plural not accounted for by Zaliznyak's patterns.\")\n\n(def nom-sing-exceptional-stem-stress\n  #{\"\u0443\u0433\u043e\u043b\" \"\u0443\u0433\u043e\u0440\u044c\" \"\u0443\u0437\u0435\u043b\" \"\u0437\u0430\u0451\u043c\" \"\u043d\u0430\u0451\u043c\" \"\u043f\u043e\u0434\u043d\u0430\u0451\u043c\" \"\u043f\u043e\u043b\u0434\u0435\u043d\u044c\" \"\u043f\u043e\u043b\u043d\u043e\u0447\u044c\"})\n\n(def nom-sing-exceptional-ending-stress\n  #{\"\u043f\u043e\u043b\u0447\u0430\u0441\u0430\" \"\u0433\u043e\u0441\u043f\u043e\u0434\u044c\" \"\u0413\u043e\u0441\u043f\u043e\u0434\u044c\"})\n\n(def gen-plur-exceptional-stem-stress\n  #{\"\u0434\u0435\u043d\u044c\u0433\u0438\" \"\u043c\u0430\u0441\u043b\u043e\" \"\u043c\u0435\u0447\u0442\u0430\"})\n\n(def gen-plur-exceptional-ending-stress\n  #{\"\u043a\u043e\u043b\u044c\u0446\u043e\" \"\u043e\u0432\u0446\u0430\" \"\u0441\u0432\u044b\u043d\u044c\u044f\" \"\u0441\u0435\u043c\u044c\u044f\" \"\u0441\u0435\u0441\u0442\u0440\u0430\" \"\u0441\u0443\u0434\u044c\u044f\" \"\u044f\u0439\u0446\u043e\" \"\u0437\u0435\u043c\u043b\u044f\" \"\u0445\u043b\u043e\u043f\u043e\u0442\u044b\"})\n\n(defn generate-pattern\n  \"Given a word, its nominative plural (as disambiguator), stress pattern name,\n  and animacy data, generates its stress pattern with exceptions made where\n  appropriate, based on the word. Some words have one-off exceptions that are not\n  mentioned even on the stress pattern page, namely: \u0443\u0442\u0440\u043e, \u043b\u044e\u0434\u0438, \u0434\u0435\u043d\u044c\u0433\u0438, and \u043c\u0430\u0441\u043b\u043e.\n  There may be others. Nom-plur disambiguation is pretty much only for \u0447\u0435\u043b\u043e\u0432\u0435\u043a/\u043b\u044e\u0434\u0438.\"\n  [word nom-plur pattern-name animate?]\n  (when pattern-name\n    (let [s-tag {:stress :stem :unpredictable-stress? true}\n          e-tag {:stress :ending :unpredictable-stress? true}\n          ludi? (some #(s/ends-with? % \"\u043b\u044e\u0434\u0438\") [word nom-plur])]\n      (cond-> (pattern-name patterns)\n        (nom-sing-exceptional-stem-stress word)      (assoc-in [:nominative :singular] s-tag)\n        (nom-sing-exceptional-ending-stress word)    (assoc-in [:nominative :singular] e-tag)\n        (gen-plur-exceptional-stem-stress word)      (assoc-in [:genitive :plural] s-tag)\n        (gen-plur-exceptional-ending-stress word)    (assoc-in [:genitive :plural] e-tag)\n        (= word \"\u0443\u0442\u0440\u043e\") (assoc-in [:genitive :singular] e-tag)\n        (= word \"\u0443\u0442\u0440\u043e\") (assoc-in [:dative :singular] e-tag)\n        ludi?           (assoc-in [:genitive :plural] e-tag)\n        ludi?           (assoc-in [:instrumental :plural] e-tag)\n        ;; Accusative singular follows nom singular except when it has exceptional stress\n        (and (not (#{:f* :d*} pattern-name))  ; \u0433\u043e\u043b\u043e\u0432\u0430, \u0441\u0440\u0435\u0434\u0430\n             (not animate?))\n        ,               (as-> p (assoc-in p [:accusative :singular] (get-in p [:nominative :singular])))\n        ;; Accusative plural follows nom/gen plural based on animacy\n        animate?        (as-> p (assoc-in p [:accusative :plural]   (get-in p [:genitive :plural])))\n        (not animate?)  (as-> p (assoc-in p [:accusative :plural]   (get-in p [:nominative :plural])))))))\n\n(comment\n \"String manipulation for adding stress marks.\")\n\n(defn- vowel-indices [word]\n  (re-pos #\"[\u0430\u0435\u0451\u0438\u043e\u0443\u044f\u044e\u044b\u044d]\" word))\n\n(defn- monosyllable? [word]\n  (= 1 (->> (s/lower-case word)\n            (re-seq #\"[\u0430\u0435\u0451\u0438\u043e\u0443\u044f\u044e\u044b\u044d]\")\n            (count))))\n\n(defn- add-stress-mark\n  [word index]\n  (if (or (nil? index) (re-find #\"\u0451|\\u0301\" word) (monosyllable? word))\n    word\n    (str (subs word 0 index) \"\\u0301\" (subs word index))))\n\n(defn- add-stem-stress\n  [unstressed lemma index]\n  (add-stress-mark unstressed\n    (cond\n      (= unstressed \"\u043e\u0442\u0447\u0435\")                  1\n      (re-find #\"^\u043f\u043e\u043b\u0443(\u0434\u043d|\u043d\u043e\u0447)\" unstressed)  4\n      (and (re-find #\"^\u043f\u043e\u043b[^\u0443]\" lemma)\n           (re-find #\"^\u043f\u043e\u043b\u0443\" unstressed))    (inc index)\n      :else                                  index)))\n\n(defn- add-end-stress\n  [unstressed lemma index]\n  (let [[final penult & _] (->> (vowel-indices unstressed)\n                                reverse\n                                (map (comp inc key)))]\n    (add-stress-mark unstressed\n      (cond\n        (or (s/ends-with? unstressed \"\u044c\u043c\u0438\")\n            (= unstressed \"\u0433\u043e\u0441\u043f\u043e\u0434\"))        final  ; small # of exceptions\n        index                               index  ; irregularity due to lexical properties\n        (re-find #\"[\u0430\u044f]\u043c\u0438$\" lemma)          final  ; rare, small # of foreign words\n        (re-find #\"[\u0430\u044f]\u043c\u0438$\" unstressed)     penult ; only in instrumental case\n        :else                               final))))\n\n(defn- add-stressed-form\n  [{:keys [text stress stressed] :as entry} lemma ssi esi]\n  (if (s/blank? text) text\n    (assoc entry :stressed\n      (case stress\n        :stem   (add-stem-stress text lemma ssi)\n        :ending (add-end-stress  text lemma esi)\n        nil     (or stressed text))))) ; indeclinable nouns\n\n(defn apply-stress\n  \"Given a declension table annotated with stress locations for each form (ending/stem)\n  and an insertion index for the stress mark over the stem (and the ending, if exceptional),\n  inserts stress marks in all forms at the appropriate place. This is a little messy\n  because the actual stress location can deviate from pre-defined stress patterns due to\n  lexical factors (particular words) or morphological factors (particular grammatical cases).\"\n  [{:keys [singular-only? plural-only?] :as table} ssi] ; ssi = stem stress index, esi = ending stress index\n  (let [word              (get-in table [:nominative :singular :text] \"\")\n        stressed-headword (get-in table [:nominative :singular :stressed] \"\")\n        nom-plur          (get-in table [:nominative :plural :text] \"\")\n        ;; For some nouns, the plural ssi is the penultimate vowel\n        p-ssi             (if (or (= \"\u0434\u0435\u0442\u0438\" nom-plur)              ; suppletive form\n                                  (s/ends-with? nom-plur \"\u043b\u044e\u0434\u0438\")   ; suppletive form\n                                  (and (get-in table [:nominative :plural :irregular-stem?])\n                                       (re-find #\"(?:\u044c\u044f|\u0430\u0442\u0430)$\" nom-plur)))\n                            (->> (vowel-indices nom-plur)\n                                 reverse\n                                 (map (comp inc key))\n                                 second)\n                            ssi)\n        ;; For some nouns, the \"ending\" isn't necessarily the last vowel\n        special-esi       (or (and (re-find #\"(?:\u043e\u0301\u0439|\u043e\u0301\u0435|\u0430\u0301\u044f)$\" stressed-headword)\n                                   (some-> (re-pos #\"(?:\u0438\u0435|\u044b\u0435)$\" nom-plur)\n                                           not-empty first key inc))  ; adj-type declension\n                              (some-> (re-pos #\"(?:\u0438\u0301\u043d|\u0438\u0301\u0435|\u044b\u0301\u0435|\u043e\u0301\u043d\u043e\u043a|\u0451\u043d\u043e\u043a|\u043e\u0301\u0447\u043a\u0430)$\" stressed-headword)\n                                      not-empty first key inc))]\n    (apply merge\n      (for [[padezh chisla] table]\n        {padezh\n         (cond-> chisla\n           (not plural-only?)   (update :singular add-stressed-form word ssi   special-esi)\n           (not singular-only?) (update :plural   add-stressed-form word p-ssi special-esi))}))))\n"]}