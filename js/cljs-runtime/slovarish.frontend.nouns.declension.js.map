{"version":3,"sources":["slovarish/frontend/nouns/declension.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.nouns","js/slovarish.frontend.nouns.declension","js/slovarish.frontend.nouns.declension.inflector","slovarish.frontend.nouns.declension/inflector","js/module$node_modules$russian_nouns_js$RussianNouns.Engine","p__68516","map__68517","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.nouns.declension/create-lemma","text","gender","plural-only?","attributes","rod","cljs.core/name","clojure.string/upper-case","js/RussianNouns","cljs.core/clj->js","cljs.core.assoc","slovarish.frontend.nouns.declension/soft-sign-locatives","slovarish.frontend.nouns.declension/missing-locatives","slovarish.frontend.nouns.declension/missing-partitives","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.nouns.declension/plain-declensions","p__68520","p__68521","map__68522","map__68523","seq68518","G__68519","cljs.core/first","cljs.core/next","self__4851__auto__","animate","reduced-stem","singular-only?","shell","bare-plural","lemma","result","cljs.core/transient","slovarish.frontend.nouns.declension.goog$module$goog$object.forEach","padezh","eng-str","eng-kw","cljs.core.keyword","clojure.string/lower-case","s-form","p-form","or__4253__auto__","cljs.core._EQ_","and__4251__auto__","cljs.core/not","cljs.core/re-find","cljs.core.conj_BANG_","G__68524","cljs.core/assoc-in","cljs.core/persistent!","p__68525","map__68526","slovarish.frontend.nouns.declension/add-special-forms","table","locative","vocative","partitive","stress-pattern","fexpr__68527","cljs.core.get_in","cljs.core.update_in","cljs.core/merge","cljs.core.dissoc","p__68528","map__68529","slovarish.frontend.nouns.declension/overwrite-gen-plur","gen-plur","temp__5751__auto__","bare-gp","G__68530","clojure.string/replace","new-data","G__68531","p__68532","map__68533","slovarish.frontend.nouns.declension/reduce-reducible-stems","patt","cljs.core/re-pattern","G__68534","p__68535","map__68536","slovarish.frontend.nouns.declension/fix-inaccuracies","plural","G__68537","cljs.core/dissoc","slovarish.frontend.nouns.declension/yotify","map__68538","stress","clojure.string/replace-first","p__68539","map__68540","slovarish.frontend.nouns.declension/mark-irregular-forms","indeclinable","nom-plur","gen-sing","polu-word?","irregular-stem?","fexpr__68541","clojure.string/ends-with?","cljs.core/count","cljs.core.not_EQ_","cljs.core/re-seq","irregular-nom-pl?","fexpr__68542","expected-gen-plur","clojure.string/blank?","slovarish.frontend.nouns.gen-plur/expected-gp","irregular-gen-pl?","fexpr__68543","irregular-nom-sg?","fexpr__68544","_","js/console.log","G__68545","slovarish.frontend.nouns.declension/ends-in-consonant?","word","p__68547","map__68548","slovarish.frontend.nouns.declension/mark-fleeting-vowels","vec__68549","cljs.core.nth","nom-sing","ns-vowels","gs-vowels","np-vowels","gp-vowels","p1__68546#","cljs.core.map","cljs.core/keys","slovarish.frontend.utils/re-pos","nsfv","cljs.core.apply","cljs.core/max","gpfv","G__68552","fexpr__68553","slovarish.frontend.nouns.declension/null-ending-pl-count","slovarish.frontend.nouns.declension/count-forms","fexpr__68554","slovarish.frontend.nouns.declension/declines-like-adjective?","gen","slovarish.frontend.nouns.declension/guess-gender","p__68556","vec__68557","seq__68558","cljs.core/seq","first__68559","map__68560","slovarish.frontend.nouns.declension/rank-entries","entries","cljs.core.distinct","fexpr__68561","cljs.core/reverse","fexpr__68562","p1__68555#","cljs.core.sort_by","cljs.core/<","slovarish.frontend.nouns.declension/declensions","temp__5755__auto__","cljs.core/deref","slovarish.frontend.data/all-nouns","cljs.core/vec","iter__4652__auto__","s__68564","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__68566","cljs.core/chunk-buffer","i__68565","map__68567","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68563","cljs.core/chunk-rest","map__68569","cljs.core/cons","cljs.core/rest","stressed","wordform-scores","stem-stress-index","G__68568","G__68570","unstressed","slovarish.frontend.nouns.declension.plain_declensions","pattern","slovarish.frontend.nouns.stress/generate-pattern","cljs.core.merge_with","cljs.core.partial","cljs.core/merge-with","cljs.core/into","slovarish.frontend.nouns.stress/apply-stress","cljs.core.merge","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.nouns.declension\n  \"Namespace for generating declension tables and marking irregular forms.\"\n  (:require [clojure.string :as s]\n            [goog.object :as g]\n            [goog.string.format]\n            [\"russian-nouns-js\" :as rn]\n            [slovarish.frontend.data :refer [all-nouns]]\n            [slovarish.frontend.nouns.stress :as u]\n            [slovarish.frontend.nouns.gen-plur :refer [expected-gp]]\n            [slovarish.frontend.utils :refer [re-pos]]))\n\n(defonce inflector (new rn/Engine))\n\n(defn create-lemma\n  \"Wrapper around RussianNouns.createLemma() that allows gender to be passed in\n  as a lower-case English keyword (in Clojure-ish style).\"\n  [{:keys [text gender plural-only?] :as attributes}]\n  (let [rod (->> (name gender)\n                 (s/upper-case)\n                 (aget (. js/RussianNouns -Gender)))]\n    (clj->js (assoc attributes\n                    :gender rod\n                    :pluraleTantum plural-only?))))\n\n(def soft-sign-locatives\n  ;; Not in RussianNounsJS.\n  ;; Source: https://fido7.ru.linguist.narkive.com/784uabtw\n  #{\"\u0433\u0440\u0443\u0434\u044c\" \"\u0447\u0435\u0441\u0442\u044c\" \"\u0440\u044b\u0441\u044c\" \"\u0442\u0435\u043d\u044c\" \"\u0433\u0440\u044f\u0437\u044c\" \"\u043f\u044b\u043b\u044c\" \"\u0441\u0435\u043d\u044c\" \"\u043d\u043e\u0447\u044c\" \"\u0434\u0430\u043b\u044c\" \"\u043c\u0435\u043b\u044c\"\n    \"\u0441\u0435\u0442\u044c\" \"\u043f\u0435\u0447\u044c\" \"\u043a\u0440\u043e\u0432\u044c\" \"\u043e\u0441\u044c\" \"\u0434\u0432\u0435\u0440\u044c\" \"\u043f\u043e\u043b\u0443\u043e\u0441\u044c\" \"\u0433\u043e\u0440\u0441\u0442\u044c\"\n    ;; Wade's grammar, section 63-4-i\n    \"\u0433\u043b\u0443\u0431\u044c\" \"\u0446\u0435\u043f\u044c\"})\n\n(def missing-locatives\n  #{\"\u0436\u0430\u0440\" \"\u043e\u0442\u043f\u0443\u0441\u043a\" \"\u0446\u0435\u0445\"})\n\n(def missing-partitives ; from Wade's; missing from OC data\n  #{\"\u0432\u0438\u043d\u043e\u0433\u0440\u0430\u0434\" \"\u0436\u0438\u0440\" \"\u043a\u0432\u0430\u0441\" \"\u043a\u043b\u0435\u0439\" \"\u043b\u0443\u043a\" \"\u043c\u0451\u0434\" \"\u043c\u0435\u043b\" \"\u043c\u0435\u0445\" \"\u043d\u0430\u0440\u043e\u0434\" \"\u043f\u0435\u0441\u043e\u043a\" \"\u0440\u0438\u0441\"\n    \"\u0441\u0430\u0445\u0430\u0440\" \"\u0441\u043d\u0435\u0433\" \"\u0441\u0443\u043f\"  \"\u0441\u044b\u0440\" \"\u0442\u0430\u0431\u0430\u043a\" \"\u0442\u0432\u043e\u0440\u043e\u0433\" \"\u0447\u0435\u0441\u043d\u043e\u043a\" \"\u0448\u0451\u043b\u043a\" \"\u0448\u043e\u043a\u043e\u043b\u0430\u0434\"})\n\n(defn- plain-declensions\n  \"Given a shell (basic attributes of a noun) and an optional plural form, returns\n  a declension table of the noun based on RussianNounsJS output. This table does\n  not include stress information and it may have inaccuracies. Both of these will\n  be fixed a later stage.\"\n  [{:keys [text animate reduced-stem singular-only? plural-only?] :as shell} & {:keys [bare-plural]}]\n  (let [lemma     (create-lemma shell)\n        result    (transient {})]\n    (g/forEach (. js/RussianNouns -Case)\n      (fn [padezh eng-str]\n        (let [eng-kw (keyword (s/lower-case eng-str))\n              s-form (first (.decline inflector lemma padezh))\n              p-form (if plural-only?\n                       s-form\n                       (first (.decline inflector lemma padezh\n                                        (or bare-plural\n                                            (first (.pluralize inflector lemma))))))]\n          (if (= eng-kw :locative)\n            ;; Locative case is special and is ONLY added for certain nouns\n            (when (and (not (missing-partitives text))\n                       (or (re-find #\"[\u0443\u044e]$\" s-form) ; \u0441\u0442\u0440\u043e\u0439 -> \u0441\u0442\u0440\u043e\u044e\u0301\n                           (soft-sign-locatives text)))\n              (conj! result {:locative {:singular {:text s-form :stress :ending}}}))\n            ;; Normal cases\n            (conj! result\n              (cond-> {}\n                (not plural-only?)   (assoc-in [eng-kw :singular] {:text s-form :same-as-base? (= s-form text)})\n                (not singular-only?) (assoc-in [eng-kw :plural]   {:text p-form :same-as-base? (= p-form text)})))))))\n    (persistent! result)))\n\n;; TODO: There is probably a neater way to do this, but the source data is also to blame\n(defn add-special-forms\n  \"Adds special forms to the shell, with stress info, if they are attested in\n  OpenCorpora data. Also corrects some mistakes, since RussianNounsJS seems to think\n  the 7th case is always locative. (Locative and partitive are often homographs with\n  different stress.)\"\n  [table {:keys [text locative vocative partitive]} stress-pattern]\n  (cond\n    (#{\"\u0448\u0430\u0433\" \"\u0445\u043e\u0434\"} text)\n    , (assoc-in table [:partitive :singular] {:text partitive\n                                              :stress (get-in stress-pattern [:genitive :singular :stress])})\n    vocative\n    , (update-in table [:vocative :singular] merge {:text vocative :stress :stem})\n\n    (and (or locative (missing-locatives text))\n         (not (missing-partitives text)))\n    , (-> table\n          (update-in [:locative :singular] merge {:text (or locative partitive (get-in table [:dative :singular :text]))\n                                                  :stress :ending})\n          (dissoc :partitive))\n\n    (or partitive (missing-partitives text))\n    , (-> table\n          (update-in [:partitive :singular] merge {:text (or partitive locative (get-in table [:dative :singular :text]))\n                                                   :stress (get-in stress-pattern [:genitive :singular :stress])})\n          (dissoc :locative))\n    :else table))\n\n(defn overwrite-gen-plur\n  \"There are too many genitive plural exceptions that RussianNounsJS doesn't get\n  right, so it's easier to just take it from Wiktionary.\"\n  [table {:keys [text animate gen-plur]}]\n  (if-let [bare-gp (some-> gen-plur (s/replace #\"\\u0301\" \"\"))]\n    (let [new-data {:text bare-gp :plural gen-plur :same-as-base? (= text bare-gp)}]\n      (cond-> table\n        :always (update-in [:genitive :plural] merge new-data)\n        animate (update-in [:accusative :plural] merge new-data)))\n    table))\n\n(defn reduce-reducible-stems\n  \"RussianNounsJS doesn't always get masculine nouns with fleeting vowels in nom. sing.\n  right, such as \u043e\u0433\u043e\u043d\u044c, \u043e\u0440\u0451\u043b, \"\n  [table {:keys [text reduced-stem animate]}]\n  (if reduced-stem\n    (let [patt (re-pattern (s/replace text #\"\u044c$\" \"\"))] ; \u043e\u0433\u043e\u043d\u044c should have \u043e\u0433\u043e\u043d -> \u043e\u0433\u043d\n      (cond-> table\n        :always (update-in [:genitive :singular :text] s/replace patt reduced-stem)\n        animate (update-in [:accusative :singular :text] s/replace patt reduced-stem)\n        :always (update-in [:dative :singular :text] s/replace patt reduced-stem)\n        :always (update-in [:instrumental :singular :text] s/replace patt reduced-stem)\n        :always (update-in [:prepositional :singular :text] s/replace patt reduced-stem)))\n    table))\n\n(defn fix-inaccuracies\n  \"In addition to the genitive plural, there are some isolated inaccuracies in RussianNounsJS.\"\n  [table {:keys [text plural]}]\n  (cond\n    (and (= text \"\u043d\u043e\u043b\u044c\") (= plural \"\u043d\u0443\u043b\u0438\u0301\"))\n    , (-> table\n          (assoc-in [:genitive :singular :text] \"\u043d\u0443\u043b\u044f\")\n          (assoc-in [:dative :singular :text] \"\u043d\u0443\u043b\u044e\")\n          (assoc-in [:instrumental :singular :text] \"\u043d\u0443\u043b\u0451\u043c\")\n          (assoc-in [:prepositional :singular :text] \"\u043d\u0443\u043b\u0435\"))\n\n    (and (= text \"\u0449\u0435\u043a\u0430\") (= (get-in table [:accusative :singular :stress]) :stem))\n    , (-> table\n          (assoc-in [:accusative :singular :text] \"\u0449\u0451\u043a\u0443\")) ; Wade's grammar, sec 62-2\n\n    :else\n    , (case text\n        \"\u0447\u0435\u043b\u043e\u0432\u0435\u043a\" (-> table ; not an inaccuracy, but show \u043b\u044e\u0434\u0438 for both entries\n                      (assoc-in [:nominative :plural :text] \"\u043b\u044e\u0434\u0438\"))\n\n        \"\u043f\u043e\u0434\u043d\u0430\u0451\u043c\" (-> table ; Wiktionary is the wrong one here\n                      (assoc-in [:genitive :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u0430\")\n                      (assoc-in [:dative :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u0443\")\n                      (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u043e\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u0435\"))\n\n        \"\u0434\u043e\u0447\u044c\"    (-> table\n                     (assoc-in [:instrumental :plural :text] \"\u0434\u043e\u0447\u0435\u0440\u044c\u043c\u0438\"))\n\n        \"\u0446\u0435\u0440\u043a\u043e\u0432\u044c\" (-> table\n                      (assoc-in [:dative :plural :text] \"\u0446\u0435\u0440\u043a\u0432\u0430\u043c\")\n                      (assoc-in [:instrumental :plural :text] \"\u0446\u0435\u0440\u043a\u0432\u0430\u043c\u0438\")\n                      (assoc-in [:prepositional :plural :text] \"\u0446\u0435\u0440\u043a\u0432\u0430\u0445\"))\n\n        \"\u043b\u044e\u0431\u043e\u0432\u044c\"  (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043b\u044e\u0431\u0432\u0438\")\n                      (assoc-in [:dative :singular :text] \"\u043b\u044e\u0431\u0432\u0438\")\n                      (assoc-in [:prepositional :singular :text] \"\u043b\u044e\u0431\u0432\u0438\"))\n\n        \"\u043b\u043e\u0436\u044c\"    (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043b\u0436\u0438\")\n                      (assoc-in [:dative :singular :text] \"\u043b\u0436\u0438\")\n                      (assoc-in [:prepositional :singular :text] \"\u043b\u0436\u0438\"))\n\n        \"\u043f\u043e\u043b\u043d\u043e\u0447\u044c\" (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:dative :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u044c\u044e\")\n                      (assoc-in [:prepositional :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:nominative :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:accusative :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:genitive :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0435\u0439\")\n                      (assoc-in [:dative :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0430\u043c\")\n                      (assoc-in [:instrumental :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0430\u043c\u0438\")\n                      (assoc-in [:prepositional :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0430\u0445\"))\n\n        \"\u043f\u043e\u043b\u0434\u0435\u043d\u044c\" (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\")\n                      (assoc-in [:dative :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044e\")\n                      (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0435\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0435\")\n                      (assoc-in [:nominative :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0438\")\n                      (assoc-in [:genitive :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0435\u0439\")\n                      (assoc-in [:accusative :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0438\")\n                      (assoc-in [:dative :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\u043c\")\n                      (assoc-in [:instrumental :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\u043c\u0438\")\n                      (assoc-in [:prepositional :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\u0445\"))\n\n        \"\u043f\u043e\u043b\u0441\u043e\u0442\u043d\u0438\" (-> table\n                       (assoc-in [:accusative :singular :text] \"\u043f\u043e\u043b\u0441\u043e\u0442\u043d\u044e\")\n                       (assoc-in [:accusative :singular :same-as-base?] false)\n                       (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u043b\u0441\u043e\u0442\u043d\u0435\u0439\"))\n\n        \"\u043f\u043e\u043b\u0434\u043e\u0440\u043e\u0433\u0438\" (-> table\n                        (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u0434\u043e\u0440\u043e\u0433\u0438\")\n                        (assoc-in [:genitive :singular :same-as-base?] true)\n                        (update-in [:dative] dissoc :singular)\n                        (update-in [:instrumental] dissoc :singular))\n\n        \"\u043f\u043e\u043b\u043f\u0443\u0442\u0438\"  (-> table\n                       (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u043f\u0443\u0442\u0438\")\n                       (assoc-in [:genitive :singular :same-as-base?] true)\n                       (assoc-in [:prepositional :singular :same-as-base?] true)\n                       (update-in [:dative] dissoc :singular)\n                       (update-in [:instrumental] dissoc :singular))\n\n        \"\u0425\u0430\u043d\u043e\u0439\"   (-> table\n                      (assoc-in [:genitive :singular :text] \"\u0425\u0430\u043d\u043e\u044f\")\n                      (assoc-in [:dative :singular :text] \"\u0425\u0430\u043d\u043e\u044e\")\n                      (assoc-in [:instrumental :singular :text] \"\u0425\u0430\u043d\u043e\u0435\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u0425\u0430\u043d\u043e\u0435\"))\n        table)))\n\n(defn yotify\n  \"Changes \u0435 -> \u0451 in instrumental singular forms of \u0434\u0435\u043d\u044c, \u0441\u0435\u043c\u044c\u044f, \u0437\u0435\u043c\u043b\u044f, etc.,\n  as RussianNounsJS does not do this.\"\n  [table]\n  (let [{:keys [text stress]} (get-in table [:instrumental :singular])]\n    (if (and text (= stress :ending) (re-find #\"\u0435(?=[\u043c\u0439]$)\" text))\n      (update-in table [:instrumental :singular :text]\n                 s/replace-first #\"\u0435(?=[\u043c\u0439]$)\" \"\u0451\")\n      table)))\n\n(defn mark-irregular-forms\n  \"Marks plurals with irregular stems (by matching against certain words, endings, or\n  a threshold of similarity with the singular), as well as individual irregular forms.\n  Irregular forms are those that are unexpected given the typical declension (1st/2nd/3rd)\n  of the noun.\"\n  ;; http://russianlearn.com/grammar/category/irregular_plural_endings\n  ;; http://russianlearn.com/grammar/category/irregular_declensions_in_the_singular_and_plural\n  ;; https://en.wikipedia.org/wiki/Russian_declension#Irregular_plural_forms\n  [table {:keys [text gender animate plural-only? singular-only? indeclinable]}]\n  (let [nom-plur          (get-in table [:nominative :plural :text] \"\")\n        gen-plur          (get-in table [:genitive :plural :text] \"\")\n        gen-sing          (get-in table [:genitive :singular :text] \"\") ; for \u043f\u043e\u043b- words\n        polu-word?        (and (not (re-find #\"\u043f\u043e\u043b\u0443\" text))\n                               (re-find #\"\u043f\u043e\u043b\u0443\" gen-sing))\n\n        irregular-stem?   (or (#{\"\u0441\u043e\u0441\u0435\u0434\" \"\u0447\u0451\u0440\u0442\" \"\u0443\u0445\u043e\" \"\u043e\u043a\u043e\" \"\u0437\u0430\u0440\u044f\" \"\u043f\u043b\u0435\u0447\u043e\"} text)\n                              (and (not (s/ends-with? text \"\u044c\"))\n                                   (> (count text) (count nom-plur)))\n                              (and (not (s/ends-with? text \"\u0435\u0441\"))\n                                   (s/ends-with? nom-plur \"\u0435\u0441\u0430\"))\n                              (re-find #\"(?:[\u0430\u044f]\u043d\u0435|\u043c\u0435\u043d\u0430|[\u0430\u044f]\u0442\u0430)$\" nom-plur)\n                              (and (not (re-find #\"\u044c[\u0451\u0435]$\" text))\n                                   (s/ends-with? nom-plur \"\u044c\u044f\"))\n                              (and (= text \"\u043a\u043e\u043b\u0435\u043d\u043e\") (= nom-plur \"\u043a\u043e\u043b\u0435\u043d\u0438\"))\n                              (and (not (s/ends-with? text \"\u044c\u0451\"))\n                                   (not= text \"\u0441\u043b\u0435\u0437\u0430\")\n                                   (not= (count (re-seq #\"\u0451\" gen-sing)) (count (re-seq #\"\u0451\" nom-plur)))))\n\n        irregular-nom-pl? (or (and (re-find #\"[^\u044c][\u0430\u044f]$\" nom-plur)\n                                   (not (re-find #\"[a\u044f]\u0442\u0430$\" nom-plur))\n                                   (= gender :masculine))\n                              (#{\"\u0441\u043b\u0435\u0437\u0430\" \"\u043f\u043b\u0435\u0447\u043e\"} text)\n                              (and (s/ends-with? text \"\u043a\u043e\") (s/ends-with? nom-plur \"\u043a\u0438\")))\n        ;; Irregular genitive plural forms can occur even when the stem is irregular, e.g. \u0433\u043b\u0430\u0437\n        expected-gen-plur (when-not (or plural-only? singular-only? indeclinable\n                                        (s/blank? gen-plur) polu-word?)\n                            (expected-gp table irregular-stem?))\n        irregular-gen-pl? (or (and expected-gen-plur (not= gen-plur expected-gen-plur))\n                              (#{\"\u0441\u043b\u0435\u0437\u0430\" \"\u043f\u043b\u0435\u0447\u043e\"} text))\n        irregular-nom-sg? (or (#{\"\u043c\u0430\u0442\u044c\" \"\u0434\u043e\u0447\u044c\" \"\u0413\u043e\u0441\u043f\u043e\u0434\u044c\"} text)\n                              (and (= text \"\u043d\u043e\u043b\u044c\") (= nom-plur \"\u043d\u0443\u043b\u0438\"))\n                              polu-word?)\n        _ (js/console.log (str \"Expected gen plur: \" expected-gen-plur))]\n    (cond-> table\n      (= text \"\u043f\u0443\u0442\u044c\")         (assoc-in [:genitive :singular :irregular-form?] true)\n      (= text \"\u043f\u0443\u0442\u044c\")         (assoc-in [:dative :singular :irregular-form?] true)\n      (= text \"\u043f\u0443\u0442\u044c\")         (assoc-in [:prepositional :singular :irregular-form?] true)\n      (= text \"\u0446\u0435\u0440\u043a\u043e\u0432\u044c\")      (assoc-in [:dative :plural :irregular-form?] true)\n      (= text \"\u0446\u0435\u0440\u043a\u043e\u0432\u044c\")      (assoc-in [:instrumental :plural :irregular-form?] true)\n      (= text \"\u0446\u0435\u0440\u043a\u043e\u0432\u044c\")      (assoc-in [:prepositional :plural :irregular-form?] true)\n\n      irregular-nom-sg?       (assoc-in [:nominative :singular :irregular-form?] true)\n      (and irregular-nom-sg?\n           (:same-as-base? (get-in table [:accusative :singular])))\n      ,                       (assoc-in [:accusative :singular :irregular-form?] true)\n\n      irregular-stem?         (assoc-in [:nominative :plural :irregular-stem?] true)\n      irregular-nom-pl?       (assoc-in [:nominative :plural :irregular-form?] true)\n      irregular-gen-pl?       (assoc-in [:genitive :plural :irregular-form?] true)\n      (and irregular-nom-pl? (not animate))\n      ,                       (assoc-in [:accusative :plural :irregular-form?] true)\n      (and irregular-gen-pl? animate)\n      ,                       (assoc-in [:accusative :plural :irregular-form?] true))))\n\n(defn- ends-in-consonant?\n  [word]\n  (re-find #\"[\u0431\u0434\u0444\u0433\u0447\u043a\u043b\u043c\u043d\u043f\u0440\u0441\u0442\u0432\u0445\u0437\u0448\u0449\u0436\u0446\u044c]$\" word)) ; Don't include \u0439 here b/c nouns ending in -\u044c\u0435\n\n(defn mark-fleeting-vowels\n  [table {:keys [animate]}]\n  (let [nom-sing (get-in table [:nominative :singular :text] \"\")\n        nom-plur (get-in table [:nominative :plural :text] \"\")\n        gen-sing (get-in table [:genitive :singular :text] \"\")\n        gen-plur (get-in table [:genitive :plural :text] \"\")\n        [ns-vowels gs-vowels np-vowels gp-vowels]\n        ,        (map #(keys (re-pos #\"[\u0430\u0435\u0451\u0438\u043e\u0443\u044f\u044e\u044b\u044d]\" %))\n                      [nom-sing gen-sing nom-plur gen-plur])\n        nsfv     (and (= (count ns-vowels) (count gs-vowels))\n                      (ends-in-consonant? nom-sing)\n                      (< (apply max ns-vowels) (apply max gs-vowels)))\n        gpfv     (and (= (count np-vowels) (count gp-vowels))\n                     (ends-in-consonant? gen-plur)\n                     (> (apply max np-vowels) (apply max gp-vowels)))]\n    (cond-> table\n      nsfv                     (assoc-in [:nominative :singular :fleeting-vowel?] true) ; \u0440\u044b\u043d\u043e\u043a\n      (and nsfv (not animate)) (assoc-in [:accusative :singular :fleeting-vowel?] true)\n      (= \"\u0432\u043e\u0448\u044c\" nom-sing)      (assoc-in [:accusative :singular :fleeting-vowel?] true)\n      (#{\"\u043b\u044e\u0431\u043e\u0432\u044c\" \"\u0440\u043e\u0436\u044c\" \"\u043b\u043e\u0436\u044c\" \"\u0446\u0435\u0440\u043a\u043e\u0432\u044c\" \"\u0432\u043e\u0448\u044c\"} nom-sing)\n      ,                        (assoc-in [:instrumental :singular :fleeting-vowel?] true)\n      gpfv                     (assoc-in [:genitive :plural :fleeting-vowel?] true) ; \u0434\u0435\u0432\u0443\u0448\u043a\u0430\n      (and gpfv animate)       (assoc-in [:accusative :plural :fleeting-vowel?] true))))\n\n(def null-ending-pl-count\n  #{\"\u0430\u043d\u0433\u0441\u0442\u0440\u0435\u043c\" \"\u0430\u0440\u0448\u0438\u043d\" \"\u0431\u0438\u0442\" \"\u0433\u0435\u043a\u0442\u0430\u0440\" \"\u0434\u0435\u0446\u0438\u0431\u0435\u043b\" \"\u043a\u0432\u0430\u043d\u0442\"  \"\u043c\u0430\u043d\u0430\u0442\" \"\u043c\u0438\u043a\u0440\u043e\u043d\" \"\u043e\u043c\" \"\u0447\u0435\u043b\u043e\u0432\u0435\u043a\"})\n\n(defn count-forms\n  \"Adds key-value pairs for singular and plural count forms if the target noun has them.\"\n  [text]\n  {:pl-count (or (null-ending-pl-count text)\n                 (when (= text \"\u0433\u043e\u0434\") \"\u043b\u0435\u0442\"))\n   :sg-count ({\"\u0440\u044f\u0434\" \"\u0440\u044f\u0434\u0430\u0301\" \"\u0447\u0430\u0441\" \"\u0447\u0430\u0441\u0430\u0301\" \"\u0448\u0430\u0440\" \"\u0448\u0430\u0440\u0430\u0301\" \"\u0448\u0430\u0433\" \"\u0448\u0430\u0433\u0430\u0301\"} text)})\n\n(defn declines-like-adjective?\n  [word gender table]\n  (let [gen (or (get-in table [:genitive :singular :text])\n                (get-in table [:genitive :plural :text]))]\n    (if (= gender :feminine)\n      (and (re-find #\"[\u0430\u044f]\u044f$\" word)              (re-find #\"(?:\u043e\u0439|[\u0438\u044b]\u0445)$\" gen))\n      (and (re-find #\"(?:[\u043e\u0438\u044b]\u0439|[\u0438\u044b\u043e\u0435]\u0435)$\" word) (re-find #\"(?:\u043e\u0433\u043e|[\u0438\u044b]\u0445)\" gen)))))\n\n(defn guess-gender\n  \"Guesses the gender of an input word based on rules and statistical data, to be\n  used in cases where the target word is not found in the Slovarish dictionary.\"\n  ;; https://www.ruspeach.com/en/learning/5089/\n  ;; https://www.enrulangclub.ru/2019/05/gender-nouns-in-y.html\n  ;; Percentages obtained from OpenCorpora data\n  [word]\n  (cond\n    (s/ends-with? word \"\u043c\u044f\")              :neuter      ; 100% probability\n    (s/ends-with? word \"\u0451\")               :neuter      ; 100%\n    (s/ends-with? word \"\u043a\u0430\")              :feminine    ; 98.84%\n    (s/ends-with? word \"\u043a\u043e\")              :neuter      ; 72.7%\n    (re-find #\"[\u0430\u044f]$\" word)               :feminine    ; 99.1% probability\n    (s/ends-with? word \"\u044b\u0435\")              :common      ;\n    (re-find #\"[\u0435\u043e]$\" word)               :neuter      ; 99.9% probability\n    (re-find #\"(\u0430\u0440|\u0442\u0435\u043b)\u044c$\" word)          :masculine   ; 97.3%\n    (re-find #\"([\u0447\u0448\u0449\u0431\u0432\u0434\u0437\u0441\u0442]|\u043e\u0441\u0442)\u044c$\" word) :feminine    ; 91.4% probability\n    (s/ends-with? word \"\u044c\")               :masculine   ; 60.9% probability\n    (re-find #\"[\u0438\u044b\u0443]$\" word)              :masculine   ; Not a lemma, but putting \"nil\" here doesn't work\n    :else                                 :masculine))\n\n(defn rank-entries\n  \"If all entries are the same rank, leave the order unchanged; Wiktionary usually\n  lists them by commonness. There are some exceptions with bianimate nouns where the\n  rank of each entry was influenced by the source texts for the corpus.\"\n  [[{:keys [text]} & _ :as entries]]\n  (js/console.log text)\n  (cond\n    (= (count (distinct (map :rank entries))) 1) entries\n    (#{\"\u0440\u0430\u043a\" \"\u0433\u0440\u0430\u0444\" \"\u0434\u0440\u044f\u043d\u044c\" \"\u043a\u0440\u043e\u0448\u043a\u0430\" \"\u0447\u043b\u0435\u043d\" \"\u0442\u0438\u043f\" \"\u0442\u0440\u044f\u043f\u043a\u0430\" \"\u043f\u0430\u0442\u0440\u043e\u043d\"} text)\n    ,                                            (reverse entries)\n    (#{\"\u0436\u0438\u043b\u0430\" \"\u043b\u0438\u0446\u043e\" \"\u0432\u0435\u0441\u0442\u043d\u0438\u043a\"} text)            entries\n    :else (sort-by #(get % :rank 30000) < entries)))\n\n(defn declensions\n  [word]\n  (if-some [entries (get @all-nouns (s/lower-case word))]\n    (vec\n      (for [{:keys [text stressed plural gender locative vocative partitive\n                    animate wordform-scores stress-pattern stem-stress-index] :as shell}\n            (rank-entries entries)\n            :let [bare-plural (some-> plural (s/replace #\"\\u0301\" \"\"))\n                  unstressed  (plain-declensions shell :bare-plural bare-plural)\n                  pattern     (u/generate-pattern text bare-plural stress-pattern animate)\n                  table       (-> (merge-with (partial merge-with into)\n                                              unstressed pattern #_special wordform-scores)\n\n                                  ;; necessary for special cases where the ending stress isn't on the ending\n                                  ;; e.g. \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a, but maybe there's a better way to do this\n                                  (assoc-in [:nominative :singular :stressed] stressed)\n                                  (assoc-in [:nominative :plural :stressed] plural)\n\n                                  (add-special-forms shell pattern)\n                                  (overwrite-gen-plur shell)\n                                  (reduce-reducible-stems shell)\n                                  (fix-inaccuracies shell)\n                                  yotify\n                                  (mark-irregular-forms shell)\n                                  (u/apply-stress stem-stress-index)\n                                  (mark-fleeting-vowels shell))]]\n\n        (-> shell\n            (assoc :verified? true\n                   :table table\n                   :declines-like-adj? (declines-like-adjective? word gender table))\n            (merge (count-forms text)))))\n    ;; If word is not in dictionary, offer an unstressed guess\n    (let [gender  (guess-gender word)\n          animate (some? (re-find #\"(?:[\u0430\u044f]\u043d\u0438\u043d|[\u043e\u0451]\u043d\u043e\u043a)$\" word))\n          shell   {:text word :gender gender :animate animate}]\n      [{:verified? false   :gloss    \"\"\n        :gender    gender  :animate  animate\n        :table (-> (plain-declensions shell)\n                   (mark-irregular-forms shell)\n                   (mark-fleeting-vowels animate))}])))\n\n(comment\n \"\u044c\u043c\u0438 instrumental plural forms\"\n [\"\u043c\u0430\u0442\u0435\u0440\u044c\u043c\u0438\" \"\u0434\u043e\u0447\u0435\u0440\u044c\u043c\u0438\" \"\u0434\u0435\u0442\u044c\u043c\u0438\" \"\u043b\u044e\u0434\u044c\u043c\u0438\" \"\u0434\u0432\u0435\u0440\u044c\u043c\u0438\" \"\u043b\u043e\u0448\u0430\u0434\u044c\u043c\u0438\" \"\u043a\u043e\u0441\u0442\u044c\u043c\u0438\" \"\u043f\u043b\u0435\u0442\u044c\u043c\u0438\"])\n"]}