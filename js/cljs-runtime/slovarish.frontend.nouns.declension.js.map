{"version":3,"sources":["slovarish/frontend/nouns/declension.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.nouns","js/slovarish.frontend.nouns.declension","js/slovarish.frontend.nouns.declension.inflector","slovarish.frontend.nouns.declension/inflector","js/module$node_modules$russian_nouns_js$RussianNouns.Engine","p__61257","map__61258","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.nouns.declension/create-lemma","text","gender","plural-only?","attributes","rod","cljs.core/name","clojure.string/upper-case","js/RussianNouns","cljs.core/clj->js","cljs.core.assoc","slovarish.frontend.nouns.declension/soft-sign-locatives","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.nouns.declension/plain-declensions","p__61265","p__61266","map__61267","map__61268","seq61261","G__61262","cljs.core/first","cljs.core/next","self__4851__auto__","animate","singular-only?","shell","bare-plural","lemma","result","cljs.core/transient","slovarish.frontend.nouns.declension.goog$module$goog$object.forEach","padezh","eng-str","eng-kw","cljs.core.keyword","clojure.string/lower-case","s-form","p-form","or__4253__auto__","cljs.core._EQ_","cljs.core/re-find","cljs.core.conj_BANG_","G__61272","cljs.core/not","cljs.core/assoc-in","cljs.core/persistent!","slovarish.frontend.nouns.declension/special-forms","locative","vocative","partitive","pattern","G__61276","cljs.core.get_in","p__61281","map__61282","slovarish.frontend.nouns.declension/overwrite-gen-plur","table","gen-plur","temp__5751__auto__","bare-gp","G__61283","clojure.string/replace","new-data","G__61287","cljs.core.update_in","cljs.core/merge","p__61293","map__61294","slovarish.frontend.nouns.declension/fix-inaccuracies","plural","G__61295","cljs.core/dissoc","slovarish.frontend.nouns.declension/yotify","map__61296","stress","and__4251__auto__","clojure.string/replace-first","p__61300","map__61301","slovarish.frontend.nouns.declension/mark-irregular-forms","indeclinable","nom-plur","gen-sing","polu-word?","irregular-stem?","fexpr__61302","clojure.string/ends-with?","cljs.core/count","cljs.core.not_EQ_","cljs.core/re-seq","irregular-nom-pl?","expected-gen-plur","clojure.string/blank?","slovarish.frontend.nouns.gen-plur/expected-gp","irregular-gen-pl?","irregular-nom-sg?","fexpr__61303","G__61304","slovarish.frontend.nouns.declension/ends-in-consonant?","word","p__61306","map__61307","slovarish.frontend.nouns.declension/mark-fleeting-vowels","vec__61308","cljs.core.nth","nom-sing","ns-vowels","gs-vowels","np-vowels","gp-vowels","p1__61305#","cljs.core.map","cljs.core/keys","slovarish.frontend.utils/re-pos","nsfv","cljs.core.apply","cljs.core/max","gpfv","G__61311","fexpr__61312","slovarish.frontend.nouns.declension/null-ending-pl-count","slovarish.frontend.nouns.declension/count-forms","fexpr__61313","slovarish.frontend.nouns.declension/declines-like-adjective?","gen","slovarish.frontend.nouns.declension/guess-gender","slovarish.frontend.nouns.declension/rank-entries","entries","cljs.core.distinct","p1__61314#","cljs.core.sort_by","cljs.core/<","slovarish.frontend.nouns.declension/declensions","temp__5755__auto__","cljs.core/deref","slovarish.frontend.data/all-nouns","cljs.core/vec","iter__4652__auto__","s__61316","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__61318","cljs.core/chunk-buffer","i__61317","map__61319","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61315","cljs.core/chunk-rest","map__61321","cljs.core/cons","cljs.core/rest","stressed","rank","wordform-scores","stress-pattern","stem-stress-index","gloss","distinction","fleeting-vowel?","G__61320","G__61322","unstressed","slovarish.frontend.nouns.declension.plain_declensions","slovarish.frontend.nouns.stress/generate-pattern","special","cljs.core.merge_with","cljs.core.partial","cljs.core/merge-with","cljs.core/into","slovarish.frontend.nouns.stress/apply-stress","cljs.core.merge","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.nouns.declension\n  \"Namespace for generating declension tables and marking irregular forms.\"\n  (:require [clojure.string :as s]\n            [goog.object :as g]\n            [goog.string :as gstring]\n            [goog.string.format]\n            [cljs.reader :as reader]\n            [\"russian-nouns-js\" :as rn]\n            [slovarish.frontend.data :refer [all-nouns]]\n            [slovarish.frontend.nouns.stress :as u]\n            [slovarish.frontend.nouns.gen-plur :refer [expected-gp]]\n            [slovarish.frontend.utils :refer [re-pos]]))\n\n(defonce inflector (new rn/Engine))\n\n(defn create-lemma\n  \"Wrapper around RussianNouns.createLemma() that allows gender to be passed in\n  as a lower-case English keyword (in Clojure-ish style).\"\n  [{:keys [text gender plural-only?] :as attributes}]\n  (let [rod (->> (name gender)\n                 (s/upper-case)\n                 (aget (. js/RussianNouns -Gender)))]\n    (clj->js (assoc attributes\n                    :gender rod\n                    :pluraleTantum plural-only?))))\n\n(def soft-sign-locatives\n  ;; Not in RussianNounsJS. Source: https://fido7.ru.linguist.narkive.com/784uabtw\n  #{\"\u0433\u0440\u0443\u0434\u044c\" \"\u0447\u0435\u0441\u0442\u044c\" \"\u0440\u044b\u0441\u044c\" \"\u0442\u0435\u043d\u044c\" \"\u0433\u0440\u044f\u0437\u044c\" \"\u043f\u044b\u043b\u044c\" \"\u0441\u0435\u043d\u044c\" \"\u043d\u043e\u0447\u044c\" \"\u0434\u0430\u043b\u044c\" \"\u043c\u0435\u043b\u044c\"\n    \"\u0441\u0435\u0442\u044c\" \"\u043f\u0435\u0447\u044c\" \"\u043a\u0440\u043e\u0432\u044c\" \"\u043e\u0441\u044c\" \"\u0434\u0432\u0435\u0440\u044c\" \"\u043f\u043e\u043b\u0443\u043e\u0441\u044c\" \"\u0433\u043e\u0440\u0441\u0442\u044c\"})\n\n(defn- plain-declensions\n  \"Given a shell (basic attributes of a noun) and an optional plural form, returns\n  a declension table of the noun based on RussianNounsJS output. This table does\n  not include stress information and it may have inaccuracies. Both of these will\n  be fixed a later stage.\"\n  [{:keys [text gender animate singular-only? plural-only?] :as shell} & {:keys [bare-plural]}]\n  (let [lemma  (create-lemma shell)\n        result (transient {})]\n    (g/forEach (. js/RussianNouns -Case)\n      (fn [padezh eng-str]\n        (let [eng-kw (keyword (s/lower-case eng-str))\n              s-form (first (.decline inflector lemma padezh))\n              p-form (if plural-only?\n                       s-form\n                       (first (.decline inflector lemma padezh\n                                        (or bare-plural\n                                            (first (.pluralize inflector lemma))))))]\n          (if (= eng-kw :locative)\n            ;; Locative case is special and is ONLY added for certain nouns\n            (when (or (re-find #\"[\u0443\u044e]$\" s-form) ; \u0441\u0442\u0440\u043e\u0439 -> \u0441\u0442\u0440\u043e\u044e\u0301\n                      (soft-sign-locatives text))\n              (conj! result {:locative {:singular {:text s-form :stress :ending}}}))\n            ;; Normal cases\n            (conj! result\n              (cond-> {}\n                (not plural-only?)   (assoc-in [eng-kw :singular] {:text s-form :same-as-base? (= s-form text)})\n                (not singular-only?) (assoc-in [eng-kw :plural]   {:text p-form :same-as-base? (= p-form text)})))))))\n    (persistent! result)))\n\n(defn special-forms\n  \"Adds special forms to the shell, with stress info, if they are attested in\n  OpenCorpora data. There are some instances where a special form exists but is\n  not attested, e.g. \u0432\u0435\u0441 has an unattested locative, but by definition they are\n  probably not worth including.\"\n  [locative vocative partitive pattern]\n  (cond-> {}\n    locative  (assoc :locative  {:singular {:text locative :stress :ending}})\n    vocative  (assoc :vocative  {:singular {:text vocative :stress :stem}})\n    partitive (assoc :partitive {:singular {:text partitive\n                                            :stress (get-in pattern [:genitive :singular :stress])}})))\n\n(defn overwrite-gen-plur\n  \"There are too many genitive plural exceptions that RussianNounsJS doesn't get\n  right, so it's easier to just take it from Wiktionary.\"\n  [table {:keys [text animate gen-plur]}]\n  (if-let [bare-gp  (some-> gen-plur (s/replace #\"\\u0301\" \"\"))]\n    (let [new-data {:text bare-gp :plural gen-plur :same-as-base? (= text bare-gp)}]\n      (cond-> table\n        :always (update-in [:genitive :plural] merge new-data)\n        animate (update-in [:accusative :plural] merge new-data)))\n    table))\n\n(defn fix-inaccuracies\n  \"In addition to the genitive plural, there are some isolated inaccuracies.\"\n  [table {:keys [text plural]}]\n  (cond\n    (and (= text \"\u043d\u043e\u043b\u044c\") (= plural \"\u043d\u0443\u043b\u0438\u0301\"))\n    , (-> table\n          (assoc-in [:genitive :singular :text] \"\u043d\u0443\u043b\u044f\")\n          (assoc-in [:dative :singular :text] \"\u043d\u0443\u043b\u044e\")\n          (assoc-in [:instrumental :singular :text] \"\u043d\u0443\u043b\u0451\u043c\")\n          (assoc-in [:prepositional :singular :text] \"\u043d\u0443\u043b\u0435\"))\n    :else\n    , (case text\n        \"\u0447\u0435\u043b\u043e\u0432\u0435\u043a\" (-> table ; not an inaccuracy, but show \u043b\u044e\u0434\u0438 for both entries\n                      (assoc-in [:nominative :plural :text] \"\u043b\u044e\u0434\u0438\"))\n\n        \"\u043d\u0430\u0451\u043c\"    (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043d\u0430\u0439\u043c\u0430\")\n                      (assoc-in [:dative :singular :text] \"\u043d\u0430\u0439\u043c\u0443\")\n                      (assoc-in [:instrumental :singular :text] \"\u043d\u0430\u0439\u043c\u043e\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u043d\u0430\u0439\u043c\u0435\"))\n\n        \"\u0437\u0430\u0451\u043c\"    (-> table\n                      (assoc-in [:genitive :singular :text] \"\u0437\u0430\u0439\u043c\u0430\")\n                      (assoc-in [:dative :singular :text] \"\u0437\u0430\u0439\u043c\u0443\")\n                      (assoc-in [:instrumental :singular :text] \"\u0437\u0430\u0439\u043c\u043e\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u0437\u0430\u0439\u043c\u0435\"))\n\n        \"\u043f\u043e\u0434\u043d\u0430\u0451\u043c\" (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u0430\")\n                      (assoc-in [:dative :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u0443\")\n                      (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u043e\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u043f\u043e\u0434\u043d\u0430\u0439\u043c\u0435\"))\n\n        \"\u043b\u044e\u0431\u043e\u0432\u044c\"  (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043b\u044e\u0431\u0432\u0438\")\n                      (assoc-in [:dative :singular :text] \"\u043b\u044e\u0431\u0432\u0438\")\n                      (assoc-in [:prepositional :singular :text] \"\u043b\u044e\u0431\u0432\u0438\"))\n\n        \"\u043b\u043e\u0436\u044c\"    (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043b\u0436\u0438\")\n                      (assoc-in [:dative :singular :text] \"\u043b\u0436\u0438\")\n                      (assoc-in [:prepositional :singular :text] \"\u043b\u0436\u0438\"))\n\n        \"\u043f\u043e\u043b\u043d\u043e\u0447\u044c\" (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:dative :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u044c\u044e\")\n                      (assoc-in [:prepositional :singular :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:nominative :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:accusative :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0438\")\n                      (assoc-in [:genitive :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0435\u0439\")\n                      (assoc-in [:dative :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0430\u043c\")\n                      (assoc-in [:instrumental :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0430\u043c\u0438\")\n                      (assoc-in [:prepositional :plural :text] \"\u043f\u043e\u043b\u0443\u043d\u043e\u0447\u0430\u0445\"))\n\n        \"\u043f\u043e\u043b\u0434\u0435\u043d\u044c\" (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\")\n                      (assoc-in [:dative :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044e\")\n                      (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0435\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0435\")\n                      (assoc-in [:nominative :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0438\")\n                      (assoc-in [:genitive :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0435\u0439\")\n                      (assoc-in [:accusative :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u0438\")\n                      (assoc-in [:dative :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\u043c\")\n                      (assoc-in [:instrumental :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\u043c\u0438\")\n                      (assoc-in [:prepositional :plural :text] \"\u043f\u043e\u043b\u0443\u0434\u043d\u044f\u0445\"))\n\n        \"\u043f\u043e\u043b\u0441\u043e\u0442\u043d\u0438\" (-> table\n                       (assoc-in [:accusative :singular :text] \"\u043f\u043e\u043b\u0441\u043e\u0442\u043d\u044e\")\n                       (assoc-in [:accusative :singular :same-as-base?] false)\n                       (assoc-in [:instrumental :singular :text] \"\u043f\u043e\u043b\u0441\u043e\u0442\u043d\u0435\u0439\"))\n\n        \"\u043f\u043e\u043b\u0434\u043e\u0440\u043e\u0433\u0438\" (-> table\n                        (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u0434\u043e\u0440\u043e\u0433\u0438\")\n                        (assoc-in [:genitive :singular :same-as-base?] true)\n                        (update-in [:dative] dissoc :singular)\n                        (update-in [:instrumental] dissoc :singular))\n\n        \"\u043f\u043e\u043b\u043f\u0443\u0442\u0438\"  (-> table\n                       (assoc-in [:genitive :singular :text] \"\u043f\u043e\u043b\u043f\u0443\u0442\u0438\")\n                       (assoc-in [:genitive :singular :same-as-base?] true)\n                       (assoc-in [:prepositional :singular :same-as-base?] true)\n                       (update-in [:dative] dissoc :singular)\n                       (update-in [:instrumental] dissoc :singular))\n\n        \"\u043e\u0440\u0451\u043b\"    (-> table\n                      (assoc-in [:genitive :singular :text] \"\u043e\u0440\u043b\u0430\")\n                      (assoc-in [:accusative :singular :text] \"\u043e\u0440\u043b\u0430\")\n                      (assoc-in [:dative :singular :text] \"\u043e\u0440\u043b\u0443\")\n                      (assoc-in [:instrumental :singular :text] \"\u043e\u0440\u043b\u043e\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u043e\u0440\u043b\u0435\"))\n\n        \"\u0425\u0430\u043d\u043e\u0439\"   (-> table\n                      (assoc-in [:genitive :singular :text] \"\u0425\u0430\u043d\u043e\u044f\")\n                      (assoc-in [:dative :singular :text] \"\u0425\u0430\u043d\u043e\u044e\")\n                      (assoc-in [:instrumental :singular :text] \"\u0425\u0430\u043d\u043e\u0435\u043c\")\n                      (assoc-in [:prepositional :singular :text] \"\u0425\u0430\u043d\u043e\u0435\"))\n        table)))\n\n(defn yotify\n  \"Changes \u0435 -> \u0451 in instrumental singular forms of \u0434\u0435\u043d\u044c, \u0441\u0435\u043c\u044c\u044f, \u0437\u0435\u043c\u043b\u044f, etc.,\n  as RussianNounsJS does not do this.\"\n  [table]\n  (let [{:keys [text stress]} (get-in table [:instrumental :singular])]\n    (if (and text (= stress :ending) (re-find #\"\u0435(?=[\u043c\u0439]$)\" text))\n      (update-in table [:instrumental :singular :text]\n                 s/replace-first #\"\u0435(?=[\u043c\u0439]$)\" \"\u0451\")\n      table)))\n\n(defn mark-irregular-forms\n  \"Marks plurals with irregular stems (by matching against certain words, endings, or\n  a threshold of similarity with the singular), as well as individual irregular forms.\n  Irregular forms are those that are unexpected given the typical declension (1st/2nd/3rd)\n  of the noun.\"\n  ;; http://russianlearn.com/grammar/category/irregular_plural_endings\n  ;; http://russianlearn.com/grammar/category/irregular_declensions_in_the_singular_and_plural\n  ;; https://en.wikipedia.org/wiki/Russian_declension#Irregular_plural_forms\n  [table {:keys [text gender animate plural-only? singular-only? indeclinable]}]\n  (let [nom-plur          (get-in table [:nominative :plural :text] \"\")\n        gen-plur          (get-in table [:genitive :plural :text] \"\")\n        gen-sing          (get-in table [:genitive :singular :text] \"\") ; for \u043f\u043e\u043b- words\n        polu-word?        (and (not (re-find #\"\u043f\u043e\u043b\u0443\" text))\n                               (re-find #\"\u043f\u043e\u043b\u0443\" gen-sing))\n\n        irregular-stem?   (or (#{\"\u0441\u043e\u0441\u0435\u0434\" \"\u0447\u0451\u0440\u0442\" \"\u0443\u0445\u043e\" \"\u043e\u043a\u043e\" \"\u0437\u0430\u0440\u044f\"} text)\n                              (and (not (s/ends-with? text \"\u044c\"))\n                                   (> (count text) (count nom-plur)))\n                              (and (not (s/ends-with? text \"\u0435\u0441\"))\n                                   (s/ends-with? nom-plur \"\u0435\u0441\u0430\"))\n                              (re-find #\"(?:[\u0430\u044f]\u043d\u0435|\u043c\u0435\u043d\u0430|[\u0430\u044f]\u0442\u0430)$\" nom-plur)\n                              (and (not (re-find #\"\u044c[\u0451\u0435]$\" text))\n                                   (s/ends-with? nom-plur \"\u044c\u044f\"))\n                              (and (= text \"\u043a\u043e\u043b\u0435\u043d\u043e\") (= nom-plur \"\u043a\u043e\u043b\u0435\u043d\u0438\"))\n                              (and (not (s/ends-with? text \"\u044c\u0451\"))\n                                   (not= text \"\u0441\u043b\u0435\u0437\u0430\")\n                                   (not= (count (re-seq #\"\u0451\" gen-sing)) (count (re-seq #\"\u0451\" nom-plur)))))\n\n        irregular-nom-pl? (or (and (re-find #\"[^\u044c][\u0430\u044f]$\" nom-plur)\n                                   (not (re-find #\"[a\u044f]\u0442\u0430$\" nom-plur))\n                                   (= gender :masculine))\n                              (= text \"\u0441\u043b\u0435\u0437\u0430\")\n                              (and (s/ends-with? text \"\u043a\u043e\") (s/ends-with? nom-plur \"\u043a\u0438\")))\n        ;; Irregular genitive plural forms can occur even when the stem is irregular, e.g. \u0433\u043b\u0430\u0437\n        expected-gen-plur (when-not (or plural-only? singular-only? indeclinable\n                                        (s/blank? gen-plur) polu-word?)\n                            (expected-gp table irregular-stem?))\n        irregular-gen-pl? (or (and expected-gen-plur (not= gen-plur expected-gen-plur))\n                              (= text \"\u0441\u043b\u0435\u0437\u0430\"))\n        irregular-nom-sg? (or (#{\"\u043c\u0430\u0442\u044c\" \"\u0434\u043e\u0447\u044c\" \"\u0413\u043e\u0441\u043f\u043e\u0434\u044c\"} text)\n                              (and (= text \"\u043d\u043e\u043b\u044c\") (= nom-plur \"\u043d\u0443\u043b\u0438\"))\n                              polu-word?)]\n    (cond-> table\n      (= text \"\u043f\u0443\u0442\u044c\")         (assoc-in [:genitive :singular :irregular-form?] true)\n      (= text \"\u043f\u0443\u0442\u044c\")         (assoc-in [:dative :singular :irregular-form?] true)\n      (= text \"\u043f\u0443\u0442\u044c\")         (assoc-in [:prepositional :singular :irregular-form?] true)\n\n      irregular-nom-sg?       (assoc-in [:nominative :singular :irregular-form?] true)\n      (and irregular-nom-sg?\n           (:same-as-base? (get-in table [:accusative :singular])))\n      ,                       (assoc-in [:accusative :singular :irregular-form?] true)\n\n      irregular-stem?         (assoc-in [:nominative :plural :irregular-stem?] true)\n      irregular-nom-pl?       (assoc-in [:nominative :plural :irregular-form?] true)\n      irregular-gen-pl?       (assoc-in [:genitive :plural :irregular-form?] true)\n      (and irregular-nom-pl? (not animate))\n      ,                       (assoc-in [:accusative :plural :irregular-form?] true)\n      (and irregular-gen-pl? animate)\n      ,                       (assoc-in [:accusative :plural :irregular-form?] true))))\n\n(defn- ends-in-consonant?\n  [word]\n  (re-find #\"[\u0431\u0434\u0444\u0433\u0447\u043a\u043b\u043c\u043d\u043f\u0440\u0441\u0442\u0432\u0445\u0437\u0448\u0449\u0436\u0446\u044c]$\" word)) ; Don't include \u0439 here b/c nouns ending in -\u044c\u0435\n\n(defn mark-fleeting-vowels\n  [table {:keys [animate plural-only? singular-only? indeclinable] :as attributes}]\n  (let [nom-sing (get-in table [:nominative :singular :text] \"\")\n        nom-plur (get-in table [:nominative :plural :text] \"\")\n        gen-sing (get-in table [:genitive :singular :text] \"\")\n        gen-plur (get-in table [:genitive :plural :text] \"\")\n        [ns-vowels gs-vowels np-vowels gp-vowels]\n        ,        (map #(keys (re-pos #\"[\u0430\u0435\u0451\u0438\u043e\u0443\u044f\u044e\u044b\u044d]\" %))\n                      [nom-sing gen-sing nom-plur gen-plur])\n        nsfv     (and (= (count ns-vowels) (count gs-vowels))\n                      (ends-in-consonant? nom-sing)\n                      (< (apply max ns-vowels) (apply max gs-vowels)))\n        gpfv     (and (= (count np-vowels) (count gp-vowels))\n                     (ends-in-consonant? gen-plur)\n                     (> (apply max np-vowels) (apply max gp-vowels)))]\n    (cond-> table\n      nsfv                     (assoc-in [:nominative :singular :fleeting-vowel?] true) ; \u0440\u044b\u043d\u043e\u043a\n      (and nsfv (not animate)) (assoc-in [:accusative :singular :fleeting-vowel?] true)\n      (#{\"\u043b\u044e\u0431\u043e\u0432\u044c\" \"\u0440\u043e\u0436\u044c\" \"\u043b\u043e\u0436\u044c\"} nom-sing)\n      ,                        (assoc-in [:instrumental :singular :fleeting-vowel?] true)\n      gpfv                     (assoc-in [:genitive :plural :fleeting-vowel?] true) ; \u0434\u0435\u0432\u0443\u0448\u043a\u0430\n      (and gpfv animate)       (assoc-in [:accusative :plural :fleeting-vowel?] true))))\n\n(def null-ending-pl-count\n  #{\"\u0430\u043d\u0433\u0441\u0442\u0440\u0435\u043c\" \"\u0430\u0440\u0448\u0438\u043d\" \"\u0431\u0430\u0439\u0442\" \"\u0431\u0438\u0442\" \"\u0432\u043e\u043b\u044c\u0442\" \"\u0433\u0435\u043a\u0442\u0430\u0440\" \"\u0433\u0438\u0433\" \"\u0433\u0438\u0433\u0430\u0431\u0430\u0439\u0442\" \"\u0433\u0438\u0433\u0430\u0431\u0438\u0442\"\n    \"\u0433\u0440\u0430\u043c\u043c\" \"\u043a\u0432\u0430\u043d\u0442\" \"\u043a\u0438\u043b\u043e\u0431\u0430\u0439\u0442\" \"\u043a\u0438\u043b\u043e\u0433\u0440\u0430\u043c\u043c\" \"\u043c\u0430\u043d\u0430\u0442\" \"\u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442\" \"\u043c\u0438\u043a\u0440\u043e\u043d\" \"\u043e\u043c\"\n    \"\u0441\u0442\u0440\u0430\u0437\" \"\u0442\u0435\u0440\u0430\u0431\u0430\u0439\u0442\" \"\u0442\u0435\u0440\u0430\u0431\u0438\u0442\" \"\u044d\u0440\u0433\" \"\u0447\u0435\u043b\u043e\u0432\u0435\u043a\"})\n\n(defn count-forms\n  \"Adds key-value pairs for singular and plural count forms if the target noun has them.\"\n  [text]\n  {:pl-count (or (null-ending-pl-count text)\n                 (when (= text \"\u0433\u043e\u0434\") \"\u043b\u0435\u0442\"))\n   :sg-count ({\"\u0440\u044f\u0434\" \"\u0440\u044f\u0434\u0430\u0301\" \"\u0447\u0430\u0441\" \"\u0447\u0430\u0441\u0430\u0301\" \"\u0448\u0430\u0440\" \"\u0448\u0430\u0440\u0430\u0301\" \"\u0448\u0430\u0433\" \"\u0448\u0430\u0433\u0430\u0301\"} text)})\n\n(defn declines-like-adjective?\n  [word gender table]\n  (let [gen (or (get-in table [:genitive :singular :text])\n                (get-in table [:genitive :plural :text]))]\n    (if (= gender :feminine)\n      (and (re-find #\"[\u0430\u044f]\u044f$\" word)              (re-find #\"(?:\u043e\u0439|[\u0438\u044b]\u0445)$\" gen))\n      (and (re-find #\"(?:[\u043e\u0438\u044b]\u0439|[\u0438\u044b\u043e\u0435]\u0435)$\" word) (re-find #\"(?:\u043e\u0433\u043e|[\u0438\u044b]\u0445)\" gen)))))\n\n(defn guess-gender\n  \"Guesses the gender of an input word based on rules and statistical data, to be\n  used in cases where the target word is not found in the Slovarish dictionary.\"\n  ;; https://www.ruspeach.com/en/learning/5089/\n  ;; https://www.enrulangclub.ru/2019/05/gender-nouns-in-y.html\n  ;; Percentages obtained from OpenCorpora data\n  [word]\n  (cond\n    (s/ends-with? word \"\u043c\u044f\")              :neuter      ; 100% probability\n    (s/ends-with? word \"\u0451\")               :neuter      ; 100%\n    (s/ends-with? word \"\u043a\u0430\")              :feminine    ; 98.84%\n    (s/ends-with? word \"\u043a\u043e\")              :neuter      ; 72.7%\n    (re-find #\"[\u0430\u044f]$\" word)               :feminine    ; 99.1% probability\n    (s/ends-with? word \"\u044b\u0435\")              :common      ;\n    (re-find #\"[\u0435\u043e]$\" word)               :neuter      ; 99.9% probability\n    (re-find #\"(\u0430\u0440|\u0442\u0435\u043b)\u044c$\" word)          :masculine   ; 97.3%\n    (re-find #\"([\u0447\u0448\u0449\u0431\u0432\u0434\u0437\u0441\u0442]|\u043e\u0441\u0442)\u044c$\" word) :feminine    ; 91.4% probability\n    (s/ends-with? word \"\u044c\")               :masculine   ; 60.9% probability\n    (re-find #\"[\u0438\u044b\u0443]$\" word)              :masculine   ; Not a lemma, but putting \"nil\" here doesn't work\n    :else                                 :masculine))\n\n(defn rank-entries\n  \"If all entries are the same rank, leave the order unchanged; Wiktionary usually\n  lists them by commonness.\"\n  [entries]\n  (if (> (count (distinct (map :rank entries))) 1)\n    (sort-by #(get % :rank 30000) < entries)\n    entries))\n\n(defn declensions\n  [word]\n  (if-some [entries (get @all-nouns (s/lower-case word))]\n    (vec\n      (for [{:keys [text stressed plural gender\n                    locative vocative partitive\n                    animate rank wordform-scores\n                    indeclinable singular-only? plural-only?\n                    stress-pattern stem-stress-index\n                    gloss distinction fleeting-vowel?] :as shell}\n            (rank-entries entries)\n            :let [bare-plural (some-> plural (s/replace #\"\\u0301\" \"\"))\n                  unstressed  (plain-declensions shell :bare-plural bare-plural)\n                  pattern     (u/generate-pattern text bare-plural stress-pattern animate)\n                  special     (special-forms locative vocative partitive pattern)\n                  table       (-> (merge-with (partial merge-with into)\n                                              unstressed pattern special wordform-scores)\n\n                                  ;; necessary for special cases where the ending stress isn't on the ending\n                                  ;; e.g. \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a, but maybe there's a better way to do this\n                                  (assoc-in [:nominative :singular :stressed] stressed)\n                                  (assoc-in [:nominative :plural :stressed] plural)\n\n                                  (overwrite-gen-plur shell)\n                                  (fix-inaccuracies shell)\n                                  yotify\n                                  (mark-irregular-forms shell)\n                                  (u/apply-stress stem-stress-index)\n                                  (mark-fleeting-vowels shell))]]\n\n        (-> shell\n            (assoc :verified? true\n                   :table table\n                   :declines-like-adj? (declines-like-adjective? word gender table))\n            (merge (count-forms text)))))\n    ;; If word is not in dictionary, offer an unstressed guess\n    (let [gender  (guess-gender word)\n          animate (some? (re-find #\"(?:[\u0430\u044f]\u043d\u0438\u043d|[\u043e\u0451]\u043d\u043e\u043a)$\" word))\n          shell   {:text word :gender gender :animate animate}]\n      [{:verified? false   :gloss    \"\"\n        :gender    gender  :animate  animate\n        :table (-> (plain-declensions shell)\n                   (mark-irregular-forms shell)\n                   (mark-fleeting-vowels animate))}])))\n\n(comment\n \"\u044c\u043c\u0438 instrumental plural forms\"\n [\"\u043c\u0430\u0442\u0435\u0440\u044c\u043c\u0438\" \"\u0434\u043e\u0447\u0435\u0440\u044c\u043c\u0438\" \"\u0434\u0435\u0442\u044c\u043c\u0438\" \"\u043b\u044e\u0434\u044c\u043c\u0438\" \"\u0434\u0432\u0435\u0440\u044c\u043c\u0438\" \"\u043b\u043e\u0448\u0430\u0434\u044c\u043c\u0438\" \"\u043a\u043e\u0441\u0442\u044c\u043c\u0438\" \"\u043f\u043b\u0435\u0442\u044c\u043c\u0438\"])\n"]}