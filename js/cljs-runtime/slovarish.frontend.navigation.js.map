{"version":3,"sources":["slovarish/frontend/navigation.cljs"],"mappings":"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","names":["slovarish.frontend.navigation/resize-input-text","reciprocal-size","cljs.core/deref","cljs.core/count","slovarish.frontend.state/input","goog.style/setStyle","js/document","slovarish.frontend.navigation/truncated?","el","slovarish.frontend.navigation/toggle-gloss-arrows","seq__55981","cljs.core/seq","chunk__55982","count__55983","i__55984","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","goog.dom.classlist/add","goog.dom.classlist/remove","slovarish.frontend.navigation/base-cell-colors","slovarish.frontend.navigation/color-cells-by-score","white","goog.color/hexToRgb","cells","max-score","or__4253__auto__","cljs.core.apply","cljs.core/max","p1__55986#","cljs.core.map","factor","seq__55987","chunk__55989","count__55990","i__55991","cell","cell-type","goog.dom.classlist/contains","slovarish.frontend.state/result","base-color","score","goog.dom.classlist/removeAll","and__4251__auto__","goog.color/blend","goog.color/rgbArrayToHex","goog.dom.classlist/addAll","G__55995","G__55996","cljs.core/name","slovarish.frontend.navigation/current-hash","slovarish.frontend.state/pos","slovarish.frontend.state/which-result?","slovarish.frontend.navigation/push-state","js/history.pushState","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.navigation/go-to-word","p__55999","map__56000","cljs.core/--destructure-map","cljs.core.get","seq55997","G__55998","self__4851__auto__","word","target-pos","filter-fn","push-state?","cljs.core._EQ_","cljs.core/reset!","slovarish.frontend.state/results","G__56001","G__56002","cljs.core/Keyword","slovarish.frontend.nouns.declension/declensions","G__56004","fexpr__56003","slovarish.frontend.data/all-verbs","clojure.string/lower-case","G__56006","fexpr__56005","slovarish.frontend.data/all-adjectives","cljs.core.filter","slovarish.frontend.state/which-verb-forms?","js/setTimeout","cljs.core.not_EQ_","slovarish.frontend.navigation/prev-sense","cljs.core.nth","cljs.core.swap_BANG_","cljs.core/dec","slovarish.frontend.navigation/next-sense","cljs.core/inc"],"sourcesContent":["(ns slovarish.frontend.navigation\n  (:require [reagent.core :as r]\n            [goog.dom :as gdom]\n            [goog.dom.classlist :as cl]\n            [goog.style :as style]\n            [goog.color :as gcolor]\n            [clojure.string :as s]\n            [slovarish.frontend.nouns.declension :as d]\n            [slovarish.frontend.state :refer [input results which-result? result pos which-verb-forms?]]\n            [slovarish.frontend.data :refer [all-nouns all-verbs all-adjectives]]))\n\n(defn resize-input-text []\n  (let [reciprocal-size (/ 7 (* 0.08 (count @input)))]\n    (style/setStyle (.querySelector js/document \"#word-input\")\n                    \"font-size\"\n                    (str \"clamp(12px, \"\n                         (if (> reciprocal-size 7) 7 reciprocal-size) \"vw, \"\n                         \"80px)\"))))\n\n(defn truncated? [el] ; https://stackoverflow.com/a/10017343\n  (< (-> el .-offsetWidth) (-> el .-scrollWidth)))\n\n(defn toggle-gloss-arrows []\n  (doseq [el (.querySelectorAll js/document \".primary-gloss\")]\n    (if (truncated? el)\n      (cl/add el \"down-arrow\")\n      (cl/remove el \"down-arrow\"))))\n\n(def base-cell-colors\n  {:default \"#eee\"\n   :irregular-form \"#D7EBBA\"\n   :masculine \"#bdd6ff\"\n   :feminine \"#ffc2e9\"\n   :neuter \"#fff0a6\"\n   :common \"#deccf4\"})\n\n(defn color-cells-by-score []\n  (let [white     (gcolor/hexToRgb \"#fffcf5\")\n        cells     (.querySelectorAll js/document \"#noun-table td\")\n        max-score (or (apply max (map #(.getAttribute % \"data-score\") cells))\n                      1)\n        factor    (/ 1 max-score)]\n    (doseq [cell cells\n            :let [cell-type  (if (cl/contains cell \"irregular-form\")\n                               :irregular-form\n                               (or (-> (result) :gender)\n                                   :default))\n                  base-color (gcolor/hexToRgb (cell-type base-cell-colors))\n                  score      (* (or (.getAttribute cell \"data-score\") 0)\n                                factor)]]\n      (cl/removeAll cell #js[\"masculine\" \"feminine\" \"neuter\" \"common\" \"default\" \"light\" \"uncommon\"])\n      (if (and (:verified? (result)) (:wordform-scores (result)))\n        (do\n          (when (<= score 0.2) (cl/add cell \"uncommon\"))\n          (style/setStyle cell \"background-color\"\n                          (-> base-color\n                              (gcolor/blend white score)\n                              gcolor/rgbArrayToHex)))\n        (do\n          (style/setStyle cell \"background-color\" \"\")\n          (cl/addAll cell #js[\"light\"\n                              (when-not (cl/contains cell \"irregular-form\")\n                                (or (some-> (result) :gender name)\n                                    \"default\"))]))))))\n\n(defn current-hash []\n  (str \"#/\" (-> @pos name first) \"/\" @input\n       (when (pos? @which-result?) (str \"/\" (inc @which-result?)))))\n\n(defn push-state []\n  (js/history.pushState {} nil (current-hash)))\n\n(defn go-to-word\n  [word & {:keys [target-pos filter-fn push-state?]\n           :or {target-pos nil filter-fn nil push-state? true}}]\n  (if (= @pos target-pos)\n    (do\n      (reset! input \"\")\n      (reset! results nil))\n    (do\n      (reset! input word)\n      (when target-pos\n        (reset! pos target-pos))\n      (reset! results (when (>= (count word) 2)\n                        (cond->> (case @pos\n                                   :noun      (d/declensions word)\n                                   :verb      (@all-verbs (s/lower-case word))\n                                   :adjective (@all-adjectives (s/lower-case word))\n                                   nil)\n                                 filter-fn (filter filter-fn))))))\n  (reset! which-result? 0)\n  (reset! which-verb-forms? :main)\n  (resize-input-text)\n  (js/setTimeout toggle-gloss-arrows 25)\n  (when (= @pos :noun)\n    (js/setTimeout color-cells-by-score 25))\n  (when (and push-state?\n             (or (:verified? (result))\n                 (and (not= @pos :noun) (result))))\n    (push-state)))\n\n(defn prev-sense []\n  (when (and (pos? @which-result?)\n             (nth @results (dec @which-result?)))\n    (swap! which-result? dec)\n    (push-state))\n  (when (= @pos :noun)\n    (js/setTimeout color-cells-by-score 25)))\n\n(defn next-sense []\n  (when (< (inc @which-result?) (count @results))\n    (swap! which-result? inc)\n    (push-state))\n  (when (= @pos :noun)\n    (js/setTimeout color-cells-by-score 25)))\n\n#_(defn lighten\n    ;; Generates colors for CSS - these are the \"light\" colors for unverified results\n    [factor hex]\n    (-> hex\n        gcolor/hexToRgb\n        (gcolor/lighten factor)\n        gcolor/rgbArrayToHex))\n\n#_(map #(lighten 0.62 (% base-cell-colors))\n       [:masculine :feminine :neuter :common :irregular-form])\n"]}