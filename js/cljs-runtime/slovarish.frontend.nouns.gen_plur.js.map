{"version":3,"sources":["slovarish/frontend/nouns/gen_plur.cljs"],"mappings":"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","names":["slovarish.frontend.nouns.gen-plur/vowels","slovarish.frontend.nouns.gen-plur/soft-vowels","slovarish.frontend.nouns.gen-plur/ending","word","cljs.core/re-find","cljs.core/re-pattern","clojure.string/ends-with?","var_args","G__1025775","slovarish.frontend.nouns.gen-plur/chop-last","js/Error","cljs.core.subs","cljs.core/count","n","slovarish.frontend.nouns.gen-plur/expected-gp*","table","irregular-stem?","nom-sing","cljs.core.get_in","nom-plur","base","slovarish.frontend.nouns.gen_plur.chop_last","stress","ns-ending","G__1025815","cljs.core/Keyword","cljs.core._EQ_","fexpr__1025831","G__1025832","G__1025847","and__4251__auto__","or__4253__auto__","slovarish.frontend.nouns.gen-plur/expected-gp","temp__5755__auto__","vec__1025879","cljs.core.nth","_","head","x","y","tail","vowel","clojure.string/includes?"],"sourcesContent":["(ns slovarish.frontend.nouns.gen-plur\n  \"Namespace for generating expected genitive plural forms for comparison.\"\n  (:require [clojure.string :as s]))\n\n;; http://babelfish.50webs.com/languages/Russian%20Genitive%20Plural.html\n\n(def vowels \"\u0430\u0435\u0438\u043e\u0443\u044f\u0451\u044d\u044e\u044b\")\n\n(def soft-vowels \"\u044f\u0438\u0435\u0451\u044e\")\n\n(defn ending\n  [word]\n  (cond\n    (re-find (re-pattern (str \"[\" vowels \"]$\")) word)\n    ,                         :vowel\n    (s/ends-with? word \"\u044c\")   :soft\n    (re-find #\"[\u0448\u0436\u0449\u0447]$\" word) :sibilant\n    (s/ends-with? word \"\u0439\")   :j\n    (s/ends-with? word \"\u0446\")   :ts\n    :else                     :hard))\n\n(defn chop-last\n  ([word]\n   (subs word 0 (dec (count word))))\n  ([n word]\n   (subs word 0 (- (count word) n))))\n\n(defn- expected-gp*\n  [table irregular-stem?]\n  (let [nom-sing  (get-in table [:nominative :singular :text])\n        nom-plur  (get-in table [:nominative :plural :text])\n        base      (chop-last nom-plur) ; use nom-plur not nom-sing b/c possible fleeting vowel\n        stress    (get-in table [:genitive :plural :stress] :stem)\n        ns-ending (ending nom-sing)]\n    (cond\n      ;; Irregular nominative plural forms\n      irregular-stem?\n      , (cond\n          (s/ends-with? nom-plur \"\u044c\u044f\")   (case stress\n                                           :ending (str (chop-last base) \"\u0435\u0439\")\n                                           :stem   (str base \"\u0435\u0432\"))\n          (s/ends-with? nom-plur \"\u043c\u0435\u043d\u0430\") (str (chop-last 2 base) \"\u0451\u043d\")\n          (= ns-ending :vowel)           (chop-last nom-plur)  ; Feminine nouns, with \u0435/\u0451 alternation\n          (s/ends-with? nom-plur \"\u0438\")    (str base \"\u0435\u0439\")\n          (re-find #\"(?:[\u0430\u044f]\u043d\u0438\u043d|[\u043e\u0451]\u043d\u043e\u043a)$\" nom-sing)\n          ,                              (chop-last nom-plur)\n          (= ns-ending :hard)            (str base \"\u043e\u0432\")       ; \u043e\u0440\u0451\u043b\n          :else (chop-last nom-plur))    ; Not sure what else would fall here, but could be incorrect\n\n      ;; Adjectival declensions\n      (re-find #\"[\u0438\u044b]\u0435$\" nom-plur) (str base \"\u0445\")\n\n      ;; Consonant endings\n      (#{:j :ts} ns-ending)\n      , (case [ns-ending stress]\n          [:j :stem]          (str base \"\u0435\u0432\")\n          [:j :ending]        (str base \"\u0451\u0432\")\n          [:ts :stem]         (str base \"\u0435\u0432\")\n          [:ts :ending]       (str base \"\u043e\u0432\"))\n      (= ns-ending :hard)     (str base \"\u043e\u0432\")\n      (= ns-ending :sibilant) (str base \"\u0435\u0439\")\n      (= ns-ending :soft)     (str base \"\u0435\u0439\")\n\n      ;; Null-ending cases\n      (re-find (re-pattern (str \"\u044c[\" vowels \"]$\")) nom-sing)\n      , (case stress\n          :ending (str (chop-last base) \"\u0435\u0439\")\n          :stem   (str (chop-last base) \"\u0438\u0439\"))\n      (and (= stress :ending)\n           (or (re-find (re-pattern (str \"[\u0448\u0436\u0449\u0447][\" vowels \"]$\")) nom-sing)\n               (s/ends-with? nom-sing \"\u043d\u044f\"))) ; from Wade's grammar\n      , (str base \"\u0435\u0439\")\n      (s/ends-with? nom-sing \"\u0446\u0435\") ; two possibilities here, \u043e\u043a\u043e\u043d\u0446\u0435 -> \u043e\u043a\u043e\u043d\u0435\u0446 / \u043e\u043a\u043e\u043d\u0446\u0435\u0432\n      , base\n      (re-find (re-pattern (str \"[^\" vowels \"\u0439][\u0435]$\")) nom-sing)\n      , (str base \"\u0435\u0439\")\n      (re-find (re-pattern (str \"[^\" vowels \"\u0439][\" soft-vowels \"]$\")) nom-sing)\n      , (str base \"\u044c\")\n      (re-find (re-pattern (str \"[\" vowels \"][\" soft-vowels \"]$\")) nom-sing)\n      , (str base \"\u0439\")\n      :else base)))\n\n(defn expected-gp\n  [table irregular-stem?]\n  (let [base (expected-gp* table irregular-stem?)]\n    (if-some [[_                         head       x                y      tail]\n              (re-find (re-pattern (str \"(.*?)([^\" vowels \"])([^\" vowels \"])(\u044c)?$\"))\n                       base)]\n      (let [vowel (cond\n                    (s/includes? \"\u0448\u0436\u0449\u0447\u044c\u0439\" x)   \"\u0435\"\n                    (or (s/includes? \"\u043a\u0433\u0445\" x)\n                        (s/includes? \"\u043a\u0433\u0445\" y)) \"\u043e\"\n                    :else                      \"\u0435\")]\n        (cond\n          (= x y)                      base\n          (not (s/includes? \"\u043a\u043b\u043d\u0446\" y)) base\n          (s/includes? \"\u044c\u0439\" x)         (str head   vowel y tail)  ; \u0447\u0430\u0439\u043a\u0430, \u043a\u043e\u043b\u044c\u0446\u043e\n          :else                        (str head x vowel y tail)))\n      base)))\n"]}