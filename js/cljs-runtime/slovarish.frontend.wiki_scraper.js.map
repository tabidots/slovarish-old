{"version":3,"sources":["slovarish/frontend/wiki_scraper.cljs"],"mappings":"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","names":["slovarish.frontend.wiki-scraper/wiki-fetch","word","destination","status","js/fetch","r","js/Error","hickory.core/parse","hickory.core/as-hickory","G__28559","G__28560","G__28561","slovarish.frontend.wiki-scraper/extract-lexical-info","e","cljs.core/reset!","js/alert","cljs.core.prn","wiki-data","hickory.select/select","hickory.select/tag","cljs.core/first","gender","G__28568","fexpr__28567","hickory.select.child","hickory.select.and","hickory.select/has-child","p1__28562#","hickory.select.attr","cljs.core._EQ_","hickory.select/class","stressed-headword","p1__28563#","p1__28564#","cljs.core/not-empty","cljs.core.swap_BANG_","cljs.core/merge","temp__5755__auto__","target-node","p1__28565#","lexical-info","hickory.select.descendant","p1__28566#","cljs.core.map","cljs.core.apply","cljs.core/str","surname?","cljs.core/last","clojure.string/includes?","and__4251__auto__","cljs.core/re-find","cljs.core/second","clojure.string/replace","cljs.core.keyword"],"sourcesContent":["(ns slovarish.frontend.wiki-scraper\n  \"Namespace that requests lexical information from Wiktionary.\"\n  (:require [clojure.string :refer [includes? replace]]\n            [hickory.core :as h]\n            [hickory.select :as s]))\n\n(declare extract-lexical-info)\n\n(defn wiki-fetch\n  ;; https://gist.github.com/pesterhazy/c4bab748214d2d59883e05339ce22a0f\n  ;; If we need to fetch multiple results (capitalization maybe?)\n  ;; refer here: https://stackoverflow.com/questions/41508036/fetch-multiple-promises-return-only-one\n  [word destination status]\n  (-> (js/fetch (str \"https://en.wiktionary.org/w/rest.php/v1/page/\" word \"/html\"))\n      (.then (fn [r]\n               (when-not (.-ok r)\n                 (throw (js/Error. (str \"Could not fetch Wiktionary page for \" word \".\"))))\n               (.text r)))\n      (.then (fn [r]\n               (-> (h/parse r)\n                   (h/as-hickory)\n                   (extract-lexical-info destination status))))\n      (.catch (fn [e]\n                (reset! status nil)\n                (js/alert (str \"It looks like \" word \" is not a word. \"\n                               \"Please check the spelling and try again.\"))\n                (prn [:error e])))))\n\n(defn extract-lexical-info\n  [wiki-data destination status]\n  (let [word              (-> (s/select (s/tag :title) wiki-data)\n                              first :content first)\n        gender            (-> (s/select (s/child (s/and (s/tag :p)\n                                                        (s/has-child (s/attr :lang #(= % \"ru\"))))\n                                                 (s/class \"gender\")\n                                                 (s/tag :abbr))\n                                        wiki-data)\n                              first :content first\n                              {\"m\" :masculine \"f\" :feminine \"n\" :neuter})\n        stressed-headword (-> (s/select (s/and (s/class \"headword\")\n                                               (s/attr :lang #(= % \"ru\")))\n                                        wiki-data)\n                              first :content first)]\n\n    (if (-> (s/select (s/attr :href #(= % \"./Appendix:Glossary#indeclinable\"))\n                      wiki-data)\n            not-empty)\n      ;; If the noun is indeclinable, stop here\n      (do\n        (reset! status true)\n        (swap! destination merge {:stressed-headword stressed-headword\n                                  :indeclinable true :gender gender}))\n\n      ;; Otherwise extract all data possible\n      (if-some [target-node (-> (s/select (s/and (s/class \"NavHead\")\n                                                 (s/has-child (s/attr :lang #(= % \"ru\"))))\n                                          wiki-data)\n                                first)]\n        (let [lexical-info (->> (s/select (s/descendant (s/tag :a))\n                                          target-node)\n                                first :content\n                                (map #(if (string? %) % (first (:content %))))\n                                (apply str))\n              surname?     (= \" (surname)\" (-> target-node :content last))]\n          (swap! destination merge\n                 {:stressed-headword stressed-headword\n                  :gender            gender\n                  :surname           surname?}\n                (when lexical-info\n                  {:animate         (or (includes? lexical-info \"anim\")\n                                        (includes? lexical-info \"bian\"))\n                   :plural-only?   (includes? lexical-info \"pl-only\")\n                   ;; workaround for words like \u0434\u0435\u043d\u044c\u0433\u0438\n                   :gender          (if (and (includes? lexical-info \"pl-only\")\n                                             (re-find #\"[\u0438\u044b]$\" word))\n                                       :common gender)\n\n                   :singular-only?  (includes? lexical-info \"sg-only\")\n                   :irregular?      (includes? lexical-info \"irreg\")\n                   :fleeting-vowel? (includes? lexical-info \"reduc\")\n                   :stress-pattern  (-> #\"(?:accent-)([a-f]'*)\"\n                                        (re-find lexical-info)\n                                        second\n                                        (replace #\"'\" \"*\")\n                                        keyword)}))\n          (reset! status true))\n\n        ;; no target-node? -> Wiktionary page does not have declensions b/c not a lemma\n        (do\n          (reset! status nil)\n          (js/alert (str word \" is not a noun in dictionary form.\")))))))\n"]}