{"version":3,"sources":["slovarish/frontend/app.cljs"],"mappings":"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","names":["slovarish.frontend.app/russian-poses","slovarish.frontend.app/pos-button","which-pos","cljs.core/deref","cljs.core._EQ_","slovarish.frontend.state/pos","slovarish.frontend.navigation.go_to_word","slovarish.frontend.state/input","G__1026535","cljs.core/Keyword","js/Error","slovarish.frontend.state/display-language","cljs.core/name","slovarish.frontend.app/header","cljs.core/reset!","goog.dom.classlist/toggle","js/document","slovarish.frontend.state/show-stress?","slovarish.frontend.app/word-input","e","G__1026536","G__1026537","slovarish.frontend.state/result","or__4253__auto__","G__1026538","cljs.core/seq?","slovarish.frontend.state/results","G__1026540","fexpr__1026539","and__4251__auto__","G__1026541","cljs.core.get_in","clojure.string/lower-case","word","clojure.string/trim","cljs.core/re-find","slovarish.frontend.navigation/go-to-word","js/alert","G__1026542","cljs.core/count","cljs.core.doall","iter__4652__auto__","s__1026544","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__1026546","cljs.core/chunk-buffer","i__1026545","vec__1026547","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__1026543","cljs.core/chunk-rest","vec__1026550","cljs.core/first","cljs.core/cons","cljs.core/rest","i","gloss","cljs.core.map_indexed","x","slovarish.frontend.state/which-result?","target","G__1026553","slovarish.frontend.state/which-verb-forms?","cljs.core.keyword","G__1026554","G__1026555","gender","gender-name","G__1026556","G__1026557","slovarish.frontend.gloss/render-glosses","G__1026558","G__1026560","fexpr__1026559","slovarish.frontend.app/suggestions","G__1026563","G__1026564","G__1026565","G__1026566","source","G__1026567","slovarish.frontend.data/all-nouns","slovarish.frontend.data/all-verbs","slovarish.frontend.data/all-adjectives","temp__5757__auto__","predictions","cljs.core/keys","p1__1026561#","cljs.core.filter","clojure.string/starts-with?","cljs.core.remove","cljs.core.sort_by","cljs.core/<","cljs.core/not-empty","G__1026568","s__1026570","b__1026572","i__1026571","p1__1026562#","iter__1026569","cljs.core.take","slovarish.frontend.app/legend","G__1026573","G__1026577","fexpr__1026576","G__1026578","slovarish.frontend.app/credits","goog.dom.classlist/add","goog.dom.classlist/remove","slovarish.frontend.app/pick-random-word","G__1026580","slovarish.frontend.data/top-2k-words","p1__1026579#","cljs.core/some","cljs.core/val","cljs.core/rand-nth","js/console.log","slovarish.frontend.app/inflector-app","slovarish.frontend.data/load-mask","G__1026581","slovarish.frontend.nouns.noun-view/noun-table","slovarish.frontend.verbs.verb-view/verb-table","slovarish.frontend.adjectives.adjective-view/adj-table","slovarish.frontend.app/run","reagent.dom.render","js/document.getElementById","slovarish.frontend.app/init","slovarish.frontend.data/load-edn","js/window","slovarish.frontend.navigation/toggle-gloss-arrows","G__1026582","slovarish.frontend.navigation/prev-sense","slovarish.frontend.navigation/next-sense","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.app\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.dom :as gdom]\n            [goog.dom.classlist :as cl]\n            [goog.style :as style]\n            [goog.color :as gcolor]\n            [clojure.string :as s]\n            [cljs.reader :as reader]\n            [slovarish.frontend.state :refer [pos show-stress? input results which-result? result display-language which-verb-forms?]]\n            [slovarish.frontend.data :refer [all-nouns all-verbs all-adjectives load-edn load-mask top-2k-words]]\n            [slovarish.frontend.navigation :refer [go-to-word toggle-gloss-arrows prev-sense next-sense]]\n            [slovarish.frontend.gloss :refer [render-glosses]]\n            [slovarish.frontend.nouns.noun-view :refer [noun-table]]\n            [slovarish.frontend.verbs.verb-view :refer [verb-table]]\n            [slovarish.frontend.adjectives.adjective-view :refer [adj-table]]))\n\n(def russian-poses {:noun \"\u0441\u0443\u0449.\" :verb \"\u0433\u043b\u0430\u0433\u043e\u043b\" :adjective \"\u043f\u0440\u0438\u043b.\"})\n\n(defn pos-button [which-pos]\n  [:a.word-button {:class    (when (= @pos which-pos) \"current\")\n                   :on-click #(go-to-word @input :target-pos which-pos)}\n   (case @display-language\n     :english (name which-pos)\n     :russian (russian-poses which-pos))])\n\n(defn header []\n  [:div#header.flex\n   [:div.toggle-container.flex.row\n    [:span.option \"\u0440\u0443\"]\n    [:label.toggle {:for \"language\"}\n     [:input {:type      \"checkbox\"\n              :read-only true\n              :checked   (= @display-language :english)\n              :name      \"language\"}]\n     [:span.slider {:title \"Change language \u2022 \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044f\u0437\u044b\u043a \u0441\u0430\u0439\u0442\u0430\"\n                    :on-click (fn []\n                                (reset! display-language\n                                        (if (= @display-language :english)\n                                          :russian :english)))}]]\n    [:span.option \"en\"]]\n\n   [:div#pos-buttons\n    [pos-button :noun]\n    [pos-button :verb]\n    [pos-button :adjective]\n    [:a.word-button\n     {:on-click #(cl/toggle (.getElementById js/document \"credits\") \"visible\")}\n     \"\u00a9\"]]\n\n   [:div.toggle-container.flex.row\n    ;; Strangely, Chrome/Opera/Firefox cannot render Cyrillic sans-serif\n    ;; fonts with the combining diacritics in the right place, so Latin \"a\" is used here\n    [:span.option \"a\"]\n    [:label.toggle {:for \"stress-marks\"}\n     [:input {:type      \"checkbox\"\n              :read-only true\n              :checked   @show-stress?\n              :name      \"stress-marks\"}]\n     [:span.slider {:title \"Show/hide stress marks \u2022 \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c/\u0441\u0440\u043a\u044b\u0442\u044c \u0437\u043d\u0430\u043a\u0438 \u0443\u0434\u0430\u0440\u0435\u043d\u0438\u044f\"\n                    :on-click #(reset! show-stress?\n                                       (if @show-stress? false true))}]]\n    [:span.option \"\u00e1\"]]])\n\n(defn word-input []\n  [:div#word-input-wrapper\n   [:form {:on-submit (fn [e] (.preventDefault e)) ; https://stackoverflow.com/q/59548327\n           ;; https://stackoverflow.com/questions/254712/disable-spell-checking-on-html-textfields\n           :spell-check \"off\" :auto-capitalize \"off\" :auto-correct \"off\" :auto-complete \"off\"}\n    [:input#word-input\n     {:type \"text\"\n      :placeholder (case @display-language\n                     :english \"enter a word\"\n                     :russian \"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e\")\n      :class (case @pos\n               :noun [(when-not (:verified? (result)) \"light\")\n                      (or (some-> (result) :gender name)\n                          \"default\")]\n               :verb (if (seq? @results)\n                       ({:definite \"imperfective\" :indefinite \"indefinite\"\n                         :pf \"perfective\" :impf \"imperfective\" :bias \"biaspectual\"}\n                        (or (:definiteness (result))\n                            (:aspect (result))))\n                       \"default\")\n               \"default\")\n      ;; Convert noun input to proper case if it's different\n      :value (if (and (= @pos :noun)\n                      (some-> (result) :verified?))\n               (or (get-in (result) [:table :nominative :singular :text])\n                   (get-in (result) [:table :nominative :plural :text]))\n               (s/lower-case @input))\n      :on-keyDown (fn [e]\n                    (when (= (-> e .-code) \"Space\")\n                      (.preventDefault e)))\n      :on-change\n      (fn [e]\n        (let [word (-> e .-target .-value s/trim)]\n          (if (re-find #\"^[\u0401\u0451\u0410-\u044f]*$\" word)\n            (go-to-word word)\n            (js/alert (case @display-language\n                        :english \"This app only accepts Russian words as input. Please switch your keyboard to Russian and try again.\"\n                        :russian \"\u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u0441\u043b\u043e\u0432\u0430 \u043a\u0430\u043a \u0432\u0445\u043e\u0434. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u044f\u0437\u044b\u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\")))))}]]\n\n   (when (>= (count @results) 2)\n    [:div#senses\n     (doall\n       (for [[i gloss] (map-indexed (fn [i x] [(inc i) (:gloss x)])\n                                    @results)]\n         (if (= @which-result? (dec i))\n           ^{:key (str \"sense-\" i)} [:div.sense.current i]\n           ^{:key (str \"sense-\" i)}\n           [:a.sense {:href \"#\"\n                      :on-click (fn [e]\n                                  (let [target (-> e .-target .-innerHTML)]\n                                    (reset! which-result? (dec target))\n                                    #_(js/setTimeout color-cells-by-score 25)))}\n                     i])))])\n\n   (when (result)\n     (case @pos\n       :verb\n       [:div.verb-view-toggle-menu\n        [:select {:name \"verb-view-toggle\"\n                  :value @which-verb-forms?\n                  :onChange (fn [e]\n                              (reset! which-verb-forms? (-> e .-target .-value (keyword))))}\n         [:option {:value :main :defaultValue true}\n          (case @display-language\n            :english \"main forms\"\n            :russian \"\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b\")]\n         [:option {:value :participles}\n          (case @display-language\n            :english \"participles\"\n            :russian \"\u043f\u0440\u0438\u0447\u0430\u0441\u0442\u0438\u044f\")]]]\n\n       :noun\n       (let [gender (:gender (result))\n             gender-name (if (= gender :common) \"common-gender\" (name gender))]\n         [:div.icons.flex.column\n          [:div.icon.gender {:title (if (:verified? (result))\n                                      (str \"This is a \" gender-name \" noun.\")\n                                      (str \"Based on the ending, this noun is highly likely to be a \" gender-name \" noun.\"))\n                             :class gender}\n           (case gender\n             :masculine \"\\u2640\"\n             :feminine \"\\u2642\"\n             :neuter \"\\u26B2\"\n             :common \"\\u26A5\")]\n          (if (:animate (result))\n            [:div.icon.animacy {:title (str \"This is an animate \" (name gender) \" noun.\")\n                                :class gender}\n             (case gender\n               :masculine \"\ud83d\udc68\"\n               :feminine \"\ud83d\udc69\"\n               :neuter \"\ud83d\udc7d\"\n               :common \"\ud83d\udc6b\")]\n            [:div.icon.animacy {:title (if (:verified? (result))\n                                         (str \"This is an inanimate noun.\")\n                                         \"Nouns not found in the Slovarish dictionary are assumed to be inanimate.\")\n                                :class gender} \"\ud83e\udd16\"])\n          (if (:verified? (result))\n            [:div.icon {:class gender\n                        :title \"This noun was found in the Slovarish dictionary.\"} \"\u2714\ufe0f\"]\n            [:div.icon {:class gender\n                        :title (str \"This noun was not found in the Slovarish dictionary. \"\n                                    \"Results may contain inaccuracies.\")} \"\u2753\"])])\n\n       nil))\n\n   [render-glosses (result)\n    (case @pos\n      :noun (:gender (result))\n      :verb ({:indefinite \"indefinite\" :definite \"imperfective\"\n              :pf \"perfective\" :impf \"imperfective\" :bias \"biaspectual\"}\n             (or (:definiteness (result))\n                 (:aspect (result))))\n      \"default\")]])\n\n(defn suggestions []\n  (cond\n    ;; This blank div is necessary b/c we allow results to be displayed for 2-letter nouns\n    (and (= @pos :noun) (= (count @input) 2)) [:div#suggestions]\n\n    (< (count @input) 3) ;; Insufficient input -> Prompt to enter text\n    [:p#get-started #_\"\ud83c\udfb2\"\n     (case @display-language\n       :english \"Simply choose a part of speech and type a word in the field above to get started, or \"\n       :russian \"\u041f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0447\u0438 \u0438 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u043f\u043e\u043b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445\u0443, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c, \u0438\u043b\u0438 \")\n     [:span.press-enter-instruction\n      (case @display-language\n        :english \"press Enter \"\n        :russian \"\u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0412\u0432\u043e\u0434, \")]\n     [:span.random-word-button-instruction\n      (case @display-language\n        :english \"tap the \ud83c\udfb2 icon \"\n        :russian \"\u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0438\u043a\u043e\u043d\u0443 \ud83c\udfb2, \")]\n     (case @display-language\n       :english \"to look up a random word.\"\n       :russian \"\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e.\")]\n    ;; Sufficient input -> Display suggestions (there might be zero)\n    :else\n    (let [source (case @pos\n                   :noun @all-nouns :verb @all-verbs :adjective @all-adjectives)]\n      [:div#suggestions.word-buttons\n       (when-some [predictions (->> (keys source)\n                                    (filter #(s/starts-with? % (s/lower-case @input)))\n                                    (remove #{@input (str @input \"\u0441\u044f\") (str @input \"\u0441\u044c\")})\n                                    (sort-by count <)\n                                    not-empty)]\n         [:<>\n          [:span.italic.serif\n           (case @display-language\n             :english \"You might be looking for:\\u00A0\"\n             :russian \"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0438\u0449\u0435\u0442\u0435:\\u00A0\")]\n          (doall\n           (for [word (take 5 predictions)]\n              ^{:key (str \"autosuggest-\" word)}\n              [:span [:a.word-button\n                      {:href \"#\"\n                       :on-click #(let [word (-> % .-target .-innerHTML)]\n                                    (go-to-word word))}\n                      word]\n               \" \"]))\n          (when (> (count predictions) 5)\n            [:span \"...\"])])])))\n\n(defn legend []\n  [:div#legend\n\n   [:h1 (case @display-language\n          :english (str \"key to symbols (for \" (name @pos) \"s)\")\n          :russian (str \"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u043a\u043e\u0432 (\u0434\u043b\u044f \"\n                        ({:noun \"\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445\"\n                          :verb \"\u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432\"\n                          :adjective \"\u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445\"} @pos)\n                        \")\"))]\n   (when (= @display-language :russian)\n     [:p.italic \"(\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442.)\"])\n   (case @pos\n     :noun\n     [:<>\n      [:div\n       [:div.word-form.masculine \"\ud83d\udc68\"]\n       [:div.word-form.masculine \"\u2640\ud83e\udd16\"]\n       [:div.word-form.feminine \"\ud83d\udc69\"]\n       [:div.word-form.feminine \"\u2642\ud83e\udd16\"]\n       [:div.word-form.neuter \"\ud83d\udc7d\"]\n       [:div.word-form.neuter \"\u26b2\ud83e\udd16\"]]\n      [:div \"Animate and inanimate nouns by gender\"]\n      [:div\n       [:div.word-form.common \"\ud83d\udc6b\"]\n       [:div.word-form.common \"\u26a5 \ud83e\udd16\"]]\n      [:div \"Common gender (same form can be either m or f)\"]\n      [:div\n       [:div.word-form.noun.masculine.unpredictable-stress \"\u0432\u043e\u0301\u043b\u043e\u0441\u044b\\u00A0\\u00A0\"]\n       [:div.word-form.noun.feminine.unpredictable-stress \"\u0433\u043e\u0301\u043b\u043e\u0432\u0443\\u00A0\\u00A0\"]\n       [:div.word-form.noun.neuter.unpredictable-stress \"\u0443\u0442\u0440\u0430\u0301\\u00A0\\u00A0\"]]\n      [:div \"Location of stress is different from other singular or plural forms.\"]\n      [:div\n       [:div.word-form.noun.irregular-form \"\u0434\u043e\u043c\u0430\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.noun.irregular-form \"\u0441\u043b\u0451\u0437\u044b\\u00A0\\u00A0\"]\n       [:div.word-form.noun.irregular-form \"\u043a\u043e\u043b\u0435\u0301\u043d\u0435\u0439\\u00A0\\u00A0\"]]\n      [:div \"Form is different than expected, given the base form and gender of the noun.\"]\n      [:div\n       [:div.word-form.noun.masculine \"\u0440\u0438\u0301\u043d\" [:span.fleeting-vowel \"\u043e\"] \"\u043a\"]\n       [:div.word-form.noun.feminine \"\u0434\u0435\u0301\u0432\u0443\u0448\" [:span.fleeting-vowel \"\u0435\"] \"\u043a\"]\n       [:div.word-form.noun.neuter \"\u044f\" [:span.fleeting-vowel \"\u0438\u0301\"] \"\u0446\"]]\n      [:div \"Fleeting vowels that appear only in certain forms of the noun.\"]\n      [:div (str \"\u2714\ufe0f Results are verified. \"\n                 \"Case forms for nouns appearing in OpenCorpora data are shaded according to their relative frequency.\")]\n      [:div (str \"\u2753 Word not found in OpenCorpora or Wiktionary data. \"\n                 \"Results are generated automatically and may contain inaccuracies.\")]]\n\n     :verb\n     [:<>\n      [:div\n       [:div.word-form.infinitive.imperfective \"\u23f3\"]\n       [:div.word-form.infinitive.perfective \"\ud83d\udccc\"]\n       [:div.word-form.infinitive.biaspectual \"\u23f3\ud83d\udccc\"]]\n      [:div \"Imperfective/perfective/biaspectual verb\"]\n      [:div\n       [:div.word-form.infinitive.indefinite \"\ud83d\udd04\"]\n       [:div.word-form.infinitive.definite \"\u27a1\ufe0f\"]]\n      [:div \"Multidirectional/unidirectional verb of motion\"]\n      [:div\n       [:span.word-form.present.imperfective.unpredictable-stress \"\u0441\u043c\u043e\u0301\u0442\u0440\u0438\u0442\\u00A0\\u00A0\"]\n       [:span.word-form.past.feminine.unpredictable-stress \"\u0434\u0430\u043b\u0430\u0301\\u00A0\\u00A0\"]]\n      [:div \"Location of stress is different from other verb forms of the same tense.\"]\n      [:div\n       [:span.word-form.past.masculine.irregular-form \"\u043f\u043e\u0448\u0451\u043b\\u00A0\\u00A0\"]\n       [:span.word-form.past.masculine.irregular-form \"\u043c\u043e\u0301\u0433\\u00A0\\u00A0\"]]\n      [:div \"Past tense has an irregular form (only the masculine form will be marked).\"]\n      [:div\n       [:div.word-form.infinitive.imperfective \"\u0431\" [:span.fleeting-vowel \"\u0435\"] \"\u0440\u0443\u0301\"]\n       [:div.word-form.infinitive.perfective \"\u0432\" [:span.fleeting-vowel \"\u043e\"] \"\u0437\u044c\u043c\u0443\u0301\"]]\n      [:div \"Fleeting vowels that appear only in certain forms of the verb.\"]\n      [:div \"\ud83d\udd00 Has alternate past tense forms. Mouse over to see them.\"]\n      [:div \"\ud83d\udca1 Denotes a common verb whose conjugation pattern is shared by many other verbs.\"]]\n\n     :adjective\n     [:<>\n      [:div\n       [:div.word-form.masculine.irregular-form \"\u0441\u0442\u0440\u043e\u0301\" [:span.fleeting-vowel \"\u0435\"] \"\u043d\"]\n       [:div.word-form.masculine.irregular-form \"\u043b\u0451\u0433\" [:span.fleeting-vowel \"\u043e\"] \"\u043a\"]]\n      [:div \"Masculine short form has a buffer vowel.\"]\n      [:div\n       [:div.word-form.short-form.feminine.unpredictable-stress \"\u0440\u0435\u0434\u043a\u0430\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.short-form.neuter.unpredictable-stress \"\u0434\u0430\u043b\u0435\u043a\u043e\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.short-form.plural.common.unpredictable-stress \"\u0441\u0432\u0435\u0436\u0438\u0301\\u00A0\\u00A0\"]]\n      [:div \"End-stressed non-masculine short form.\"]\n      [:div\n       [:div.word-form.masculine.light \"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0439 \ud83e\udd16\"]\n       [:div.word-form.masculine.light \"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0433\u043e \ud83d\udc68\"]]\n      [:div \"Nom. = inan. acc.; gen. = anim. acc. for masculine forms.\"]\n      [:div\n       [:div.word-form.plural.common.light \"\u0431\u043e\u043b\u044c\u0448\u0438\u0301\u0435 \ud83e\udd16\"]\n       [:div.word-form.plural.common.light \"\u0431\u043e\u043b\u044c\u0448\u0438\u0301\u0445 \ud83d\udc6b\"]]\n      [:div \"Nom. = inan. acc.; gen. = anim. acc. for plural forms.\"]\n      [:div \"\ud83d\udd00 Has an alternate stress pattern for the short forms. Mouse over to see them.\"]]\n\n     nil)])\n\n(defn credits []\n  [:div#credits {:on-touchstart #(do (cl/add (.getElementById js/document \"credits\") \"visible\")\n                                   (cl/add (.getElementById js/document \"blur\") \"visible\"))\n                 :on-touchend #(do (cl/remove (.getElementById js/document \"credits\") \"visible\")\n                                 (cl/remove (.getElementById js/document \"blur\") \"visible\"))}\n   [:h1 \"credits\"]\n   (when (= @display-language :russian)\n     [:p.italic \"(\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442.)\"])\n   [:p \"Word lists and frequency data are taken from \"\n    [:a {:href \"//opencorpora.org\"} \"OpenCorpora\"]\n    \" and \"\n    [:a {:href \"//bokrcorpora.narod.ru/frqlist/frqlist-en.html\"} \"this page\"]\n    \". Primary source for the inflection data is \"\n    [:a {:href \"//wiktionary.org\"} \"English Wiktionary\"]\n    \", with \"\n    [:a {:href \"//github.com/georgy7/RussianNounsJS\"} \"RussianNouns.js\"]\n    \" handling algorithmic generation of noun forms where possible.\"]\n   [:p \"Please note that some inaccuracies may still remain.\"]\n   [:p \"Inspired by \"\n    [:a {:href \"//genusly.com\"} \"Genusly\"]\n    \" and \"\n    [:a {:href \"//kartaslov.ru\"} \"\u041a\u0430\u0440\u0442\u0430 \u0441\u043b\u043e\u0432\"]\n    \".\"]\n   [:p \"Written with \u2764\ufe0f in Clojure and ClojureScript.\"]\n   [:p \"Slovarish \u00a9 2022 Justin Douglas\"]])\n\n(defn pick-random-word []\n  (let [source (case @pos\n                 :noun @top-2k-words\n                 :verb (->> @all-verbs\n                            ;; Testing alternate past sets\n                            #_(filter (fn [[lemma entries]]\n                                        (some (fn [{:keys [category conjugation]}]\n                                                (s/includes? category \",\")\n                                                #_(some seq? (vals (:past conjugation))))\n                                              entries))))\n                 :adjective (->> @all-adjectives\n                                 (filter #(some :adjective? (val %)))))\n        word   (rand-nth (keys source))]\n    (js/console.log word)\n    (go-to-word word)))\n\n(defn inflector-app []\n  [:<>\n   [load-mask]\n   [credits]\n\n   [:div#container\n    [:div#random-word-button\n     [:span {:on-click #(pick-random-word)} \"\\u00A0\ud83c\udfb2\\u00A0\"]]\n\n    [header]\n    [word-input]\n    [suggestions]\n\n    (if (result)\n      (case @pos\n        :noun [noun-table (result)]\n        :verb [verb-table (result)]\n        :adjective [adj-table (result)]\n        nil)\n      [legend])]])\n\n(defn ^:dev/after-load run []\n  (rdom/render [inflector-app] (js/document.getElementById \"root\"))\n  (go-to-word @input))\n\n(defn init []\n  (run)\n  (load-edn \"nouns\" 1)\n  (load-edn \"verbs\" 1)\n  (load-edn \"adjectives\" 1)\n  (.addEventListener js/window \"resize\" #(toggle-gloss-arrows))\n  (.addEventListener js/window \"keydown\"\n                     (fn [e]\n                       (case (. e -code)\n                         \"Escape\"     (go-to-word \"\")\n                         \"Enter\"      (pick-random-word)\n                         \"ArrowLeft\"  (prev-sense)\n                         \"ArrowRight\" (next-sense)\n                         true))))\n"]}