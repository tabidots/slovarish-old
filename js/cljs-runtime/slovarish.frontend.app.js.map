{"version":3,"sources":["slovarish/frontend/app.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.app","js/slovarish.frontend.app.num-batches","slovarish.frontend.app/num-batches","js/slovarish.frontend.app.batches-loaded","slovarish.frontend.app/batches-loaded","reagent.core.atom","slovarish.frontend.app/demo-words-list","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.app/route","p__62200","map__62201","cljs.core/--destructure-map","cljs.core.get","seq62199","self__4852__auto__","cljs.core/seq","push-state?","vec__62202","cljs.core.nth","hash","js/window","target-pos","raw","sense","cljs.core.subs","clojure.string.split","word","and__4251__auto__","cljs.core/re-find","cljs.core/deref","cljs.core.not_EQ_","slovarish.frontend.state/input","slovarish.frontend.state/which-result?","cljs.core/reset!","slovarish.frontend.state/pos","fexpr__62205","slovarish.frontend.navigation.go_to_word","or__4253__auto__","G__62206","slovarish.frontend.app/load-mask","cljs.core.apply","cljs.core/+","cljs.core/vals","js/navigator","slovarish.frontend.app/load-edn","pos","batch","G__62210","cljs.core.keyword","G__62211","slovarish.frontend.data/top-2k-words","cljs.core.filter","p__62212","vec__62213","_","entries","p1__62207#","cljs.core/some","slovarish.frontend.data/all-nouns","batch-no","js/fetch","p1__62208#","p1__62209#","cljs.core.swap_BANG_","G__62216","slovarish.frontend.data/all-verbs","slovarish.frontend.data/all-adjectives","cljs.core/merge","cljs.reader.read_string","cljs.core/inc","G__62217","G__62218","slovarish.frontend.app/russian-poses","slovarish.frontend.app/change-pos","which-pos","word-input","js/document","slovarish.frontend.state/result","G__62220","fexpr__62219","slovarish.frontend.app/pos-button","cljs.core._EQ_","G__62221","cljs.core/Keyword","js/Error","slovarish.frontend.state/display-language","cljs.core/name","slovarish.frontend.app/change-sense","target","cljs.core/count","slovarish.frontend.state/results","slovarish.frontend.navigation/push-state","slovarish.frontend.app/go-to-suggestion","num","G__62222","slovarish.frontend.navigation/go-to-word","slovarish.frontend.app/paypal-donate-button","slovarish.frontend.app/header","e","goog.dom.classlist/toggle","slovarish.frontend.state/show-stress?","slovarish.frontend.app/word-input","G__62223","G__62224","G__62225","cljs.core/seq?","G__62227","fexpr__62226","G__62228","cljs.core.get_in","clojure.string/lower-case","code","clojure.string/includes?","clojure.string/trim","js/alert","G__62229","cljs.core.doall","iter__4652__auto__","s__62231","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__62233","cljs.core/chunk-buffer","i__62232","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62230","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","raw-index","cljs.core.range","i","G__62234","slovarish.frontend.state/which-verb-forms?","G__62235","G__62236","gender","gender-name","G__62237","G__62238","slovarish.frontend.gloss/render-glosses","G__62239","G__62241","fexpr__62240","slovarish.frontend.app/suggestions","G__62243","G__62244","G__62245","G__62246","source","G__62247","temp__5757__auto__","predictions","cljs.core/keys","p1__62242#","clojure.string/starts-with?","cljs.core.remove","cljs.core.sort_by","cljs.core/<","cljs.core/not-empty","G__62248","s__62250","b__62252","i__62251","iter__62249","cljs.core.take","slovarish.frontend.app/legend","G__62253","G__62257","fexpr__62256","G__62258","G__62259","G__62260","G__62261","G__62262","G__62263","G__62264","G__62265","G__62266","G__62267","G__62268","G__62269","G__62270","G__62271","G__62272","G__62273","G__62274","G__62275","G__62276","slovarish.frontend.app/credits","G__62277","G__62278","G__62279","G__62280","G__62281","G__62282","G__62283","G__62284","G__62285","G__62286","G__62287","G__62288","slovarish.frontend.app/pick-random-word","G__62290","p1__62289#","cljs.core/val","cljs.core/rand-nth","slovarish.frontend.app/demo-words","s__62292","b__62294","i__62293","map__62295","iter__62291","map__62296","text","infinitive","long-form","rank","G__62298","fexpr__62297","cljs.core.map","slovarish.frontend.app/inflector-app","G__62299","slovarish.frontend.nouns.noun-view/noun-table","slovarish.frontend.verbs.verb-view/verb-table","slovarish.frontend.adjectives.adjective-view/adj-table","slovarish.frontend.app/run","reagent.dom.render","js/document.getElementById","slovarish.frontend.app/init","slovarish.frontend.app.route","slovarish.frontend.navigation/toggle-gloss-arrows","G__62300","slovarish.frontend.navigation/prev-sense","slovarish.frontend.navigation/next-sense","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.app\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.dom.classlist :as cl]\n            [clojure.string :as s]\n            [cljs.reader :as reader]\n            [slovarish.frontend.state :refer [pos show-stress? input results which-result? result display-language which-verb-forms?]]\n            [slovarish.frontend.data :refer [all-nouns all-verbs all-adjectives top-2k-words]]\n            [slovarish.frontend.navigation :refer [go-to-word toggle-gloss-arrows prev-sense next-sense push-state]]\n            [slovarish.frontend.gloss :refer [render-glosses]]\n            [slovarish.frontend.nouns.noun-view :refer [noun-table naming]]\n            [slovarish.frontend.verbs.verb-view :refer [verb-table]]\n            [slovarish.frontend.adjectives.adjective-view :refer [adj-table]]))\n\n(defonce num-batches {:nouns 15 :verbs 10 :adjectives 8})\n(defonce batches-loaded (r/atom 0))\n\n(def demo-words-list ; TODO: Maybe use these, maybe not?\n  {:noun [\"\u0441\u043e\u0431\u0430\u043a\u0430\" \"\u0433\u043e\u043b\u043e\u0432\u0430\" \"\u0438\u0441\u0442\u043e\u0440\u0438\u044f\" \"\u0441\u0442\u0440\u0430\u043d\u0430\" \"\u0441\u0435\u043c\u044c\u044f\" \"\u0441\u0442\u0430\u0442\u044c\u044f\" \"\u0437\u0435\u043c\u043b\u044f\" \"\u0445\u043b\u0435\u0431\" \"\u0440\u043e\u0441\u0442\"\n          \"\u043a\u043d\u044f\u0437\u044c\" \"\u043c\u0435\u0441\u0442\u043e\" \"\u043c\u043e\u0440\u0435\" \"\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\" \"\u043f\u043b\u0430\u0442\u044c\u0435\" \"\u0434\u0435\u043b\u043e\" \"\u043a\u043e\u0441\u0442\u044c\" \"\u043f\u043e\u043b\u0443\u0447\u0430\u0441\u0430\" \"\u0440\u0435\u0447\u044c\"\n          \"\u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\" \"\u043f\u0443\u0442\u044c\" \"\u0432\u0440\u0435\u043c\u044f\" \"\u0433\u043e\u0434\" \"\u0447\u0435\u043b\u043e\u0432\u0435\u043a\" \"\u0440\u0435\u0431\u0451\u043d\u043e\u043a\" \"\u043a\u043e\u043b\u0435\u043d\u043e\" \"\u043b\u0438\u0441\u0442\" \"\u0443\u0433\u043e\u043b\" \"\u0443\u0442\u0440\u043e\" \"\u043c\u0430\u0442\u044c\"\n          \"\u043b\u044e\u0431\u043e\u0432\u044c\" \"\u0446\u0435\u0440\u043a\u043e\u0432\u044c\" \"\u0432\u043e\u043b\u043e\u0441\" \"\u0433\u043b\u0430\u0437\" \"\u0434\u0435\u043d\u044c\u0433\u0438\" \"\u0437\u0430\u043c\u043e\u043a\" \"\u043a\u043e\u043b\u044c\u0446\u043e\" \"\u043c\u0435\u0447\u0442\u0430\" \"\u043a\u043e\u043d\u0435\u0446\"\n          \"\u0442\u0443\u0444\u043b\u044f\" \"\u0437\u0432\u0435\u0437\u0434\u0430\" \"\u0441\u043b\u0435\u0437\u0430\" \"\u0441\u0435\u0441\u0442\u0440\u0430\" \"\u043d\u0430\u0451\u043c\" \"\u0432\u0435\u0449\u044c\" \"\u0440\u0435\u043a\u0430\" \"\u043f\u043b\u0430\u0442\u0451\u0436\" \"\u0441\u0435\u0440\u0434\u0446\u0435\" \"\u0441\u043e\u043b\u043d\u0446\u0435\"]\n   :verb [\"\u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c\" \"\u0432\u0435\u043d\u0447\u0430\u0442\u044c\" \"\u043e\u043f\u0435\u0440\u0435\u0442\u044c\" \"\u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f\" \"\u0443\u0432\u043b\u0435\u043a\u0430\u0442\u044c\" \"\u0436\u0434\u0430\u0442\u044c\" \"\u043f\u0435\u0447\u044c\"\n          \"\u0437\u043d\u0430\u0442\u044c\" \"\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\" \"\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c\" \"\u0432\u043b\u0430\u0434\u0435\u0442\u044c\" \"\u0445\u043e\u0442\u0435\u0442\u044c\" \"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\" \"\u0438\u0441\u043a\u0430\u0442\u044c\"\n          \"\u0441\u0438\u0434\u0435\u0442\u044c\" \"\u0438\u0434\u0442\u0438\" \"\u043f\u043b\u0430\u0442\u0438\u0442\u044c\" \"\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\" \"\u043d\u0430\u0439\u0442\u0438\"]\n   :adjective [\"\u0445\u043e\u043b\u043e\u0434\u043d\u044b\u0439\" \"\u0434\u043b\u0438\u043d\u043d\u044b\u0439\" \"\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439\" \"\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u0439\" \"\u0431\u043e\u043b\u044c\u0448\u043e\u0439\" \"\u043d\u043e\u0432\u044b\u0439\" \"\u0437\u043e\u043b\u043e\u0442\u043e\u0439\"\n               \"\u0434\u0440\u0435\u0432\u043d\u0438\u0439\" \"\u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439\" \"\u0443\u0434\u043e\u0431\u043d\u044b\u0439\" \"\u0433\u0440\u043e\u043c\u043a\u0438\u0439\" \"\u0442\u0451\u043f\u043b\u044b\u0439\" \"\u0434\u0435\u0448\u0451\u0432\u044b\u0439\" \"\u043e\u0441\u0442\u0440\u044b\u0439\" \"\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439\"]})\n\n(defn route\n  \"Pull hashbang route from URL and navigate to target word.\"\n  [& {:keys [push-state?] :or {push-state? true}}]\n  (let [hash                     (-> js/window .-location .-hash)\n        [target-pos raw sense]   (-> hash (subs 2) (s/split #\"/\"))\n        word                     (-> js/window (.decodeURI raw))]\n    (when (and (re-find #\"^[\u0401\u0451\u0410-\u044f]+$\" word)\n               (or (not= word @input) (not= (dec sense) @which-result?)))\n      (reset! pos ({\"n\" :noun \"v\" :verb \"a\" :adjective} target-pos))\n      (go-to-word word :push-state? push-state?)\n      (reset! which-result? (or (some-> sense dec) 0)))))\n\n(defn load-mask []\n  (when (< @batches-loaded (apply + (vals num-batches)))\n    [:div#mask\n     [:div\n      [:p.italic.sans \"Your comrade-in-words as a learner of the Russian language\"]\n      [:h1 \"slovarish / \u0441\u043b\u043e\u0432\u0430\u0440\u0438\u0449\"]\n      [:p.italic.sans \"\u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0448\u0438\u043c \u0442\u043e\u0432\u0430\u0440\u0438\u0449\u0435\u043c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430\"]]\n     [:div\n      [:p.italic \"Loading...\"]\n      (when-not (re-find #\"Chrome|OPR|Yandex\" (.-userAgent js/navigator))\n       [:p.italic \"For faster loading, please use Chrome, Opera, or Yandex Browser.\"])\n      [:progress {:max   (apply + (vals num-batches))\n                  :value @batches-loaded}]]]))\n\n(defn load-edn\n  [pos batch]\n  (if (> batch (num-batches (keyword pos)))\n    ;; Done loading\n    (case pos\n      \"nouns\" (do\n                (reset! top-2k-words (filter (fn [[_ entries]]\n                                               (some #(<= (:rank %) 2000) entries))\n                                             @all-nouns))\n                (route))\n      nil)\n    ;; Keep loading until complete\n    (let [batch-no (if (< batch 10) (str \"0\" batch)\n                     (str batch))]\n      (-> (js/fetch (str \"edn/\" pos batch-no \".edn\"))\n          (.then #(.text %))\n          (.then #(do\n                    (swap! (case pos\n                             \"nouns\" all-nouns\n                             \"verbs\" all-verbs\n                             \"adjectives\" all-adjectives\n                             nil)\n                           merge (reader/read-string %))\n                    (swap! batches-loaded inc)\n                    (load-edn pos (inc batch))))))))\n\n(def russian-poses {:noun \"\u0441\u0443\u0449.\" :verb \"\u0433\u043b\u0430\u0433\u043e\u043b\" :adjective \"\u043f\u0440\u0438\u043b.\"})\n\n(defn change-pos [which-pos]\n  (let [word-input (.getElementById js/document \"word-input\")]\n    (go-to-word @input :target-pos which-pos)\n    (if (or (:verified? result)\n            (and (result) (#{:verb :adjective} @pos)))\n      (.blur word-input)\n      (.focus word-input))))\n\n(comment\n \"Keyboard nav\")\n\n(defn pos-button [which-pos]\n  [:a.word-button {:class    (when (= @pos which-pos) \"current\")\n                   :on-click #(change-pos which-pos)}\n\n   (case @display-language\n     :english (name which-pos)\n     :russian (russian-poses which-pos))])\n\n(defn change-sense [target]\n  (when (and (not= @which-result? (dec target))\n             (<= target (count @results)))\n    (reset! which-result? (dec target))\n    (push-state)))\n\n(defn go-to-suggestion\n  [num]\n  (some-> (.querySelector js/document (str \"#suggestions .word-list .word-button:nth-child(\" num) \")\")\n          .-innerHTML\n          (go-to-word)))\n\n(comment\n \"Main components\")\n\n(defn paypal-donate-button []\n  [:div#donate-button\n   [:form {:action \"https://www.paypal.com/donate\" :method \"post\" :target \"_top\"}\n    [:input {:type \"hidden\" :name \"business\" :value \"633R23JJCLDF2\"}]\n    [:input {:type \"hidden\" :name \"no_recurring\" :value \"1\"}]\n    [:input {:type \"hidden\" :name \"item_name\" :value \"If you find this app useful, consider contributing to my coffee fund %3A%29\"}]\n    [:input {:type \"hidden\" :name \"currency_code\" :value \"USD\"}]\n    [:input {:type \"image\" :src \"https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif\" :border \"0\" :name \"submit\" :title \"PayPal - The safer, easier way to pay online!\" :alt \"Donate with PayPal button\"}]\n    [:img {:alt \"\" :border \"0\" :src \"https://www.paypal.com/en_US/i/scr/pixel.gif\" :width \"1\" :height \"1\"}]]])\n\n(defn header []\n  [:div#header.flex\n   [:div.toggle-container.flex.row\n    [:span.option \"\u0440\u0443\"]\n    [:label.toggle {:for \"language\"}\n     [:input {:type      \"checkbox\"\n              :read-only true\n              :checked   (= @display-language :english)\n              :name      \"language\"}]\n     [:span.slider {:title \"Change language \u2022 \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044f\u0437\u044b\u043a \u0441\u0430\u0439\u0442\u0430\"\n                    :on-click (fn []\n                                (reset! display-language\n                                        (if (= @display-language :english)\n                                          :russian :english)))}]]\n    [:span.option \"en\"]]\n\n   [:div#pos-buttons\n    [pos-button :noun]\n    [pos-button :verb]\n    [pos-button :adjective]\n    [:a.word-button.credits\n     {:on-click (fn [e]\n                  (cl/toggle (.getElementById js/document \"credits\") \"visible\")\n                  (cl/toggle (-> e .-target) \"current\"))};; keeps the button from being \"sticky\" on mobile\n     \"\u00a9\"]]\n\n   [:div.toggle-container.flex.row\n    ;; Strangely, Chrome/Opera/Firefox cannot render Cyrillic sans-serif\n    ;; fonts with the combining diacritics in the right place, so Latin \"a\" is used here\n    [:span.option \"a\"]\n    [:label.toggle {:for \"stress-marks\"}\n     [:input {:type      \"checkbox\"\n              :read-only true\n              :checked   @show-stress?\n              :name      \"stress-marks\"}]\n     [:span.slider {:title \"Show/hide stress marks \u2022 \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c/\u0441\u0440\u043a\u044b\u0442\u044c \u0437\u043d\u0430\u043a\u0438 \u0443\u0434\u0430\u0440\u0435\u043d\u0438\u044f\"\n                    :on-click #(reset! show-stress?\n                                       (if @show-stress? false true))}]]\n    [:span.option \"\u00e1\"]]])\n\n(defn word-input []\n  [:div#word-input-wrapper\n   [:form {:on-submit (fn [e] (.preventDefault e)) ; https://stackoverflow.com/q/59548327\n           ;; https://stackoverflow.com/questions/254712/disable-spell-checking-on-html-textfields\n           :spell-check \"off\" :auto-capitalize \"off\" :auto-correct \"off\" :auto-complete \"off\"}\n    [:input#word-input\n     {:type \"text\"\n      :placeholder (case @display-language\n                     :english \"enter a word\"\n                     :russian \"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e\")\n      :class (case @pos\n               :noun [(when-not (:verified? (result)) \"light\")\n                      (or (some-> (result) :gender name)\n                          \"default\")]\n               :verb (if (seq? @results)\n                       ({:definite \"imperfective\" :indefinite \"indefinite\"\n                         :pf \"perfective\" :impf \"imperfective\" :bias \"biaspectual\"}\n                        (or (:definiteness (result))\n                            (:aspect (result))))\n                       \"default\")\n               \"default\")\n      ;; Convert noun input to proper case if it's different\n      :value (if (and (= @pos :noun)\n                      (some-> (result) :verified?))\n               (or (get-in (result) [:table :nominative :singular :text])\n                   (get-in (result) [:table :nominative :plural :text]))\n               (s/lower-case @input))\n      :on-keyDown (fn [e]\n                    (let [code (-> e .-code)]\n                      (when (or (= \"Space\" code) (s/includes? code \"Digit\"))\n                        (.preventDefault e))))\n      :on-change\n      (fn [e]\n        (let [word (-> e .-target .-value s/trim)]\n          (if (re-find #\"^[\u0401\u0451\u0410-\u044f]*$\" word)\n            (go-to-word word)\n            (js/alert (case @display-language\n                        :english \"This app only accepts Russian words as input. Please switch your keyboard to Russian and try again.\"\n                        :russian \"\u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u0441\u043b\u043e\u0432\u0430 \u043a\u0430\u043a \u0432\u0445\u043e\u0434. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u044f\u0437\u044b\u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\")))))}]]\n\n   (when (>= (count @results) 2)\n    [:div#senses\n     (doall\n       (for [raw-index (range (count @results))\n             :let [i (inc raw-index)]]\n         (if (= @which-result? raw-index)\n           ^{:key (str \"sense-\" i)} [:div.sense.current i]\n           ^{:key (str \"sense-\" i)}\n           [:a.sense {:href \"#\"\n                      :on-click (fn [e]\n                                  (.preventDefault e)\n                                  (let [target (-> e .-target .-innerHTML)]\n                                    (reset! which-result? (dec target))\n                                    (push-state)))}\n\n                     i])))])\n\n   (when (result)\n     (case @pos\n       :verb\n       [:div.verb-view-toggle-menu\n        [:select {:name \"verb-view-toggle\"\n                  :value @which-verb-forms?\n                  :onChange (fn [e]\n                              (reset! which-verb-forms? (-> e .-target .-value (keyword))))}\n         [:option {:value :main :defaultValue true}\n          (case @display-language\n            :english \"main forms\"\n            :russian \"\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b\")]\n         [:option {:value :participles}\n          (case @display-language\n            :english \"participles\"\n            :russian \"\u043f\u0440\u0438\u0447\u0430\u0441\u0442\u0438\u044f\")]]]\n\n       :noun\n       (let [gender (:gender (result))\n             gender-name (if (= gender :common) \"common-gender\" (name gender))]\n         [:div.icons.flex.column\n          [:div.icon.gender {:title (if (:verified? (result))\n                                      (str \"This is a \" gender-name \" noun.\")\n                                      (str \"Based on the ending, this noun is highly likely to be a \" gender-name \" noun.\"))\n                             :class gender}\n           (case gender\n             :masculine \"\\u2640\"\n             :feminine \"\\u2642\"\n             :neuter \"\\u26B2\"\n             :common \"\\u26A5\")]\n          (if (:animate (result))\n            [:div.icon.animacy {:title (str \"This is an animate \" (name gender) \" noun.\")\n                                :class gender}\n             (case gender\n               :masculine \"\ud83d\udc68\"\n               :feminine \"\ud83d\udc69\"\n               :neuter \"\ud83d\udc7d\"\n               :common \"\ud83d\udc6b\")]\n            [:div.icon.animacy {:title (if (:verified? (result))\n                                         (str \"This is an inanimate noun.\")\n                                         \"Nouns not found in the Slovarish dictionary are assumed to be inanimate.\")\n                                :class gender} \"\ud83e\udd16\"])\n          (if (:verified? (result))\n            [:div.icon {:class gender\n                        :title \"This noun was found in the Slovarish dictionary.\"} \"\u2714\ufe0f\"]\n            [:div.icon {:class gender\n                        :title (str \"This noun was not found in the Slovarish dictionary. \"\n                                    \"Results may contain inaccuracies.\")} \"\u2753\"])])\n\n       nil))\n\n   [render-glosses (result)\n    (case @pos\n      :noun (:gender (result))\n      :verb ({:indefinite \"indefinite\" :definite \"imperfective\"\n              :pf \"perfective\" :impf \"imperfective\" :bias \"biaspectual\"}\n             (or (:definiteness (result))\n                 (:aspect (result))))\n      \"default\")]])\n\n(defn suggestions []\n  (cond\n    ;; This blank div is necessary b/c we allow results to be displayed for 2-letter nouns\n    (and (= @pos :noun) (= (count @input) 2)) [:div#suggestions]\n\n    (< (count @input) 3) ;; Insufficient input -> Prompt to enter text\n    [:p#get-started\n     (case @display-language\n       :english \"Simply choose a part of speech and type a word in the field above to get started, or \"\n       :russian \"\u041f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0447\u0438 \u0438 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u043f\u043e\u043b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445\u0443, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c, \u0438\u043b\u0438 \")\n     [:span.press-enter-instruction\n      (case @display-language\n        :english \"press Enter \"\n        :russian \"\u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0412\u0432\u043e\u0434, \")]\n     [:span.random-word-button-instruction\n      (case @display-language\n        :english \"tap the \ud83c\udfb2 icon \"\n        :russian \"\u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0438\u043a\u043e\u043d\u0443 \ud83c\udfb2, \")]\n     (case @display-language\n       :english \"to look up a random word.\"\n       :russian \"\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e.\")]\n    ;; Sufficient input -> Display suggestions (there might be zero)\n    :else\n    (let [source (case @pos\n                   :noun @all-nouns :verb @all-verbs :adjective @all-adjectives)]\n      [:div#suggestions\n       (when-some [predictions (->> (keys source)\n                                    (filter #(s/starts-with? % (s/lower-case @input)))\n                                    (remove #{@input (str @input \"\u0441\u044f\") (str @input \"\u0441\u044c\")})\n                                    (sort-by count <)\n                                    not-empty)]\n         [:<>\n          [:span.italic.serif\n           (case @display-language\n             :english \"You might be looking for:\\u00A0\"\n             :russian \"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0438\u0449\u0435\u0442\u0435:\\u00A0\")]\n          [:span.word-list\n           (doall\n            (for [word (take 5 predictions)]\n               ^{:key (str \"autosuggest-\" word)}\n              [:a.word-button\n               {:href \"#\"\n                :on-click (fn [e]\n                            (.preventDefault e)\n                            (let [word (-> e .-target .-innerHTML)]\n                              (go-to-word word)))}\n               word]))]\n          (when (> (count predictions) 5)\n            [:span \"...\"])])])))\n\n(defn legend []\n  [:div#legend\n\n   [:h1 (case @display-language\n          :english (str \"key to symbols (for \" (name @pos) \"s)\")\n          :russian (str \"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u043a\u043e\u0432 (\u0434\u043b\u044f \"\n                        ({:noun \"\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445\"\n                          :verb \"\u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432\"\n                          :adjective \"\u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445\"} @pos)\n                        \")\"))]\n   (case @pos\n     :noun\n     [:<>\n      [:div\n       [:div.word-form.masculine \"\ud83d\udc68\"]\n       [:div.word-form.masculine \"\u2640\ud83e\udd16\"]\n       [:div.word-form.feminine \"\ud83d\udc69\"]\n       [:div.word-form.feminine \"\u2642\ud83e\udd16\"]\n       [:div.word-form.neuter \"\ud83d\udc7d\"]\n       [:div.word-form.neuter \"\u26b2\ud83e\udd16\"]]\n      [:div (case @display-language\n              :english \"Animate and inanimate nouns by gender\"\n              :russian \"\u041e\u0434\u0443\u0448\u0435\u0432\u043b\u0451\u043d\u043d\u044b\u0435 \u0438 \u043d\u0435\u043e\u0434\u0443\u0448\u0435\u0432\u043b\u0451\u043d\u043d\u044b\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e \u0440\u043e\u0434\u0443\")]\n      [:div\n       [:div.word-form.common \"\ud83d\udc6b\"]\n       [:div.word-form.common \"\u26a5 \ud83e\udd16\"]]\n      [:div (case @display-language\n              :english \"Common gender (same form can be either m or f)\"\n              :russian \"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0440\u043e\u0434\u0430\")]\n      [:div\n       [:div.word-form.noun.masculine.unpredictable-stress \"\u0432\u043e\u0301\u043b\u043e\u0441\u044b\\u00A0\\u00A0\"]\n       [:div.word-form.noun.feminine.unpredictable-stress \"\u0433\u043e\u0301\u043b\u043e\u0432\u0443\\u00A0\\u00A0\"]\n       [:div.word-form.noun.neuter.unpredictable-stress \"\u0443\u0442\u0440\u0430\u0301\\u00A0\\u00A0\"]]\n      [:div (case @display-language\n              :english \"Location of stress is different from other singular or plural forms.\"\n              :russian \"\u0423\u0434\u0430\u0440\u0435\u043d\u0438\u0435 \u043f\u0430\u0434\u0430\u0435\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u043b\u043e\u0433, \u0447\u0435\u043c \u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u043e\u0440\u043c\u044b \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\")]\n\n      [:div\n       [:div.word-form.noun.irregular-form \"\u0434\u043e\u043c\u0430\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.noun.irregular-form \"\u0441\u043b\u0451\u0437\u044b\\u00A0\\u00A0\"]\n       [:div.word-form.noun.irregular-form \"\u043a\u043e\u043b\u0435\u0301\u043d\u0435\u0439\\u00A0\\u00A0\"]]\n      [:div (case @display-language\n              :english \"Form is irregular or different than expected, given the base form and gender of the noun.\"\n              :russian \"\u0414\u0430\u043d\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u2014 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0430\u044f, \u0447\u0435\u043c \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0430\u044f \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435 \u0438 \u0440\u043e\u0434\u0443 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435.\")]\n      [:div\n       [:div.word-form.noun.masculine \"\u0440\u044b\u0301\u043d\" [:span.fleeting-vowel \"\u043e\"] \"\u043a\"]\n       [:div.word-form.noun.feminine \"\u0434\u0435\u0301\u0432\u0443\u0448\" [:span.fleeting-vowel \"\u0435\"] \"\u043a\"]\n       [:div.word-form.noun.neuter \"\u044f\" [:span.fleeting-vowel \"\u0438\u0301\"] \"\u0446\"]]\n      [:div (case @display-language\n              :english \"Fleeting vowels that appear only in certain forms of the noun.\"\n              :russian \"\u0431\u0435\u0433\u043b\u044b\u0435 \u0433\u043b\u0430\u0441\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e.\")]\n      [:div (case @display-language\n              :english (str \"\u2714\ufe0f Results are verified. \"\n                            \"Gradations of color denote the frequency of each form of the noun (in OpenCorpora data) relative to its other forms.\")\n              :russian (str \"\u2714\ufe0f \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d. \"\n                            \"\u0413\u0440\u0430\u0434\u0430\u0446\u0438\u0438 \u0446\u0432\u0435\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e (\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 OpenCorpora), \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u043e\u0440\u043c\u044b.\"))]\n      [:div (case @display-language\n              :english (str \"\u2753 Word not found in OpenCorpora or Wiktionary data. \"\n                            \"Results are generated automatically and may contain inaccuracies.\")\n              :russian (str \"\u2753 \u0421\u043b\u043e\u0432\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 OpenCorpora \u0438\u043b\u0438 Wikitionary. \"\n                            \"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0438 \u0432 \u043d\u0451\u043c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438.\"))]]\n\n     :verb\n     [:<>\n      [:div\n       [:div.word-form.infinitive.imperfective \"\u23f3\"]\n       [:div.word-form.infinitive.perfective \"\ud83d\udccc\"]\n       [:div.word-form.infinitive.biaspectual \"\u23f3\ud83d\udccc\"]]\n      [:div (case @display-language\n              :english \"Imperfective/perfective/biaspectual verb\"\n              :russian \"\u0413\u043b\u0430\u0433\u043e\u043b \u041d\u0421\u0412 / \u0433\u043b\u0430\u0433\u043e\u043b \u0421\u0412 / \u0434\u0432\u0443\u0432\u0438\u0434\u043e\u0432\u043e\u0439 \u0433\u043b\u0430\u0433\u043e\u043b\")]\n      [:div\n       [:div.word-form.infinitive.indefinite \"\ud83d\udd04\"]\n       [:div.word-form.infinitive.definite \"\u27a1\ufe0f\"]]\n      [:div (case @display-language\n              :english \"Multidirectional/unidirectional verb of motion\"\n              :russian \"\u043c\u043d\u043e\u0433\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439/\u043e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043b\u0430\u0433\u043e\u043b \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\")]\n      [:div\n       [:span.word-form.present.imperfective.unpredictable-stress \"\u0441\u043c\u043e\u0301\u0442\u0440\u0438\u0442\\u00A0\\u00A0\"]\n       [:span.word-form.past.feminine.unpredictable-stress \"\u0434\u0430\u043b\u0430\u0301\\u00A0\\u00A0\"]]\n      [:div (case @display-language\n              :english \"Location of stress is different from other verb forms of the same tense.\"\n              :russian \"\u0423\u0434\u0430\u0440\u0435\u043d\u0438\u0435 \u043f\u0430\u0434\u0430\u0435\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u043b\u043e\u0433, \u0447\u0435\u043c \u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u043e\u0440\u043c\u044b \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\")]\n      [:div\n       [:span.word-form.past.masculine.irregular-form \"\u043f\u043e\u0448\u0451\u043b\\u00A0\\u00A0\"]\n       [:span.word-form.past.masculine.irregular-form \"\u043c\u043e\u0301\u0433\\u00A0\\u00A0\"]]\n      [:div (case @display-language\n              :english \"Past tense has an irregular form (only the masculine form is marked).\"\n              :russian \"\u0424\u043e\u0440\u043c\u044b \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043b\u0430\u0433\u043e\u043b\u0430 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 (\u043f\u043e\u043c\u0435\u0447\u0435\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u043e\u0440\u043c\u0430 \u043c\u0443\u0436\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430.)\")]\n      [:div\n       [:div.word-form.infinitive.imperfective \"\u0431\" [:span.fleeting-vowel \"\u0435\"] \"\u0440\u0443\u0301\"]\n       [:div.word-form.infinitive.perfective \"\u0432\" [:span.fleeting-vowel \"\u043e\"] \"\u0437\u044c\u043c\u0443\u0301\"]]\n      [:div (case @display-language\n              :english \"Fleeting vowels that appear only in certain forms of the verb.\"\n              :russian \"\u0411\u0435\u0433\u043b\u044b\u0435 \u0433\u043b\u0430\u0441\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043b\u0430\u0433\u043e\u043b\u0430.\")]\n      [:div (case @display-language\n              :english \"\ud83d\udd00 Has alternate past tense forms. Mouse over to see them.\"\n              :russian \"\ud83d\udd00 \u0423 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043b\u0430\u0433\u043e\u043b\u0430 \u0435\u0441\u0442\u044c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0444\u043e\u0440\u043c \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u043a\u0443\u0440\u0441\u043e\u0440\u0430 \u043d\u0430 \u044d\u0442\u0443 \u0438\u043a\u043e\u043d\u0443.\")]\n      [:div (case @display-language\n              :english \"\ud83d\udca1 Denotes a common verb whose conjugation pattern is shared by many other verbs.\"\n              :russian \"\ud83d\udca1 \u042d\u0442\u0430 \u0438\u043a\u043e\u043d\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u0433\u043b\u0430\u0433\u043e\u043b \u043e\u0447\u0435\u043d\u044c \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u0438 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0443 \u0441\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0436\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432.\")]]\n\n     :adjective\n     [:<>\n      [:div\n       [:div.word-form.masculine.irregular-form \"\u0441\u0442\u0440\u043e\u0301\" [:span.fleeting-vowel \"\u0435\"] \"\u043d\"]\n       [:div.word-form.masculine.irregular-form \"\u043b\u0451\u0433\" [:span.fleeting-vowel \"\u043e\"] \"\u043a\"]]\n      [:div (case @display-language\n              :english \"Masculine short form has a buffer vowel.\"\n              :russian \"\u0412 \u043a\u0440\u0430\u0442\u043a\u043e\u0439 \u0444\u043e\u0440\u043c\u0435 \u043c\u0443\u0436\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u0431\u0435\u0433\u043b\u043e\u0435 \u0433\u043b\u0430\u0441\u043d\u043e\u0435.\")]\n      [:div\n       [:div.word-form.short-form.feminine.unpredictable-stress \"\u0440\u0435\u0434\u043a\u0430\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.short-form.neuter.unpredictable-stress \"\u0434\u0430\u043b\u0435\u043a\u043e\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.short-form.plural.common.unpredictable-stress \"\u0441\u0432\u0435\u0436\u0438\u0301\\u00A0\\u00A0\"]]\n      [:div (case @display-language\n              :english \"End-stressed non-masculine short form.\"\n              :russian \"\u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0436\u0435\u043d\u0441\u043a\u043e\u0433\u043e/\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u043e\u0434\u0430 \u0438\u043b\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0433\u0434\u0435 \u0443\u0434\u0430\u0440\u0435\u043d\u0438\u0435 \u043f\u0430\u0434\u0430\u0435\u0442 \u043d\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435.\")]\n      [:div\n       [:div.word-form.masculine.light \"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0439 \ud83e\udd16\"]\n       [:div.word-form.plural.common.light \"\u0431\u043e\u043b\u044c\u0448\u0438\u0301\u0435 \ud83e\udd16\"]]\n      [:div\n       [:div.word-form.masculine.light \"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0433\u043e \ud83d\udc68\"]\n       [:div.word-form.plural.common.light \"\u0431\u043e\u043b\u044c\u0448\u0438\u0301\u0445 \ud83d\udc6b\"]]\n      [:div (case @display-language\n              :english \"The accusative case of masculine and plural forms is the same as nominative when used with inanimate nouns and genitive when used with animate ones.\"\n              :russian \"\u0412\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436 \u0444\u043e\u0440\u043c \u043c\u0443\u0436\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435, \u043a\u0430\u043a \u0438 \u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436 \u043f\u0440\u0438 \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0438 \u0441 \u043d\u0435\u043e\u0434\u0443\u0448\u0435\u0432\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436 \u2014 \u0441 \u043e\u0434\u0443\u0448\u0435\u0432\u043b\u0451\u043d\u043d\u044b\u043c\u0438.\")]\n      [:div (case @display-language\n              :english \"\ud83d\udd00 Has an alternate stress pattern for the short forms. Mouse over to see them.\"\n              :russian \"\ud83d\udd00 \u0423 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u0440\u0430\u0442\u043a\u0438\u0445 \u0444\u043e\u0440\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u043a\u0443\u0440\u0441\u043e\u0440\u0430 \u043d\u0430 \u044d\u0442\u0443 \u0438\u043a\u043e\u043d\u0443.\")]]\n     nil)])\n\n(defn credits []\n  [:div#credits\n   [:h1 \"credits\"]\n   [:p (case @display-language\n         :english \"Word lists and frequency data are taken from \"\n         :russian \"\u0421\u043f\u0438\u0441\u043a\u0438 \u0441\u043b\u043e\u0432 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0441\u043b\u043e\u0432 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \")\n    [:a {:href \"//opencorpora.org\"} \"OpenCorpora\"]\n    (case @display-language\n      :english \" and \" :russian \" \u0438 \")\n    [:a {:href \"//bokrcorpora.narod.ru/frqlist/frqlist-en.html\"}\n     (case @display-language\n       :english \"this page\"\n       :russian \"\u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\")]\n    (case @display-language\n      :english \". Primary source for the inflection data is \"\n      :russian \". \u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432\u043e\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u2014 \")\n    [:a {:href \"//wiktionary.org\"}\n     (case @display-language\n       :english \"English Wiktionary\"\n       :russian \"\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f Wiktionary\")]\n    (case @display-language\n      :english \", with \"\n      :russian \". \u0413\u0434\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \")\n    [:a {:href \"//github.com/georgy7/RussianNounsJS\"} \"RussianNouns.js\"]\n    (case @display-language\n      :english \" handling algorithmic generation of noun forms where possible.\"\n      :russian \"\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0444\u043e\u0440\u043c\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445.\")]\n   [:p (case @display-language\n         :english \"Please note that some inaccuracies may still remain.\"\n         :russian \"\u0415\u0449\u0451 \u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438.\")]\n   [:p (case @display-language\n         :english \"Inspired by \"\n         :russian \"\u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u0438\u043b\u0438 \")\n    [:a {:href \"//genusly.com\"} \"Genusly\"]\n    (case @display-language\n      :english \" and \" :russian \" \u0438 \")\n    [:a {:href \"//kartaslov.ru\"} \"\u041a\u0430\u0440\u0442\u0430 \u0441\u043b\u043e\u0432\"]\n    \".\"]\n   [:p (case @display-language\n         :english \"Written with \u2764\ufe0f in Clojure and ClojureScript.\"\n         :russian \"\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0441 \u2764\ufe0f \u0432 Clojure \u0438 ClojureScript.\")]\n   [:p (case @display-language\n         :english \"Slovarish\"\n         :russian \"\u0421\u043b\u043e\u0432\u0430\u0440\u0438\u0449\")\n    \" \u00a9 2022 Justin Douglas\"]])\n\n(defn pick-random-word []\n  (let [source (case @pos\n                 :noun @top-2k-words\n                 :verb (->> @all-verbs\n                            ;; Testing alternate past sets\n                            #_(filter (fn [[lemma entries]]\n                                        (some (fn [{:keys [category conjugation]}]\n                                                (s/includes? category \",\")\n                                                #_(some seq? (vals (:past conjugation))))\n                                              entries))))\n                 :adjective (->> @all-adjectives\n                                 (filter #(some :adjective? (val %)))))]\n    (go-to-word (rand-nth (keys source)))))\n\n(defn demo-words []\n  [:div\n   (doall\n     (for [{:keys [text infinitive long-form rank]}\n           (->> ({:noun @all-nouns :verb @all-verbs :adjective @all-adjectives} @pos)\n                vals\n                (map first)\n                (filter :rank)\n                (sort-by :rank <)\n                (take 50))\n           :let [word (or text infinitive long-form)]]\n       ^{:key (str \"demo-\" word)}\n       [:a.word-button\n        {:href \"#\"\n         :on-click (fn [e]\n                     (.preventDefault e)\n                     (let [word (-> e .-target .-innerHTML)]\n                       (go-to-word word)))}\n        word]))])\n\n(defn inflector-app []\n  [:<>\n   [load-mask]\n   [credits]\n\n   [paypal-donate-button]\n\n   [:div#container\n    [:div#random-word-button\n     [:span {:on-click #(pick-random-word)} \"\\u00A0\ud83c\udfb2\\u00A0\"]]\n\n    [header]\n    [word-input]\n    [suggestions]\n\n    (if (result)\n      (case @pos\n        :noun [noun-table (result)]\n        :verb [verb-table (result)]\n        :adjective [adj-table (result)]\n        nil)\n      [demo-words] #_[legend])]])\n\n(defn ^:dev/after-load run []\n  (rdom/render [inflector-app] (js/document.getElementById \"root\"))\n  (go-to-word @input)\n  (when (= @batches-loaded (apply + (vals num-batches)))\n    (route)))\n\n(defn init []\n  (load-edn \"nouns\" 1)\n  (load-edn \"verbs\" 1)\n  (load-edn \"adjectives\" 1)\n  (run)\n  (.addEventListener js/window \"hashchange\" #(route :push-state? false)) ; back button\n  (.addEventListener js/window \"resize\" #(toggle-gloss-arrows))\n  (.addEventListener js/window \"keydown\"\n                     (fn [e]\n                       (case (. e -code)\n                         \"Digit1\"     (change-sense 1)\n                         \"Digit2\"     (change-sense 2)\n                         \"Digit3\"     (go-to-suggestion 1)\n                         \"Digit4\"     (go-to-suggestion 2)\n                         \"Digit5\"     (go-to-suggestion 3)\n                         \"Digit6\"     (go-to-suggestion 4)\n                         \"Digit7\"     (go-to-suggestion 5)\n                         \"Digit8\"     (do\n                                        (.preventDefault e)\n                                        (change-pos :noun))\n                         \"Digit9\"     (do\n                                        (.preventDefault e)\n                                        (change-pos :verb))\n                         \"Digit0\"     (do\n                                        (.preventDefault e)\n                                        (change-pos :adjective))\n                         \"Escape\"     (go-to-word \"\")\n                         \"Enter\"      (pick-random-word)\n                         \"ArrowLeft\"  (prev-sense)\n                         \"ArrowRight\" (next-sense)\n                         true))))\n\n(comment)\n"]}