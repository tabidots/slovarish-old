{"version":3,"sources":["slovarish/frontend/app.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.app","js/slovarish.frontend.app.num-batches","slovarish.frontend.app/num-batches","slovarish.frontend.app/batches-loaded","reagent.core.atom","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.app/route","p__71302","map__71303","cljs.core/--destructure-map","cljs.core.get","seq71301","self__4852__auto__","cljs.core/seq","push-state?","vec__71304","cljs.core.nth","hash","js/window","target-pos","raw","sense","cljs.core.subs","clojure.string.split","word","and__4251__auto__","cljs.core/re-find","cljs.core/deref","cljs.core.not_EQ_","slovarish.frontend.state/input","slovarish.frontend.state/which-result?","cljs.core/reset!","slovarish.frontend.state/pos","fexpr__71307","slovarish.frontend.navigation.go_to_word","or__4253__auto__","G__71308","slovarish.frontend.app/load-mask","cljs.core.apply","cljs.core/+","cljs.core/vals","js/navigator","slovarish.frontend.app/load-edn","pos","batch","G__71312","cljs.core.keyword","G__71313","slovarish.frontend.data/top-2k-words","cljs.core.filter","p__71314","vec__71315","_","entries","p1__71309#","cljs.core/some","slovarish.frontend.data/all-nouns","batch-no","js/fetch","p1__71310#","p1__71311#","cljs.core.swap_BANG_","G__71318","slovarish.frontend.data/all-verbs","slovarish.frontend.data/all-adjectives","cljs.core/merge","cljs.reader.read_string","cljs.core/inc","G__71319","G__71320","slovarish.frontend.app/russian-poses","slovarish.frontend.app/pos-button","which-pos","cljs.core._EQ_","G__71321","cljs.core/Keyword","js/Error","slovarish.frontend.state/display-language","cljs.core/name","slovarish.frontend.app/header","goog.dom.classlist/toggle","js/document","slovarish.frontend.state/show-stress?","slovarish.frontend.app/word-input","e","G__71322","G__71323","slovarish.frontend.state/result","G__71324","cljs.core/seq?","slovarish.frontend.state/results","G__71326","fexpr__71325","G__71327","cljs.core.get_in","clojure.string/lower-case","clojure.string/trim","slovarish.frontend.navigation/go-to-word","js/alert","G__71328","cljs.core/count","cljs.core.doall","iter__4652__auto__","s__71330","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__71332","cljs.core/chunk-buffer","i__71331","vec__71333","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__71329","cljs.core/chunk-rest","vec__71336","cljs.core/first","cljs.core/cons","cljs.core/rest","i","gloss","cljs.core.map_indexed","x","target","slovarish.frontend.navigation/push-state","G__71339","slovarish.frontend.state/which-verb-forms?","G__71340","G__71341","gender","gender-name","G__71342","G__71343","slovarish.frontend.gloss/render-glosses","G__71344","G__71346","fexpr__71345","slovarish.frontend.app/suggestions","G__71348","G__71349","G__71350","G__71351","source","G__71352","temp__5757__auto__","predictions","cljs.core/keys","p1__71347#","clojure.string/starts-with?","cljs.core.remove","cljs.core.sort_by","cljs.core/<","cljs.core/not-empty","G__71353","s__71355","b__71357","i__71356","iter__71354","cljs.core.take","slovarish.frontend.app/legend","G__71358","G__71362","fexpr__71361","G__71363","slovarish.frontend.app/credits","slovarish.frontend.app/pick-random-word","G__71365","p1__71364#","cljs.core/val","cljs.core/rand-nth","js/console.log","slovarish.frontend.app/inflector-app","G__71366","slovarish.frontend.nouns.noun-view/noun-table","slovarish.frontend.verbs.verb-view/verb-table","slovarish.frontend.adjectives.adjective-view/adj-table","slovarish.frontend.app/run","reagent.dom.render","js/document.getElementById","slovarish.frontend.app/init","slovarish.frontend.app.route","slovarish.frontend.navigation/toggle-gloss-arrows","G__71367","slovarish.frontend.navigation/prev-sense","slovarish.frontend.navigation/next-sense","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.app\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.dom :as gdom]\n            [goog.dom.classlist :as cl]\n            [goog.style :as style]\n            [goog.color :as gcolor]\n            [clojure.string :as s]\n            [cljs.reader :as reader]\n            [slovarish.frontend.state :refer [pos show-stress? input results which-result? result display-language which-verb-forms?]]\n            [slovarish.frontend.data :refer [all-nouns all-verbs all-adjectives top-2k-words]]\n            [slovarish.frontend.navigation :refer [go-to-word toggle-gloss-arrows prev-sense next-sense push-state]]\n            [slovarish.frontend.gloss :refer [render-glosses]]\n            [slovarish.frontend.nouns.noun-view :refer [noun-table]]\n            [slovarish.frontend.verbs.verb-view :refer [verb-table]]\n            [slovarish.frontend.adjectives.adjective-view :refer [adj-table]]))\n\n(defonce num-batches {:nouns 15 :verbs 10 :adjectives 8})\n(def batches-loaded (r/atom 0))\n\n(defn route [& {:keys [push-state?] :or {push-state? true}}]\n  \"Pull hashbang route from URL and navigate to target word.\"\n  (let [hash                     (-> js/window .-location .-hash)\n        [target-pos raw sense]   (-> hash (subs 2) (s/split #\"/\"))\n        word                     (-> js/window (.decodeURI raw))]\n    (when (and (re-find #\"^[\u0401\u0451\u0410-\u044f]+$\" word)\n               (or (not= word @input) (not= (dec sense) @which-result?)))\n      (reset! pos ({\"n\" :noun \"v\" :verb \"a\" :adjective} target-pos))\n      (go-to-word word :push-state? push-state?)\n      (reset! which-result? (or (some-> sense dec) 0)))))\n\n(defn load-mask []\n  (when (< @batches-loaded (apply + (vals num-batches)))\n    [:div#mask\n     [:div\n      [:p.italic.sans \"Your comrade-in-words as a learner of the Russian language\"]\n      [:h1 \"slovarish / \u0441\u043b\u043e\u0432\u0430\u0440\u0438\u0449\"]\n      [:p.italic.sans \"\u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0448\u0438\u043c \u0442\u043e\u0432\u0430\u0440\u0438\u0449\u0435\u043c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430\"]]\n     [:div\n      [:p.italic \"Loading...\"]\n      (when-not (re-find #\"Chrome|OPR|Yandex\" (.-userAgent js/navigator))\n       [:p.italic \"For faster loading, please use Chrome, Opera, or Yandex Browser.\"])\n      [:progress {:max   (apply + (vals num-batches))\n                  :value @batches-loaded}]]]))\n\n(defn load-edn\n  [pos batch]\n  (if (> batch (num-batches (keyword pos)))\n    ;; Done loading\n    (case pos\n      \"nouns\" (do\n                (reset! top-2k-words (filter (fn [[_ entries]]\n                                               (some #(<= (:rank %) 2000) entries))\n                                             @all-nouns))\n                (route))\n      nil)\n    ;; Keep loading until complete\n    (let [batch-no (if (< batch 10) (str \"0\" batch)\n                     (str batch))]\n      (-> (js/fetch (str \"edn/\" pos batch-no \".edn\"))\n          (.then #(.text %))\n          (.then #(do\n                    (swap! (case pos\n                             \"nouns\" all-nouns\n                             \"verbs\" all-verbs\n                             \"adjectives\" all-adjectives\n                             nil)\n                           merge (reader/read-string %))\n                    (swap! batches-loaded inc)\n                    (load-edn pos (inc batch))))))))\n\n(def russian-poses {:noun \"\u0441\u0443\u0449.\" :verb \"\u0433\u043b\u0430\u0433\u043e\u043b\" :adjective \"\u043f\u0440\u0438\u043b.\"})\n\n(defn pos-button [which-pos]\n  [:a.word-button {:class    (when (= @pos which-pos) \"current\")\n                   :on-click #(go-to-word @input :target-pos which-pos)}\n   (case @display-language\n     :english (name which-pos)\n     :russian (russian-poses which-pos))])\n\n(defn header []\n  [:div#header.flex\n   [:div.toggle-container.flex.row\n    [:span.option \"\u0440\u0443\"]\n    [:label.toggle {:for \"language\"}\n     [:input {:type      \"checkbox\"\n              :read-only true\n              :checked   (= @display-language :english)\n              :name      \"language\"}]\n     [:span.slider {:title \"Change language \u2022 \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044f\u0437\u044b\u043a \u0441\u0430\u0439\u0442\u0430\"\n                    :on-click (fn []\n                                (reset! display-language\n                                        (if (= @display-language :english)\n                                          :russian :english)))}]]\n    [:span.option \"en\"]]\n\n   [:div#pos-buttons\n    [pos-button :noun]\n    [pos-button :verb]\n    [pos-button :adjective]\n    [:a.word-button\n     {:on-click #(cl/toggle (.getElementById js/document \"credits\") \"visible\")}\n     \"\u00a9\"]]\n\n   [:div.toggle-container.flex.row\n    ;; Strangely, Chrome/Opera/Firefox cannot render Cyrillic sans-serif\n    ;; fonts with the combining diacritics in the right place, so Latin \"a\" is used here\n    [:span.option \"a\"]\n    [:label.toggle {:for \"stress-marks\"}\n     [:input {:type      \"checkbox\"\n              :read-only true\n              :checked   @show-stress?\n              :name      \"stress-marks\"}]\n     [:span.slider {:title \"Show/hide stress marks \u2022 \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c/\u0441\u0440\u043a\u044b\u0442\u044c \u0437\u043d\u0430\u043a\u0438 \u0443\u0434\u0430\u0440\u0435\u043d\u0438\u044f\"\n                    :on-click #(reset! show-stress?\n                                       (if @show-stress? false true))}]]\n    [:span.option \"\u00e1\"]]])\n\n(defn word-input []\n  [:div#word-input-wrapper\n   [:form {:on-submit (fn [e] (.preventDefault e)) ; https://stackoverflow.com/q/59548327\n           ;; https://stackoverflow.com/questions/254712/disable-spell-checking-on-html-textfields\n           :spell-check \"off\" :auto-capitalize \"off\" :auto-correct \"off\" :auto-complete \"off\"}\n    [:input#word-input\n     {:type \"text\"\n      :placeholder (case @display-language\n                     :english \"enter a word\"\n                     :russian \"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e\")\n      :class (case @pos\n               :noun [(when-not (:verified? (result)) \"light\")\n                      (or (some-> (result) :gender name)\n                          \"default\")]\n               :verb (if (seq? @results)\n                       ({:definite \"imperfective\" :indefinite \"indefinite\"\n                         :pf \"perfective\" :impf \"imperfective\" :bias \"biaspectual\"}\n                        (or (:definiteness (result))\n                            (:aspect (result))))\n                       \"default\")\n               \"default\")\n      ;; Convert noun input to proper case if it's different\n      :value (if (and (= @pos :noun)\n                      (some-> (result) :verified?))\n               (or (get-in (result) [:table :nominative :singular :text])\n                   (get-in (result) [:table :nominative :plural :text]))\n               (s/lower-case @input))\n      :on-keyDown (fn [e]\n                    (when (= (-> e .-code) \"Space\")\n                      (.preventDefault e)))\n      :on-change\n      (fn [e]\n        (let [word (-> e .-target .-value s/trim)]\n          (if (re-find #\"^[\u0401\u0451\u0410-\u044f]*$\" word)\n            (go-to-word word)\n            (js/alert (case @display-language\n                        :english \"This app only accepts Russian words as input. Please switch your keyboard to Russian and try again.\"\n                        :russian \"\u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u0441\u043b\u043e\u0432\u0430 \u043a\u0430\u043a \u0432\u0445\u043e\u0434. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u044f\u0437\u044b\u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0443.\")))))}]]\n\n   (when (>= (count @results) 2)\n    [:div#senses\n     (doall\n       (for [[i gloss] (map-indexed (fn [i x] [(inc i) (:gloss x)])\n                                    @results)]\n         (if (= @which-result? (dec i))\n           ^{:key (str \"sense-\" i)} [:div.sense.current i]\n           ^{:key (str \"sense-\" i)}\n           [:a.sense {:href \"#\"\n                      :on-click (fn [e]\n                                  (.preventDefault e)\n                                  (let [target (-> e .-target .-innerHTML)]\n                                    (reset! which-result? (dec target))\n                                    (push-state)))}\n\n                     i])))])\n\n   (when (result)\n     (case @pos\n       :verb\n       [:div.verb-view-toggle-menu\n        [:select {:name \"verb-view-toggle\"\n                  :value @which-verb-forms?\n                  :onChange (fn [e]\n                              (reset! which-verb-forms? (-> e .-target .-value (keyword))))}\n         [:option {:value :main :defaultValue true}\n          (case @display-language\n            :english \"main forms\"\n            :russian \"\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b\")]\n         [:option {:value :participles}\n          (case @display-language\n            :english \"participles\"\n            :russian \"\u043f\u0440\u0438\u0447\u0430\u0441\u0442\u0438\u044f\")]]]\n\n       :noun\n       (let [gender (:gender (result))\n             gender-name (if (= gender :common) \"common-gender\" (name gender))]\n         [:div.icons.flex.column\n          [:div.icon.gender {:title (if (:verified? (result))\n                                      (str \"This is a \" gender-name \" noun.\")\n                                      (str \"Based on the ending, this noun is highly likely to be a \" gender-name \" noun.\"))\n                             :class gender}\n           (case gender\n             :masculine \"\\u2640\"\n             :feminine \"\\u2642\"\n             :neuter \"\\u26B2\"\n             :common \"\\u26A5\")]\n          (if (:animate (result))\n            [:div.icon.animacy {:title (str \"This is an animate \" (name gender) \" noun.\")\n                                :class gender}\n             (case gender\n               :masculine \"\ud83d\udc68\"\n               :feminine \"\ud83d\udc69\"\n               :neuter \"\ud83d\udc7d\"\n               :common \"\ud83d\udc6b\")]\n            [:div.icon.animacy {:title (if (:verified? (result))\n                                         (str \"This is an inanimate noun.\")\n                                         \"Nouns not found in the Slovarish dictionary are assumed to be inanimate.\")\n                                :class gender} \"\ud83e\udd16\"])\n          (if (:verified? (result))\n            [:div.icon {:class gender\n                        :title \"This noun was found in the Slovarish dictionary.\"} \"\u2714\ufe0f\"]\n            [:div.icon {:class gender\n                        :title (str \"This noun was not found in the Slovarish dictionary. \"\n                                    \"Results may contain inaccuracies.\")} \"\u2753\"])])\n\n       nil))\n\n   [render-glosses (result)\n    (case @pos\n      :noun (:gender (result))\n      :verb ({:indefinite \"indefinite\" :definite \"imperfective\"\n              :pf \"perfective\" :impf \"imperfective\" :bias \"biaspectual\"}\n             (or (:definiteness (result))\n                 (:aspect (result))))\n      \"default\")]])\n\n(defn suggestions []\n  (cond\n    ;; This blank div is necessary b/c we allow results to be displayed for 2-letter nouns\n    (and (= @pos :noun) (= (count @input) 2)) [:div#suggestions]\n\n    (< (count @input) 3) ;; Insufficient input -> Prompt to enter text\n    [:p#get-started\n     (case @display-language\n       :english \"Simply choose a part of speech and type a word in the field above to get started, or \"\n       :russian \"\u041f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0447\u0438 \u0438 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u043f\u043e\u043b\u0435 \u043d\u0430\u0432\u0435\u0440\u0445\u0443, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c, \u0438\u043b\u0438 \")\n     [:span.press-enter-instruction\n      (case @display-language\n        :english \"press Enter \"\n        :russian \"\u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0412\u0432\u043e\u0434, \")]\n     [:span.random-word-button-instruction\n      (case @display-language\n        :english \"tap the \ud83c\udfb2 icon \"\n        :russian \"\u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u0438\u043a\u043e\u043d\u0443 \ud83c\udfb2, \")]\n     (case @display-language\n       :english \"to look up a random word.\"\n       :russian \"\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e.\")]\n    ;; Sufficient input -> Display suggestions (there might be zero)\n    :else\n    (let [source (case @pos\n                   :noun @all-nouns :verb @all-verbs :adjective @all-adjectives)]\n      [:div#suggestions.word-buttons\n       (when-some [predictions (->> (keys source)\n                                    (filter #(s/starts-with? % (s/lower-case @input)))\n                                    (remove #{@input (str @input \"\u0441\u044f\") (str @input \"\u0441\u044c\")})\n                                    (sort-by count <)\n                                    not-empty)]\n         [:<>\n          [:span.italic.serif\n           (case @display-language\n             :english \"You might be looking for:\\u00A0\"\n             :russian \"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b \u0438\u0449\u0435\u0442\u0435:\\u00A0\")]\n          (doall\n           (for [word (take 5 predictions)]\n              ^{:key (str \"autosuggest-\" word)}\n              [:span [:a.word-button\n                      {:href \"#\"\n                       :on-click (fn [e]\n                                   (.preventDefault e)\n                                   (let [word (-> e .-target .-innerHTML)]\n                                     (go-to-word word)))}\n                      word]\n               \" \"]))\n          (when (> (count predictions) 5)\n            [:span \"...\"])])])))\n\n(defn legend []\n  [:div#legend\n\n   [:h1 (case @display-language\n          :english (str \"key to symbols (for \" (name @pos) \"s)\")\n          :russian (str \"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u043a\u043e\u0432 (\u0434\u043b\u044f \"\n                        ({:noun \"\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445\"\n                          :verb \"\u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432\"\n                          :adjective \"\u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445\"} @pos)\n                        \")\"))]\n   (when (= @display-language :russian)\n     [:p.italic \"(\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442.)\"])\n   (case @pos\n     :noun\n     [:<>\n      [:div\n       [:div.word-form.masculine \"\ud83d\udc68\"]\n       [:div.word-form.masculine \"\u2640\ud83e\udd16\"]\n       [:div.word-form.feminine \"\ud83d\udc69\"]\n       [:div.word-form.feminine \"\u2642\ud83e\udd16\"]\n       [:div.word-form.neuter \"\ud83d\udc7d\"]\n       [:div.word-form.neuter \"\u26b2\ud83e\udd16\"]]\n      [:div \"Animate and inanimate nouns by gender\"]\n      [:div\n       [:div.word-form.common \"\ud83d\udc6b\"]\n       [:div.word-form.common \"\u26a5 \ud83e\udd16\"]]\n      [:div \"Common gender (same form can be either m or f)\"]\n      [:div\n       [:div.word-form.noun.masculine.unpredictable-stress \"\u0432\u043e\u0301\u043b\u043e\u0441\u044b\\u00A0\\u00A0\"]\n       [:div.word-form.noun.feminine.unpredictable-stress \"\u0433\u043e\u0301\u043b\u043e\u0432\u0443\\u00A0\\u00A0\"]\n       [:div.word-form.noun.neuter.unpredictable-stress \"\u0443\u0442\u0440\u0430\u0301\\u00A0\\u00A0\"]]\n      [:div \"Location of stress is different from other singular or plural forms.\"]\n      [:div\n       [:div.word-form.noun.irregular-form \"\u0434\u043e\u043c\u0430\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.noun.irregular-form \"\u0441\u043b\u0451\u0437\u044b\\u00A0\\u00A0\"]\n       [:div.word-form.noun.irregular-form \"\u043a\u043e\u043b\u0435\u0301\u043d\u0435\u0439\\u00A0\\u00A0\"]]\n      [:div \"Form is different than expected, given the base form and gender of the noun.\"]\n      [:div\n       [:div.word-form.noun.masculine \"\u0440\u044b\u0301\u043d\" [:span.fleeting-vowel \"\u043e\"] \"\u043a\"]\n       [:div.word-form.noun.feminine \"\u0434\u0435\u0301\u0432\u0443\u0448\" [:span.fleeting-vowel \"\u0435\"] \"\u043a\"]\n       [:div.word-form.noun.neuter \"\u044f\" [:span.fleeting-vowel \"\u0438\u0301\"] \"\u0446\"]]\n      [:div \"Fleeting vowels that appear only in certain forms of the noun.\"]\n      [:div (str \"\u2714\ufe0f Results are verified. \"\n                 \"Case forms for nouns appearing in OpenCorpora data are shaded according to their relative frequency.\")]\n      [:div (str \"\u2753 Word not found in OpenCorpora or Wiktionary data. \"\n                 \"Results are generated automatically and may contain inaccuracies.\")]]\n\n     :verb\n     [:<>\n      [:div\n       [:div.word-form.infinitive.imperfective \"\u23f3\"]\n       [:div.word-form.infinitive.perfective \"\ud83d\udccc\"]\n       [:div.word-form.infinitive.biaspectual \"\u23f3\ud83d\udccc\"]]\n      [:div \"Imperfective/perfective/biaspectual verb\"]\n      [:div\n       [:div.word-form.infinitive.indefinite \"\ud83d\udd04\"]\n       [:div.word-form.infinitive.definite \"\u27a1\ufe0f\"]]\n      [:div \"Multidirectional/unidirectional verb of motion\"]\n      [:div\n       [:span.word-form.present.imperfective.unpredictable-stress \"\u0441\u043c\u043e\u0301\u0442\u0440\u0438\u0442\\u00A0\\u00A0\"]\n       [:span.word-form.past.feminine.unpredictable-stress \"\u0434\u0430\u043b\u0430\u0301\\u00A0\\u00A0\"]]\n      [:div \"Location of stress is different from other verb forms of the same tense.\"]\n      [:div\n       [:span.word-form.past.masculine.irregular-form \"\u043f\u043e\u0448\u0451\u043b\\u00A0\\u00A0\"]\n       [:span.word-form.past.masculine.irregular-form \"\u043c\u043e\u0301\u0433\\u00A0\\u00A0\"]]\n      [:div \"Past tense has an irregular form (only the masculine form will be marked).\"]\n      [:div\n       [:div.word-form.infinitive.imperfective \"\u0431\" [:span.fleeting-vowel \"\u0435\"] \"\u0440\u0443\u0301\"]\n       [:div.word-form.infinitive.perfective \"\u0432\" [:span.fleeting-vowel \"\u043e\"] \"\u0437\u044c\u043c\u0443\u0301\"]]\n      [:div \"Fleeting vowels that appear only in certain forms of the verb.\"]\n      [:div \"\ud83d\udd00 Has alternate past tense forms. Mouse over to see them.\"]\n      [:div \"\ud83d\udca1 Denotes a common verb whose conjugation pattern is shared by many other verbs.\"]]\n\n     :adjective\n     [:<>\n      [:div\n       [:div.word-form.masculine.irregular-form \"\u0441\u0442\u0440\u043e\u0301\" [:span.fleeting-vowel \"\u0435\"] \"\u043d\"]\n       [:div.word-form.masculine.irregular-form \"\u043b\u0451\u0433\" [:span.fleeting-vowel \"\u043e\"] \"\u043a\"]]\n      [:div \"Masculine short form has a buffer vowel.\"]\n      [:div\n       [:div.word-form.short-form.feminine.unpredictable-stress \"\u0440\u0435\u0434\u043a\u0430\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.short-form.neuter.unpredictable-stress \"\u0434\u0430\u043b\u0435\u043a\u043e\u0301\\u00A0\\u00A0\"]\n       [:div.word-form.short-form.plural.common.unpredictable-stress \"\u0441\u0432\u0435\u0436\u0438\u0301\\u00A0\\u00A0\"]]\n      [:div \"End-stressed non-masculine short form.\"]\n      [:div\n       [:div.word-form.masculine.light \"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0439 \ud83e\udd16\"]\n       [:div.word-form.masculine.light \"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0433\u043e \ud83d\udc68\"]]\n      [:div \"Nom. = inan. acc.; gen. = anim. acc. for masculine forms.\"]\n      [:div\n       [:div.word-form.plural.common.light \"\u0431\u043e\u043b\u044c\u0448\u0438\u0301\u0435 \ud83e\udd16\"]\n       [:div.word-form.plural.common.light \"\u0431\u043e\u043b\u044c\u0448\u0438\u0301\u0445 \ud83d\udc6b\"]]\n      [:div \"Nom. = inan. acc.; gen. = anim. acc. for plural forms.\"]\n      [:div \"\ud83d\udd00 Has an alternate stress pattern for the short forms. Mouse over to see them.\"]]\n\n     nil)])\n\n(defn credits []\n  [:div#credits\n   [:h1 \"credits\"]\n   (when (= @display-language :russian)\n     [:p.italic \"(\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u043f\u043e\u043a\u0430 \u043d\u0435\u0442.)\"])\n   [:p \"Word lists and frequency data are taken from \"\n    [:a {:href \"//opencorpora.org\"} \"OpenCorpora\"]\n    \" and \"\n    [:a {:href \"//bokrcorpora.narod.ru/frqlist/frqlist-en.html\"} \"this page\"]\n    \". Primary source for the inflection data is \"\n    [:a {:href \"//wiktionary.org\"} \"English Wiktionary\"]\n    \", with \"\n    [:a {:href \"//github.com/georgy7/RussianNounsJS\"} \"RussianNouns.js\"]\n    \" handling algorithmic generation of noun forms where possible.\"]\n   [:p \"Please note that some inaccuracies may still remain.\"]\n   [:p \"Inspired by \"\n    [:a {:href \"//genusly.com\"} \"Genusly\"]\n    \" and \"\n    [:a {:href \"//kartaslov.ru\"} \"\u041a\u0430\u0440\u0442\u0430 \u0441\u043b\u043e\u0432\"]\n    \".\"]\n   [:p \"Written with \u2764\ufe0f in Clojure and ClojureScript.\"]\n   [:p \"Slovarish \u00a9 2022 Justin Douglas\"]])\n\n(defn pick-random-word []\n  (let [source (case @pos\n                 :noun @top-2k-words\n                 :verb (->> @all-verbs\n                            ;; Testing alternate past sets\n                            #_(filter (fn [[lemma entries]]\n                                        (some (fn [{:keys [category conjugation]}]\n                                                (s/includes? category \",\")\n                                                #_(some seq? (vals (:past conjugation))))\n                                              entries))))\n                 :adjective (->> @all-adjectives\n                                 (filter #(some :adjective? (val %)))))\n        word   (rand-nth (keys source))]\n    (js/console.log word)\n    (go-to-word word)))\n\n(defn inflector-app []\n  [:<>\n   [load-mask]\n   [credits]\n\n   [:div#container\n    [:div#random-word-button\n     [:span {:on-click #(pick-random-word)} \"\\u00A0\ud83c\udfb2\\u00A0\"]]\n\n    [header]\n    [word-input]\n    [suggestions]\n\n    (if (result)\n      (case @pos\n        :noun [noun-table (result)]\n        :verb [verb-table (result)]\n        :adjective [adj-table (result)]\n        nil)\n      [legend])]])\n\n(defn ^:dev/after-load run []\n  (rdom/render [inflector-app] (js/document.getElementById \"root\"))\n  (go-to-word @input)\n  (when (= @batches-loaded (apply + (vals num-batches)))\n    (route)))\n\n(defn init []\n  (run)\n  (load-edn \"nouns\" 1)\n  (load-edn \"verbs\" 1)\n  (load-edn \"adjectives\" 1)\n  (.addEventListener js/window \"hashchange\" #(route :push-state? false)) ; back button\n  (.addEventListener js/window \"resize\" #(toggle-gloss-arrows))\n  (.addEventListener js/window \"keydown\"\n                     (fn [e]\n                       (case (. e -code)\n                         \"Escape\"     (go-to-word \"\")\n                         \"Enter\"      (pick-random-word)\n                         \"ArrowLeft\"  (prev-sense)\n                         \"ArrowRight\" (next-sense)\n                         true))))\n"]}