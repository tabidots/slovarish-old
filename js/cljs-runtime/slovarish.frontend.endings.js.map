{"version":3,"sources":["slovarish/frontend/endings.cljs"],"mappings":"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","names":["slovarish.frontend.endings/pol-words","slovarish.frontend.endings/which-declension","word","gender","ending","cljs.core/last","cons-stem?","cljs.core/re-find","cljs.core/re-pattern","cljs.core._EQ_","fexpr__36713","fexpr__36714","G__36719","cljs.core/Keyword","js/Error","slovarish.frontend.endings/noun-ending","animate","padezh","chislo","or__4253__auto__","fexpr__36728","G__36729","G__36730","G__36731","G__36732","G__36733","G__36734","declension-group","G__36735","G__36736","G__36738","G__36739","and__4251__auto__","G__36743","G__36744","G__36748","G__36749","G__36750","G__36751","G__36752","G__36753","G__36754","G__36758","G__36762","fexpr__36764","G__36765","fexpr__36766","G__36767","G__36768","G__36769","G__36775","G__36779","G__36780","slovarish.frontend.endings/adj-ending","G__36786"],"sourcesContent":["(ns slovarish.frontend.endings\n  \"Namespace for splitting stems and endings.\")\n\n(def pol-words\n  #{\"\u043f\u043e\u043b\u0432\u0435\u043a\u0430\" \"\u043f\u043e\u043b\u0433\u043e\u0434\u0430\" \"\u043f\u043e\u043b\u0447\u0430\u0441\u0430\"})\n\n(defn which-declension\n  [word gender]\n  (let [ending     (str (last word))\n        cons-stem? (re-find (re-pattern (str \"[^\u0430\u044d\u043e\u0443\u044b\u044f\u0435\u0451\u044e\u0438\u044c]$\")) word)]\n    (cond\n      (= word \"\u043f\u0443\u0442\u044c\")                 3\n      (pol-words word)                2 ; end in -\u0430 but decline like 2nd-declension\n      (re-find #\"\u043c\u044f$\" word)           3\n      cons-stem?                      2\n      (#{\"\u0430\" \"\u044f\" \"\u0438\"} ending)         1 ; \"\u0438\" for plural-only nouns\n      (#{\"\u0439\" \"\u043e\" \"\u0435\" \"\u0451\" \"\u044b\"} ending) 2 ; \"\u044b\" for plural-only nouns\n      (= ending \"\u044c\")                  (case gender :masculine 2 :feminine 3 :neuter 3)\n      :else                           nil)))\n\n(defn noun-ending\n  [word gender animate padezh chislo]\n  (cond\n    (re-find #\"[\u0430\u044f]\u043d\u0438\u043d$\" word) #\"(?:\u0438\\u0301?\u043d.*?|\u0435|\u0430\u043c|\u0430\u043c\u0438|\u0430\u0445)$\"\n\n    (or (#{\"\u043c\u044b\u0448\u043e\u043d\u043e\u043a\" \"\u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a\" \"\u0434\u0435\u0432\u0447\u0430\u0442\u0430\" \"\u0440\u0435\u0431\u044f\u0442\u0430\"} word)\n        (re-find #\"\u0451\u043d\u043e\u043a$\" word))\n    , (re-pattern\n       (str \"(?:[\u043e\u0451]\\u0301?\u043d\u043e?\\u0301?\u043a.*?|[\u0430\u044f]\\u0301?\u0442.*?\"\n            \"|\u0438|\u0435\\u0301?\u0439|\u044f\\u0301?\u043c|\u044c\u043c\u0438\\u0301?|\u044f\\u0301?\u0445)$\"))  ; for \u0434\u0435\u0442\u0438\n\n    (re-find #\"\u043c\u044f$\" word)      #\"\u043c[\u0435\u0451\u044f].*?$\"\n    :else\n    (case [padezh chislo]\n      [:accusative    :plural]  (noun-ending word gender animate (if animate :genitive :nominative) :plural)\n      [:dative        :plural]  #\"(?:\u044c|\u0438\\u0301?)?[\u0430\u044f]\\u0301?\u043c$\"\n      [:instrumental  :plural]  #\"(?:\u044c|\u0438\\u0301?)?[\u0430\u044f\u044c]\\u0301?\u043c\u0438\\u0301?$\"\n      [:prepositional :plural]  #\"(?:\u044c|\u0438\\u0301?)?[\u0430\u044f]\\u0301?\u0445$\"\n\n      (let [declension-group (which-declension word gender)]\n        (case declension-group\n          1 (case chislo\n              :singular  (case padezh\n                           :nominative    #\"(?:\u044c|\u0438\\u0301?)?[\u0430\u044f]\\u0301?$\"\n                           :genitive      #\"(?:\u044c|\u0438\\u0301?)?[\u044b\u0438]\\u0301?$\"\n                           :accusative    #\"(?:\u044c|\u0438\\u0301?)?[\u0443\u044e]\\u0301?$\"\n                           :dative        #\"(?:\u044c|\u0438\\u0301?)?[\u0435\u0438]\\u0301?$\"\n                           :instrumental  #\"(?:\u044c|\u0438\\u0301?)?[\u043e\u0435\u0451]\\u0301?\u0439$\"\n                           :prepositional #\"(?:\u044c|\u0438\\u0301?)?[\u0435\u0438]\\u0301?$\"\n                           nil)\n              :plural   (case padezh\n                          :nominative    #\"(?:\u044c|\u0438\\u0301?)?[\u044b\u0438]\\u0301?$\"\n                          :genitive      (cond\n                                           (re-find #\"[\u044c\u0438][\u0438\u044f]$\" word)  #\"[\u0435\u0438]\\u0301?\u0439$\"\n                                           (re-find #\"\u0435\\u0301?\u044f$\" word) #\"\u0435\u0439\u0435\u0439\" ; intentionally nonexistent pattern\n                                           (re-find #\"[\u0443\u043e]\u044f$\" word)     #\"\u0439$\"\n                                           (and (= gender :masculine) ; pluralia tantums that behave like 2nd decl nouns\n                                                (re-find #\"\u0438$\" word))   #\"[\u043e\u0435\u0451]\\u0301?\u0432\"\n                                           :else #\"(?:\u0435\\u0301?\u0439|\u044c)$\")\n                          nil))\n          2 (case chislo\n              :singular (case padezh\n                          :nominative    (if (pol-words word) #\"\u0430\\u0301?$\"\n                                           (case gender\n                                             :masculine #\"(?:\u044c\u0435?|\u0438?\u0439|\u043e\\u0301?)$\"\n                                             :neuter    #\"[\u044c\u0438]?[\u043e\u0435\u0451]\\u0301?$\"\n                                             nil))\n                          :genitive      #\"[\u044c\u0438]?[\u0430\u044f]\\u0301?$\"\n                          :accusative    (noun-ending word gender animate (if animate :genitive :nominative) :singular)\n                          :dative        #\"[\u044c\u0438]?[\u0443\u044e]\\u0301?$\"\n                          :instrumental  #\"[\u044c\u0438]?[\u043e\u0435\u0451]\\u0301?\u043c$\"\n                          :prepositional #\"[\u044c\u0438]?[\u0435\u0438]\\u0301?$\"\n                          :locative      #\"[\u044c\u0438]?[\u0443\u044e]\\u0301?$\"\n                          :partitive     #\"[\u044c\u0438]?[\u0443\u044e]\\u0301?$\"\n                          nil)\n              :plural   (case padezh\n                          :nominative    (if (pol-words word) #\"\u044b\\u0301?$\"\n                                           (case gender\n                                             :masculine  #\"(?:[\u044c\u0438]?[\u044b\u0438\u0430\u044f]\\u0301?)$\"\n                                             :neuter     #\"[\u044c\u0438]?[\u0430\u044f\u0438]\\u0301?$\"\n                                             nil))\n                          :genitive      (cond\n                                           (re-find #\"\u0438\u0435$\" word) #\"\u0438\u0439$\"\n                                           (re-find #\"\u043e\u0432\u043e$\" word) #\"\u043e\u0432\u043e\u0432$\" ; intentionally nonexistent pattern\n                                           (re-find #\"\u0451$\" word) #\"(?:[\u044c\u0438][\u0435\u0451]\u0432|\u0435\\u0301?\u0439|\u0438\u0439)$\"\n                                           :else #\"(?:[\u044c\u0438]?[\u043e\u0435\u0451]\\u0301?\u0432|\u0435\\u0301?\u0439)$\")\n                          nil))\n\n          3 (case chislo\n              :singular (cond\n                          (#{:nominative :accusative}\n                            padezh)      (case gender\n                                           :feminine   #\"\u044c$\"\n                                           :masculine  #\"\u044c$\"\n                                           nil)\n                          (#{:genitive :prepositional :dative}\n                            padezh)      (case gender\n                                           :feminine   #\"\u0438\\u0301?$\"\n                                           :masculine  #\"\u0438\\u0301?$\"\n                                           nil)\n                          :else\n                          (case padezh\n                            :instrumental  (case gender\n                                            :feminine   #\"\u044c\u044e\\u0301?$\"\n                                            :masculine  #\"\u0451\u043c$\"\n                                             nil)\n                            :locative      (when (= gender :feminine)\n                                             #\"\u0438\\u0301?$\")\n                            nil))\n              :plural   (case padezh\n                          :nominative    (case gender\n                                           :feminine   #\"\u0438\\u0301?$\"\n                                           :masculine  #\"\u0438\\u0301?$\"\n                                           nil)\n                          :genitive      (case gender\n                                           :feminine   #\"\u0435\\u0301?\u0439$\"\n                                           :masculine  #\"\u0435\\u0301?\u0439$\"\n                                           nil)\n                          nil))\n          nil)))))\n\n(defn adj-ending\n  [word gender animate padezh chislo]\n  (if (= chislo :plural) #\"[\u044b\u0438]\\u0301?[\u0435\u043c\u0445]?\u0438?$\"\n    (case gender\n      :masculine #\"(?:[\u044b\u043e\u0438]\\u0301?\u0439|[\u043e\u0435]\\u0301?\u0433\u043e|[\u043e\u0435]\\u0301?\u043c\u0443|[\u044b\u0438\u043e\u0435\u0451]\\u0301?\u043c)$\"\n      :feminine  #\"(?:[\u0430\u044f]\\u0301?\u044f|[\u0443\u044e]\\u0301?\u044e|[\u043e\u0435]\\u0301?\u0439)$\"\n      :neuter    #\"(?:[\u043e\u0435]\\u0301?\u0435|[\u043e\u0435]\\u0301?\u0433\u043e|[\u043e\u0435]\\u0301?\u043c\u0443|[\u044b\u0438\u043e\u0435\u0451]\\u0301?\u043c)$\"\n      nil)))\n"]}