{"version":3,"sources":["slovarish/frontend/nouns/noun_view.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.nouns","js/slovarish.frontend.nouns.noun-view","js/slovarish.frontend.nouns.noun-view.ordering","slovarish.frontend.nouns.noun-view/ordering","reagent.core.atom","js/slovarish.frontend.nouns.noun-view.naming","slovarish.frontend.nouns.noun-view/naming","js/slovarish.frontend.nouns.noun-view.padezhi","slovarish.frontend.nouns.noun-view/padezhi","js/slovarish.frontend.nouns.noun-view.case-name-sets","slovarish.frontend.nouns.noun-view/case-name-sets","slovarish.frontend.nouns.noun-view/has-stress-exceptions?","table","chislo","cljs.core/some","p__27853","vec__27855","cljs.core.nth","_","chisla","p__27862","map__27864","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.nouns.noun-view/single-cell-table","text","stressed","cljs.core.doall","iter__4652__auto__","s__27868","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__27870","cljs.core/chunk-buffer","i__27869","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27867","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","padezh","fexpr__27873","cljs.core/deref","cljs.core.keyword","cljs.core.drop_last","cljs.core.get_in","cljs.core._EQ_","slovarish.frontend.state/show-stress?","or__4253__auto__","p__27874","map__27875","slovarish.frontend.nouns.noun-view/display-form","fleeting-vowel?","ending-patt","base","and__4251__auto__","slovarish.frontend.state/result","fv-in-ending","G__27877","fexpr__27876","slovarish.frontend.state/input","cljs.core/re-find","clojure.string/blank?","stem","clojure.string/replace-first","cljs.core/not","vec__27878","a","fv","b","temp__5755__auto__","vec__27881","slovarish.frontend.nouns.noun-view/rowspan","gender","animate","G__27884","cljs.core/Keyword","clojure.string/ends-with?","G__27885","G__27886","G__27887","p__27888","map__27889","slovarish.frontend.nouns.noun-view/add-classes","irregular-form?","unpredictable-stress?","same-as-base?","slovarish.frontend.nouns.noun-view/main-stress-location","stress-pattern","G__27890","js/Error","fexpr__27891","fexpr__27892","slovarish.frontend.nouns.noun-view/stress-heading","G__27893","slovarish.frontend.state/display-language","G__27894","fexpr__27895","G__27896","p__27897","map__27898","slovarish.frontend.nouns.noun-view/assemble-table","plural-only?","singular-only?","declines-like-adj?","adjectivals","sg-count","pl-count","s__27900","b__27902","i__27901","map__27903","iter__27899","map__27914","G__27925","fexpr__27926","singular","plural","ending","slovarish.frontend.nouns.endings/adj-ending","slovarish.frontend.nouns.endings/noun-ending","temp__5757__auto__","rs","G__27904","G__27905","G__27906","G__27907","G__27908","G__27915","G__27916","G__27917","G__27918","G__27919","G__27909","G__27910","G__27911","G__27912","G__27913","G__27920","G__27921","G__27922","G__27923","G__27924","s__27928","b__27930","i__27929","iter__27927","adj","slovarish.frontend.display-inflections/destress","G__27932","fexpr__27931","G__27934","fexpr__27933","slovarish.frontend.data/all-adjectives","cljs.core/not-empty","slovarish.frontend.navigation.go_to_word","slovarish.frontend.display_inflections.dstr","p__27935","map__27936","slovarish.frontend.nouns.noun-view/noun-table","indeclinable","verified?","result","e","cljs.core/reset!","js/setTimeout","slovarish.frontend.navigation/color-cells-by-score","G__27937","G__27938","G__27939","G__27940","G__27941","G__27942","G__27943","G__27944","G__27945","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.nouns.noun-view\n  (:require [reagent.core :as r]\n            [clojure.string :as s]\n            [slovarish.frontend.state :refer [input result display-language show-stress?]]\n            [slovarish.frontend.navigation :refer [go-to-word color-cells-by-score]]\n            [slovarish.frontend.data :refer [all-adjectives]]\n            [slovarish.frontend.display-inflections :refer [destress dstr]]\n            [slovarish.frontend.nouns.endings :refer [noun-ending adj-ending]]))\n\n(defonce ordering (r/atom :traditional))\n(defonce naming (r/atom :english))\n\n(defonce padezhi {:traditional [:nominative :genitive :dative :accusative :instrumental :prepositional :locative :vocative :partitive]\n                  :learners    [:nominative :accusative :genitive :dative :instrumental :prepositional :locative :vocative :partitive]})\n\n(defonce case-name-sets\n  {:nominative    {:english \"nominative\" :russian \"\u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u0438\u043c\" :verb \"\u0435\u0441\u0442\u044c \ud83d\udc49\" :question \"\u043a\u0442\u043e? \u0447\u0442\u043e?\"}\n   :genitive      {:english \"genitive\" :russian \"\u0440\u043e\u0434\u0438\u0442\u0435\u043d\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u0440\u0434\" :verb \"\u043d\u0435\u0442 \ud83d\udeab\" :question \"\u043a\u043e\u0433\u043e? \u0447\u0435\u0433\u043e?\"}\n   :dative        {:english \"dative\" :russian \"\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u0434\u0442\" :verb \"\u0434\u0430\u044e \ud83c\udf81\" :question \"\u043a\u043e\u043c\u0443? \u0447\u0435\u043c\u0443?\"}\n   :accusative    {:english \"accusative\" :russian \"\u0432\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u0432\u043d\" :verb \"\u0432\u0438\u0436\u0443 \ud83d\udc40\" :question \"\u043a\u043e\u0433\u043e? \u0447\u0442\u043e?\"}\n   :instrumental  {:english \"instrumental\" :russian \"\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u0442\u0432\" :verb \"\u0433\u043e\u0440\u0436\u0443\u0441\u044c \u263a\ufe0f\" :question \"\u043a\u0435\u043c? \u0447\u0435\u043c?\"}\n   :prepositional {:english \"prepositional\" :russian \"\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u043d\u044b\u0439\" :rus-abbr \"\u043f\u0440\" :verb \"\u0434\u0443\u043c\u0430\u044e \u043e \ud83e\udd14\" :question \"\u043e \u043a\u0435\u043c? \u043e \u0447\u0451\u043c?\"}\n   :locative      {:english \"locative\" :russian \"\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" :rus-abbr \"\u043c\u0441\" :verb \"\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \ud83d\udccd\" :question \"\u0433\u0434\u0435? \u043d\u0430 \u0447\u0451\u043c?\"}\n   :vocative      {:english \"vocative\" :russian \"\u0437\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u0437\u0432\" :verb \"\ud83d\udde3\ufe0f\" :question \"\"}\n   :partitive     {:english \"partitive\" :russian \"\u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0439\" :rus-abbr \"2\u0439 \u0440\u0434\" :verb \"\u2797\" :question \"\u043c\u043d\u043e\u0433\u043e \u0447\u0435\u0433\u043e?\"}\n   :adjectival    {:english \"relational\" :russian \"\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :rus-abbr \"\u043e\u0442\" :verb \"\" :question \"\u043a\u0430\u043a\u043e\u0439?\"}})\n\n(defn- has-stress-exceptions?\n  \"Returns true if the given number (singular or plural) of the noun has a different\n  stress position in at least one grammatical case.\"\n  [table chislo]\n  (some (fn [[_ chisla]] (-> chisla chislo :unpredictable-stress?)) table))\n\n(defn single-cell-table\n  [{:keys [text stressed]}]\n  [:tbody\n   (doall\n     (for [padezh (->> ((keyword @ordering) padezhi)\n                       (drop-last 3))]\n       ^{:key padezh}\n       [:tr\n        [:th.row-header.sans.italic (get-in case-name-sets [padezh (keyword @naming)])]\n        (when (= padezh :nominative)\n          [:td.word-form {:colSpan 2 :rowSpan 6 :data-score 1 :style {:text-align \"center\"}}\n           (if @show-stress? (or stressed \"\")\n             (or text \"\"))])]))])\n\n(defn- display-form\n  \"Displays a single entry in the declension table. If there is a fleeting vowel,\n  this splits the word up and highlights the fleeting vowel.\"\n  [{:keys [text stressed fleeting-vowel?]} ending-patt]\n  (let [base         (if (and @show-stress? (:verified? (result))) stressed text)\n        ;; \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a/\u043c\u044b\u0448\u043e\u043d\u043e\u043a are special; other -\u043e\u043d\u043e\u043a nouns are not\n        fv-in-ending (and (or (#{\"\u043c\u044b\u0448\u043e\u043d\u043e\u043a\" \"\u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a\"} @input)\n                              (re-find #\"\u0451\u043d\u043e\u043a$\" @input))\n                          (re-find #\"([\u043e\u0451]\\u0301?\u043d)(\u043e)(\u043a)$\" base))]\n    (if (s/blank? base)\n      base ; isolated cases like \u043f\u043e\u043b\u043f\u0443\u0442\u0438/\u043f\u043e\u043b\u0434\u043e\u0440\u043e\u0433\u0438\n      (let [stem (if ending-patt (s/replace-first base ending-patt \"\")\n                    base)]\n        [:span\n         (if (and fleeting-vowel? (not fv-in-ending))\n           (let [[_ a fv b] (re-find #\"(.+)([\u0435\u0451\u043e\u0438]\\u0301?)([^\u0430\u0435\u0451\u0438\u043e\u0443\u044f\u044e\u044b\u044d]\u044c?\u044e?)$\" stem)]\n             [:span.stem a [:span.fleeting-vowel fv] b])\n           [:span.stem stem])\n         (when ending-patt\n           (if-some [[_ a fv b] fv-in-ending]\n             [:span.ending a [:span.fleeting-vowel fv] b]\n             [:span.ending (re-find ending-patt base)]))]))))\n\n(defn- rowspan\n  \"Generates the rowspan for certain table cells so that they can be merged when\n  appropriate (prep/loc plur in both orderings, nom/acc/gen in learners' ordering).\"\n  [padezh gender animate chislo]\n  (if (= (keyword @ordering) :traditional) 1\n    (cond\n      (= chislo :plural)        (case padezh\n                                  :nominative  (if animate 1   2)\n                                  :accusative  (if animate 2   nil)\n                                  :genitive    (if animate nil 1)\n                                  :locative    nil\n                                  :partitive   nil\n                                  :vocative    nil\n                                  1)\n      (or (s/ends-with? @input \"\u043c\u044f\")\n          (and (s/ends-with? @input \"\u044c\")\n               (= gender :feminine))\n          (= @input \"\u043f\u0443\u0442\u044c\"))     (case padezh\n                                  :nominative 2\n                                  :accusative nil\n                                  :genitive 2\n                                  :dative nil\n                                  1)\n      (= gender :masculine)     (case padezh\n                                  :nominative  (if animate 1   2)\n                                  :accusative  (if animate 2   nil)\n                                  :genitive    (if animate nil 1)\n                                  1)\n      (= gender :neuter)        (case padezh\n                                  :nominative 2\n                                  :accusative nil\n                                  1)\n      :else                     1)))\n\n(defn- add-classes\n  [{:keys [irregular-form? unpredictable-stress? same-as-base?]}]\n  [(when irregular-form? \"irregular-form\")\n   (when unpredictable-stress? \"unpredictable-stress\")\n   (when same-as-base? \"same-as-base\")])\n\n(defn- main-stress-location\n  [stress-pattern chislo]\n  (case chislo\n    :singular (if (#{:a :c :e}  stress-pattern) \"stem\" \"ending\")\n    :plural   (if (#{:a :d :d*} stress-pattern) \"stem\" \"ending\")))\n\n(defn- stress-heading\n  [table stress-pattern chislo]\n  [:th.column-header.sans\n   [:span.italic.note (case @display-language\n                        :english \"stress on the \"\n                        :russian \"\u0443\u0434\u0430\u0440\u0435\u043d\u0438\u0435 \u043d\u0430 \")]\n   [:span {:class (when (= @display-language :english) \"small-caps\")}\n    (cond->> (main-stress-location stress-pattern chislo)\n             (= @display-language :russian) {\"stem\" \"\u043e\u0441\u043d\u043e\u0432\u0443\" \"ending\" \"\u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\"})]\n   (when (has-stress-exceptions? table chislo)\n     [:span.italic.note (case @display-language\n                          :english \" (mostly)\"\n                          :russian \" (\u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435)\")])])\n\n(defn assemble-table\n  \"This is the body of the HTML table containing the declensions.\"\n  [{:keys [table animate gender plural-only? singular-only? declines-like-adj?\n           adjectivals sg-count pl-count]}]\n  [:tbody\n   (doall\n     (for [padezh (cond->> ((keyword @ordering) padezhi)\n                    plural-only? (drop-last 3))\n           :when (padezh table)\n           :let [{:keys [singular plural]} (padezh table)\n                 ending (if declines-like-adj? adj-ending noun-ending)]]\n       ^{:key padezh}\n       [:tr\n        [:th.row-header.sans.italic (get-in case-name-sets [padezh (keyword @naming)])]\n\n        (when-not plural-only?\n          (when-some [rs (rowspan padezh gender animate :singular)]\n            [:td.word-form {:rowSpan rs :data-score (:score singular)\n                            :class (add-classes singular)}\n             [display-form singular\n                           (ending @input gender animate padezh :singular)]]))\n\n        (when (and plural (not singular-only?))\n          (when-some [rs (if (and (= padezh :prepositional) (some? (:locative table)))\n                           2\n                           (rowspan padezh gender animate :plural))]\n            [:td.word-form {:rowSpan rs :data-score (:score plural)\n                            :class (add-classes plural)}\n             [display-form plural\n                           (ending @input gender animate padezh :plural)]\n             (when (or (= padezh :nominative)\n                       (and (not animate) (= padezh :accusative)))\n               (cond\n                 sg-count [:span.count-form {:title \"Count form after numbers ending in \u0434\u0432\u0430, \u0442\u0440\u0438, \u0447\u0435\u0442\u044b\u0440\u0435\"}\n                           \"\u270c\ufe0f\ud83e\udd1f\ud83d\udd96 \" sg-count]\n                 pl-count [:span.count-form {:title \"Count form after numbers NOT ending in \u0434\u0432\u0430, \u0442\u0440\u0438, \u0447\u0435\u0442\u044b\u0440\u0435\"}\n                           \"\u270b\ud83d\ude4c \" pl-count]\n                 :else nil))]))]))\n\n   (when adjectivals\n     [:tr.adjectival\n      [:th.row-header.sans.italic (get-in case-name-sets [:adjectival (keyword @naming)])]\n      [:td.wide.light {:colSpan 2}\n       (doall\n         (for [adj adjectivals]\n           (if (-> adj destress (@all-adjectives) not-empty)\n             ^{:key adj}\n             [:a.word-button {:on-click #(go-to-word (destress adj) :target-pos :adjective)}\n              (dstr adj)]\n             ^{:key adj}\n             [:span.word-button (dstr adj)])))]])])\n\n(defn noun-table\n  \"This is the shell of the HTML table containing the declensions. It contains\n  the header rows and columns.\"\n  [{:keys [table plural-only? singular-only?\n           indeclinable verified? stress-pattern] :as result}]\n  (when table\n    [:table#noun-table\n     (if (or plural-only? singular-only?)\n       [:colgroup [:col {:width \"24%\"}] [:col {:width \"76%\"}]]\n       [:colgroup [:col {:width \"24%\"}] [:col {:width \"38%\"}] [:col {:width \"38%\"}]])\n     [:thead\n      [:tr.number\n       [:th [:select {:name \"ordering\"\n                      :value @ordering\n                      :on-change (fn [e]\n                                   (.preventDefault e)\n                                   (reset! ordering (-> e .-target .-value))\n                                   (js/setTimeout color-cells-by-score 25))}\n             [:option {:value :traditional}\n              (case @display-language :english \"trad. order\" :russian \"\u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\")]\n             [:option {:value :learners}\n              (case @display-language :english \"learners\u2019 order\" :russian \"\u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0430\u044e\u0449\u0438\u0445\")]]]\n\n       (when-not plural-only? [:th.column-header.sans (case @display-language\n                                                        :english \"singular\"\n                                                        :russian \"\u0435\u0434. \u0447.\")])\n\n       (when-not singular-only?\n         (case @display-language\n           :english (if (get-in table [:nominative :plural :irregular-stem?])\n                      [:th.column-header.sans.irregular-form \"plural \" [:span.note.italic.sans \"(irregular stem)\"]]\n                      [:th.column-header.sans \"plural\"])\n           :russian (if (get-in table [:nominative :plural :irregular-stem?])\n                      [:th.column-header.sans.irregular-form.ru \"\u043c\u043d. \u0447. \" [:span.note.italic.sans \"(\u043d\u0435\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u0430\u044f \u043e\u0441\u043d\u043e\u0432\u0430)\"]]\n                      [:th.column-header.sans.ru \"\u043c\u043d. \u0447.\"])))]\n      [:tr.stress\n       [:th [:select {:name \"naming\"\n                      :value @naming\n                      :on-change (fn [e]\n                                   (.preventDefault e)\n                                   (reset! naming (-> e .-target .-value)))}\n             [:option {:value :english}\n              (case @display-language :english \"eng\" :russian \"\u043f\u043e \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u0441\u043a\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\")]\n             [:option {:value :russian}\n              (case @display-language :english \"rus\" :russian \"\u043f\u043e \u0440\u0443\u0441\u0441\u043a\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\")]\n             [:option {:value :rus-abbr}\n              (case @display-language :english \"abbr\" :russian \"\u043f\u043e \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\")]\n             [:option {:value :verb}\n              (case @display-language :english \"verbs\" :russian \"\u043f\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c\")]\n             [:option {:value :question}\n              (case @display-language :english \"q\u2019s\" :russian \"\u043f\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\")]]]\n\n       (when-not (or plural-only? indeclinable)\n         (if verified?\n           [stress-heading table stress-pattern :singular]\n           [:th {:colSpan 2}]))\n       (when (and verified? (not singular-only?) (not indeclinable))\n         [stress-heading table stress-pattern :plural])]]\n\n     (if indeclinable\n       [single-cell-table (get-in table (if (:plural-only? result)\n                                          [:nominative :plural]\n                                          [:nominative :singular]))]\n       [assemble-table result])]))\n"]}