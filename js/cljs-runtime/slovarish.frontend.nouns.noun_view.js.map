{"version":3,"sources":["slovarish/frontend/nouns/noun_view.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.nouns","js/slovarish.frontend.nouns.noun-view","js/slovarish.frontend.nouns.noun-view.ordering","slovarish.frontend.nouns.noun-view/ordering","reagent.core.atom","js/slovarish.frontend.nouns.noun-view.naming","slovarish.frontend.nouns.noun-view/naming","js/slovarish.frontend.nouns.noun-view.padezhi","slovarish.frontend.nouns.noun-view/padezhi","js/slovarish.frontend.nouns.noun-view.case-name-sets","slovarish.frontend.nouns.noun-view/case-name-sets","slovarish.frontend.nouns.noun-view/has-stress-exceptions?","table","chislo","cljs.core/some","p__43824","vec__43825","cljs.core.nth","_","chisla","slovarish.frontend.nouns.noun-view/starts-with-vowel?","word","clojure.string/includes?","cljs.core/first","p__43828","map__43829","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.nouns.noun-view/single-cell-table","text","stressed","cljs.core.doall","iter__4652__auto__","s__43831","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__43833","cljs.core/chunk-buffer","i__43832","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43830","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","padezh","fexpr__43834","cljs.core/deref","cljs.core.keyword","cljs.core.drop_last","cljs.core.get_in","slovarish.frontend.state/display-language","cljs.core._EQ_","slovarish.frontend.state/input","slovarish.frontend.state/show-stress?","or__4253__auto__","p__43835","map__43836","slovarish.frontend.nouns.noun-view/display-form","fleeting-vowel?","ending-patt","base","and__4251__auto__","slovarish.frontend.state/result","fv-in-ending","G__43838","fexpr__43837","cljs.core/re-find","clojure.string/blank?","stem","clojure.string/replace-first","cljs.core/not","vec__43839","a","fv","b","temp__5755__auto__","vec__43842","slovarish.frontend.nouns.noun-view/rowspan","gender","animate","G__43845","cljs.core/Keyword","clojure.string/ends-with?","G__43846","G__43847","G__43848","p__43849","map__43850","slovarish.frontend.nouns.noun-view/add-classes","irregular-form?","unpredictable-stress?","same-as-base?","slovarish.frontend.nouns.noun-view/main-stress-location","stress-pattern","G__43851","js/Error","fexpr__43852","fexpr__43853","slovarish.frontend.nouns.noun-view/stress-heading","G__43854","G__43855","fexpr__43856","G__43857","p__43858","map__43859","slovarish.frontend.nouns.noun-view/assemble-table","plural-only?","singular-only?","declines-like-adj?","adjectivals","sg-count","pl-count","s__43861","b__43863","i__43862","map__43864","iter__43860","map__43875","G__43886","fexpr__43887","singular","plural","ending","slovarish.frontend.nouns.endings/adj-ending","slovarish.frontend.nouns.endings/noun-ending","temp__5757__auto__","rs","G__43865","G__43866","G__43867","G__43868","G__43869","G__43876","G__43877","G__43878","G__43879","G__43880","G__43870","G__43871","G__43872","G__43873","G__43874","G__43881","G__43882","G__43883","G__43884","G__43885","s__43889","b__43891","i__43890","iter__43888","adj","slovarish.frontend.display-inflections/destress","G__43893","fexpr__43892","G__43895","fexpr__43894","slovarish.frontend.data/all-adjectives","cljs.core/not-empty","slovarish.frontend.navigation.go_to_word","slovarish.frontend.display_inflections.dstr","p__43896","map__43897","slovarish.frontend.nouns.noun-view/noun-table","indeclinable","verified?","result","e","cljs.core/reset!","js/setTimeout","slovarish.frontend.navigation/color-cells-by-score","G__43898","G__43899","G__43900","G__43901","G__43902","G__43903","G__43904","G__43905","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.nouns.noun-view\n  (:require [reagent.core :as r]\n            [clojure.string :as s]\n            [slovarish.frontend.state :refer [input result display-language show-stress?]]\n            [slovarish.frontend.navigation :refer [go-to-word color-cells-by-score]]\n            [slovarish.frontend.data :refer [all-adjectives]]\n            [slovarish.frontend.display-inflections :refer [destress dstr]]\n            [slovarish.frontend.nouns.endings :refer [noun-ending adj-ending]]))\n\n(defonce ordering (r/atom :traditional))\n(defonce naming (r/atom :abbr))\n\n(defonce padezhi {:traditional [:nominative :genitive :dative :accusative :instrumental :prepositional :locative :vocative :partitive]\n                  :learners    [:nominative :accusative :genitive :dative :instrumental :prepositional :locative :vocative :partitive]})\n\n(defonce case-name-sets\n  {:english\n   {:nominative    {:case-name \"nominative\" :abbr \"nom\" :verb \"\u0435\u0441\u0442\u044c\" :question \"\u043a\u0442\u043e? \u0447\u0442\u043e?\"}\n    :genitive      {:case-name \"genitive\" :abbr \"gen\" :verb \"\u043d\u0435\u0442\" :question \"\u043a\u043e\u0433\u043e? \u0447\u0435\u0433\u043e?\"}\n    :dative        {:case-name \"dative\" :abbr \"dat\" :verb \"\u0434\u0430\u044e\" :question \"\u043a\u043e\u043c\u0443? \u0447\u0435\u043c\u0443?\"}\n    :accusative    {:case-name \"accusative\" :abbr \"acc\" :verb \"\u0432\u0438\u0436\u0443\" :question \"\u043a\u043e\u0433\u043e? \u0447\u0442\u043e?\"}\n    :instrumental  {:case-name \"instrumental\" :abbr \"inst\" :verb \"\u0433\u043e\u0440\u0436\u0443\u0441\u044c\" :question \"\u043a\u0435\u043c? \u0447\u0435\u043c?\"}\n    :prepositional {:case-name \"prepositional\" :abbr \"prep\" :verb \"\u0434\u0443\u043c\u0430\u044e \u043e\" :question \"\u043e \u043a\u0435\u043c? \u043e \u0447\u0451\u043c?\"}\n    :locative      {:case-name \"locative\" :abbr \"loc\" :verb \"\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432/\u043d\u0430\" :question \"\u0433\u0434\u0435? \u043d\u0430 \u0447\u0451\u043c?\"}\n    :vocative      {:case-name \"vocative\" :abbr \"voc\" :verb \"\" :question \"\"}\n    :partitive     {:case-name \"partitive\" :abbr \"part\" :verb \"\" :question \"\u043c\u043d\u043e\u0433\u043e \u0447\u0435\u0433\u043e?\"}\n    :adjectival    {:case-name \"relational\" :abbr \"rel\" :verb \"\" :question \"\u043a\u0430\u043a\u043e\u0439?\"}}\n   :russian\n   {:nominative    {:case-name \"\u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u0438\u043c\" :verb \"\u0435\u0441\u0442\u044c\" :question \"\u043a\u0442\u043e? \u0447\u0442\u043e?\"}\n    :genitive      {:case-name \"\u0440\u043e\u0434\u0438\u0442\u0435\u043d\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u0440\u0434\" :verb \"\u043d\u0435\u0442\" :question \"\u043a\u043e\u0433\u043e? \u0447\u0435\u0433\u043e?\"}\n    :dative        {:case-name \"\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u0434\u0442\" :verb \"\u0434\u0430\u044e\" :question \"\u043a\u043e\u043c\u0443? \u0447\u0435\u043c\u0443?\"}\n    :accusative    {:case-name \"\u0432\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u0432\u043d\" :verb \"\u0432\u0438\u0436\u0443\" :question \"\u043a\u043e\u0433\u043e? \u0447\u0442\u043e?\"}\n    :instrumental  {:case-name \"\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u0442\u0432\" :verb \"\u0433\u043e\u0440\u0436\u0443\u0441\u044c\" :question \"\u043a\u0435\u043c? \u0447\u0435\u043c?\"}\n    :prepositional {:case-name \"\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u043d\u044b\u0439\" :abbr \"\u043f\u0440\" :verb \"\u0434\u0443\u043c\u0430\u044e \u043e\" :question \"\u043e \u043a\u0435\u043c? \u043e \u0447\u0451\u043c?\"}\n    :locative      {:case-name \"\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" :abbr \"\u043c\u0441\" :verb \"\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432/\u043d\u0430\" :question \"\u0433\u0434\u0435? \u043d\u0430 \u0447\u0451\u043c?\"}\n    :vocative      {:case-name \"\u0437\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u0437\u0432\" :verb \"\ufe0f\" :question \"\"}\n    :partitive     {:case-name \"\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"2\u0439 \u0440\u0434\" :verb \"\" :question \"\u043c\u043d\u043e\u0433\u043e \u0447\u0435\u0433\u043e?\"}\n    :adjectival    {:case-name \"\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439\" :abbr \"\u043e\u0442\" :verb \"\" :question \"\u043a\u0430\u043a\u043e\u0439?\"}}\n   :emoji\n   {:nominative \"\ud83d\udc49\" :genitive \"\ud83d\udeab\" :dative \"\ud83c\udf81\" :accusative \"\ud83d\udc40\" :instrumental \"\u263a\ufe0f\" :prepositional \"\ud83e\udd14\"\n    :locative \"\ud83d\udccd\" :vocative \"\ud83d\udde3\" :partitive \"\u2797\" :adjectival \"\"}})\n\n(defn- has-stress-exceptions?\n  \"Returns true if the given number (singular or plural) of the noun has a different\n  stress position in at least one grammatical case.\"\n  [table chislo]\n  (some (fn [[_ chisla]] (-> chisla chislo :unpredictable-stress?)) table))\n\n(defn- starts-with-vowel?\n  [word]\n  (s/includes? \"\u0430\u044f\u0443\u044e\u0438\u0435\u044d\u043e\u0451\u044b\" (first word)))\n\n(defn single-cell-table\n  [{:keys [text stressed]}]\n  [:tbody\n   (doall\n     (for [padezh (->> ((keyword @ordering) padezhi)\n                       (drop-last 3))]\n       ^{:key padezh}\n       [:tr\n        [:th.row-header.sans.italic\n         (get-in case-name-sets [@display-language padezh (keyword @naming)])\n         (when (= @naming \"verb\")\n           [:<> (when (and (= padezh :prepositional)\n                           (starts-with-vowel? @input))\n                  \"\u0431\")\n            [:span.emoji (get-in case-name-sets [:emoji padezh])]])]\n        (when (= padezh :nominative)\n          [:td.word-form {:colSpan 2 :rowSpan 6 :data-score 1 :style {:text-align \"center\"}}\n           (if @show-stress? (or stressed \"\")\n             (or text \"\"))])]))])\n\n(defn- display-form\n  \"Displays a single entry in the declension table. If there is a fleeting vowel,\n  this splits the word up and highlights the fleeting vowel.\"\n  [{:keys [text stressed fleeting-vowel?]} ending-patt]\n  (let [base         (if (and @show-stress? (:verified? (result))) stressed text)\n        ;; \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a/\u043c\u044b\u0448\u043e\u043d\u043e\u043a are special; other -\u043e\u043d\u043e\u043a nouns are not\n        fv-in-ending (and (or (#{\"\u043c\u044b\u0448\u043e\u043d\u043e\u043a\" \"\u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043e\u043a\"} @input)\n                              (re-find #\"\u0451\u043d\u043e\u043a$\" @input))\n                          (re-find #\"([\u043e\u0451]\\u0301?\u043d)(\u043e)(\u043a)$\" base))]\n    (if (s/blank? base)\n      base ; isolated cases like \u043f\u043e\u043b\u043f\u0443\u0442\u0438/\u043f\u043e\u043b\u0434\u043e\u0440\u043e\u0433\u0438\n      (let [stem (if ending-patt (s/replace-first base ending-patt \"\")\n                    base)]\n        [:span\n         (if (and fleeting-vowel? (not fv-in-ending))\n           ;; Fleeting vowels are generally \u043e/\u0435, with notable exceptions:\n           ;; \u0438 (\u044f\u0439\u0446\u043e), \u0451 (\u043d\u0430\u0451\u043c, \u0437\u0430\u0451\u043c), \u044f (\u0437\u0430\u044f\u0446) cf. Wade 52-2-c\n           (let [[_ a fv b] (re-find #\"(.+)([\u0435\u043e\u0451\u0438\u044f]\\u0301?)([^\u0430\u0435\u0451\u0438\u043e\u0443\u044f\u044e\u044b\u044d]\u044c?\u044e?)$\" stem)]\n             [:span.stem a [:span.fleeting-vowel fv] b])\n           [:span.stem stem])\n         (when ending-patt\n           (if-some [[_ a fv b] fv-in-ending]\n             [:span.ending a [:span.fleeting-vowel fv] b]\n             [:span.ending (re-find ending-patt base)]))]))))\n\n(defn- rowspan\n  \"Generates the rowspan for certain table cells so that they can be merged when\n  appropriate (prep/loc plur in both orderings, nom/acc/gen in learners' ordering).\"\n  [padezh gender animate chislo]\n  (if (= (keyword @ordering) :traditional) 1\n    (cond\n      (= chislo :plural)        (case padezh\n                                  :nominative  (if animate 1   2)\n                                  :accusative  (if animate 2   nil)\n                                  :genitive    (if animate nil 1)\n                                  :locative    nil\n                                  :partitive   nil\n                                  :vocative    nil\n                                  1)\n      (or (s/ends-with? @input \"\u043c\u044f\")\n          (and (s/ends-with? @input \"\u044c\")\n               (= gender :feminine))\n          (= @input \"\u043f\u0443\u0442\u044c\"))     (case padezh\n                                  :nominative 2\n                                  :accusative nil\n                                  :genitive 2\n                                  :dative nil\n                                  1)\n      (= gender :masculine)     (case padezh\n                                  :nominative  (if animate 1   2)\n                                  :accusative  (if animate 2   nil)\n                                  :genitive    (if animate nil 1)\n                                  1)\n      (= gender :neuter)        (case padezh\n                                  :nominative 2\n                                  :accusative nil\n                                  1)\n      :else                     1)))\n\n(defn- add-classes\n  [{:keys [irregular-form? unpredictable-stress? same-as-base?]}]\n  [(when irregular-form? \"irregular-form\")\n   (when unpredictable-stress? \"unpredictable-stress\")\n   (when same-as-base? \"same-as-base\")])\n\n(defn- main-stress-location\n  [stress-pattern chislo]\n  (case chislo\n    :singular (if (#{:a :c :e}  stress-pattern) \"stem\" \"ending\")\n    :plural   (if (#{:a :d :d*} stress-pattern) \"stem\" \"ending\")))\n\n(defn- stress-heading\n  [table stress-pattern chislo]\n  [:th.column-header.sans\n   [:span.italic.note (case @display-language\n                        :english \"stress on the \"\n                        :russian \"\u0443\u0434\u0430\u0440\u0435\u043d\u0438\u0435 \u043d\u0430 \")]\n   [:span {:class (when (= @display-language :english) \"small-caps\")}\n    (cond->> (main-stress-location stress-pattern chislo)\n             (= @display-language :russian) {\"stem\" \"\u043e\u0441\u043d\u043e\u0432\u0443\" \"ending\" \"\u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\"})]\n   (when (has-stress-exceptions? table chislo)\n     [:span.italic.note (case @display-language\n                          :english \" (mostly)\"\n                          :russian \" (\u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435)\")])])\n\n(defn assemble-table\n  \"This is the body of the HTML table containing the declensions.\"\n  [{:keys [table animate gender plural-only? singular-only? declines-like-adj?\n           adjectivals sg-count pl-count]}]\n  [:tbody\n   (doall\n     (for [padezh (cond->> ((keyword @ordering) padezhi)\n                    plural-only? (drop-last 3))\n           :when (padezh table)\n           :let [{:keys [singular plural]} (padezh table)\n                 ending (if declines-like-adj? adj-ending noun-ending)]]\n       ^{:key padezh}\n       [:tr\n        [:th.row-header.sans.italic\n         (get-in case-name-sets [@display-language padezh (keyword @naming)])\n         (when (= @naming \"verb\")\n           [:<> (when (and (= padezh :prepositional)\n                           (starts-with-vowel? @input))\n                  \"\u0431\")\n             [:span.emoji (get-in case-name-sets [:emoji padezh])]])]\n\n        (when-not plural-only?\n          (when-some [rs (rowspan padezh gender animate :singular)]\n            [:td.word-form {:rowSpan rs :data-score (:score singular)\n                            :class (add-classes singular)}\n             [display-form singular\n                           (ending @input gender animate padezh :singular)]]))\n\n        (when (and plural (not singular-only?))\n          (when-some [rs (if (and (= padezh :prepositional) (some? (:locative table)))\n                           2\n                           (rowspan padezh gender animate :plural))]\n            [:td.word-form {:rowSpan rs :data-score (:score plural)\n                            :class (add-classes plural)}\n             [display-form plural\n                           (ending @input gender animate padezh :plural)]\n             (when (or (= padezh :nominative)\n                       (and (not animate) (= padezh :accusative)))\n               (cond\n                 sg-count [:span.count-form {:title \"Count form after numbers ending in \u0434\u0432\u0430, \u0442\u0440\u0438, \u0447\u0435\u0442\u044b\u0440\u0435\"}\n                           \"\u270c\ufe0f\ud83e\udd1f\ud83d\udd96 \" sg-count]\n                 pl-count [:span.count-form {:title \"Count form after numbers NOT ending in \u0434\u0432\u0430, \u0442\u0440\u0438, \u0447\u0435\u0442\u044b\u0440\u0435\"}\n                           \"\u270b\ud83d\ude4c \" pl-count]\n                 :else nil))]))]))\n\n   (when adjectivals\n     [:tr.adjectival\n      [:th.row-header.sans.italic\n       (get-in case-name-sets [@display-language :adjectival (keyword @naming)])]\n      [:td.wide.light {:colSpan 2}\n       (doall\n         (for [adj adjectivals]\n           (if (-> adj destress (@all-adjectives) not-empty)\n             ^{:key adj}\n             [:a.word-button {:on-click #(go-to-word (destress adj) :target-pos :adjective)}\n              (dstr adj)]\n             ^{:key adj}\n             [:span.word-button (dstr adj)])))]])])\n\n(defn noun-table\n  \"This is the shell of the HTML table containing the declensions. It contains\n  the header rows and columns.\"\n  [{:keys [table plural-only? singular-only?\n           indeclinable verified? stress-pattern] :as result}]\n  (when table\n    [:table#noun-table\n     (if (or plural-only? singular-only?)\n       [:colgroup [:col {:width \"24%\"}] [:col {:width \"76%\"}]]\n       [:colgroup [:col {:width \"24%\"}] [:col {:width \"38%\"}] [:col {:width \"38%\"}]])\n     [:thead\n      [:tr.number\n       [:th [:select {:name \"ordering\"\n                      :value @ordering\n                      :on-change (fn [e]\n                                   (.preventDefault e)\n                                   (reset! ordering (-> e .-target .-value))\n                                   (js/setTimeout color-cells-by-score 25))}\n             [:option {:value :traditional}\n              (case @display-language :english \"trad. order\" :russian \"\u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\")]\n             [:option {:value :learners}\n              (case @display-language :english \"learners\u2019 order\" :russian \"\u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0430\u044e\u0449\u0438\u0445\")]]]\n\n       (when-not plural-only? [:th.column-header.sans (case @display-language\n                                                        :english \"singular\"\n                                                        :russian \"\u0435\u0434. \u0447.\")])\n\n       (when-not singular-only?\n         (case @display-language\n           :english (if (get-in table [:nominative :plural :irregular-stem?])\n                      [:th.column-header.sans.irregular-form \"plural \" [:span.note.italic.sans \"(irregular stem)\"]]\n                      [:th.column-header.sans \"plural\"])\n           :russian (if (get-in table [:nominative :plural :irregular-stem?])\n                      [:th.column-header.sans.irregular-form.ru \"\u043c\u043d. \u0447. \" [:span.note.italic.sans \"(\u043d\u0435\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u0430\u044f \u043e\u0441\u043d\u043e\u0432\u0430)\"]]\n                      [:th.column-header.sans.ru \"\u043c\u043d. \u0447.\"])))]\n      [:tr.stress\n       [:th [:select {:name \"naming\"\n                      :value @naming\n                      :on-change (fn [e]\n                                   (.preventDefault e)\n                                   (reset! naming (-> e .-target .-value)))}\n             [:option {:value :abbr}\n              (case @display-language :english \"abbr\" :russian \"\u043f\u043e \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u043c\")]\n             [:option {:value :case-name}\n              (case @display-language :english \"eng\" :russian \"\u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\")]\n             [:option {:value :verb}\n              (case @display-language :english \"verbs\" :russian \"\u043f\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c\")]\n             [:option {:value :question}\n              (case @display-language :english \"q\u2019s\" :russian \"\u043f\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\")]]]\n\n       (when-not (or plural-only? indeclinable)\n         (if verified?\n           [stress-heading table stress-pattern :singular]\n           [:th {:colSpan 2}]))\n       (when (and verified? (not singular-only?) (not indeclinable))\n         [stress-heading table stress-pattern :plural])]]\n\n     (if indeclinable\n       [single-cell-table (get-in table (if (:plural-only? result)\n                                          [:nominative :plural]\n                                          [:nominative :singular]))]\n       [assemble-table result])]))\n"]}