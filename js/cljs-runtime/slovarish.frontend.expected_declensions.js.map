{"version":3,"sources":["slovarish/frontend/expected_declensions.cljs"],"mappings":"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","names":["slovarish.frontend.expected-declensions/which-declension","word","gender","ending","cljs.core/last","cons-stem?","cljs.core/re-find","cljs.core/re-pattern","cljs.core._EQ_","fexpr__175339","fexpr__175340","G__175341","cljs.core/Keyword","slovarish.frontend.expected-declensions/noun-ending","animate","padezh","chislo","G__175342","G__175343","G__175344","G__175345","G__175346","G__175347","declension-group","G__175348","G__175349","js/Error","G__175350","G__175351","G__175352","G__175353","G__175354","G__175355","G__175356","G__175357","G__175358","G__175359","G__175360","G__175361","G__175362","fexpr__175363","G__175364","fexpr__175365","G__175366","G__175367","G__175368","G__175369","G__175370","G__175371","slovarish.frontend.expected-declensions/adj-ending","G__175372"],"sourcesContent":["(ns slovarish.frontend.expected-declensions\n  \"Namespace for generating expected declensions for comparison.\")\n\n(defn which-declension\n  [word gender]\n  (let [ending     (str (last word))\n        cons-stem? (re-find (re-pattern (str \"[^\u0430\u044d\u043e\u0443\u044b\u044f\u0435\u0451\u044e\u0438\u044c]$\")) word)]\n    (cond\n      (= word \"\u043f\u0443\u0442\u044c\")                 3\n      (re-find #\"\u043c\u044f$\" word)           3\n      cons-stem?                      2\n      (#{\"\u0430\" \"\u044f\" \"\u0438\"} ending)         1 ; \"\u0438\" for plural-only nouns\n      (#{\"\u0439\" \"\u043e\" \"\u0435\" \"\u0451\" \"\u044b\"} ending) 2 ; \"\u044b\" for plural-only nouns\n      (= ending \"\u044c\")                  (case gender :masculine 2 :feminine 3 nil)\n      :else                           nil)))\n\n(defn noun-ending\n  [word gender animate padezh chislo]\n  (case [padezh chislo]\n    [:accusative    :plural]  (noun-ending word gender animate (if animate :genitive :nominative) :plural)\n    [:dative        :plural]  #\"(?:\u043c\u0435\u043d)?[\u0430\u044f]\\u0301?\u043c$\"\n    [:instrumental  :plural]  #\"(?:\u043c\u0435\u043d)?[\u0430\u044f\u044c]\\u0301?\u043c\u0438\\u0301?$\"\n    [:prepositional :plural]  #\"(?:\u043c\u0435\u043d)?[\u0430\u044f]\\u0301?\u0445$\"\n\n    (let [declension-group (which-declension word gender)]\n      (case declension-group\n        1 (case chislo\n            :singular  (case padezh\n                         :nominative    #\"[\u0430\u044f]\\u0301?$\"\n                         :genitive      #\"[\u044b\u0438]\\u0301?$\"\n                         :accusative    #\"[\u0443\u044e]\\u0301?$\"\n                         :dative        #\"[\u0435\u0438]\\u0301?$\"\n                         :instrumental  #\"[\u043e\u0435\u0451]\\u0301?\u0439$\"\n                         :prepositional #\"[\u0435\u0438]\\u0301?$\"\n                         nil)\n            :plural   (case padezh\n                        :nominative    #\"[\u044b\u0438]\\u0301?$\"\n                        :genitive      (if (re-find #\"\u0438\u044f$\" word) #\"\u0439$\"\n                                         #\"(?:\u0435\\u0301?)?[\u044c\u0439]$\")\n                        nil))\n        2 (case chislo\n            :singular (case padezh\n                        :nominative    (case gender\n                                         :masculine #\"[\u044c\u0439]$\"\n                                         :neuter    #\"[\u043e\u0435\u0451]\\u0301?$\"\n                                         nil)\n                        :genitive      #\"[\u0430\u044f]\\u0301?$\"\n                        :accusative    (noun-ending word gender animate (if animate :genitive :nominative) :singular)\n                        :dative        #\"[\u0443\u044e]\\u0301?$\"\n                        :instrumental  #\"[\u043e\u0435\u0451]\\u0301?\u043c$\"\n                        :prepositional #\"[\u0435\u0438]\\u0301?$\"\n                        :locative      #\"[\u0443\u044e]\\u0301?$\"\n                        :partitive     #\"[\u0443\u044e]\\u0301?$\"\n                        nil)\n            :plural   (case padezh\n                        :nominative    (case gender\n                                         :masculine  #\"[\u044b\u0438\u0430\u044f]\\u0301?$\"\n                                         :neuter     #\"[\u0430\u044f\u0438]\\u0301?$\"\n                                         nil)\n                        :genitive      (if (re-find #\"\u0438\u0435$\" word) #\"\u0439$\"\n                                         #\"(?:[\u043e\u0435\u0451]\\u0301?\u0432|\u0435\\u0301?\u0439)$\")\n                        nil))\n\n        3 (case chislo\n            :singular (cond\n                        (#{:nominative :accusative}\n                          padezh)      (case gender\n                                         :feminine   #\"\u044c$\"\n                                         :masculine  #\"\u044c$\"\n                                         :neuter     #\"\u043c\u044f$\"\n                                         nil)\n                        (#{:genitive :prepositional :dative}\n                          padezh)      (case gender\n                                         :feminine   #\"\u0438\\u0301?$\"\n                                         :masculine  #\"\u0438\\u0301?$\"\n                                         :neuter     #\"\u043c\u0435\u043d\u0438\\u0301?$\"\n                                         nil)\n                        :else\n                        (case padezh\n                          :instrumental  (case gender\n                                          :feminine   #\"\u044c\u044e\\u0301?$\"\n                                          :masculine  #\"\u0451\u043c$\"\n                                          :neuter     #\"\u043c\u0435\u043d\u0435\u043c$\"\n                                           nil)\n                          :locative      (when (= gender :feminine)\n                                           #\"\u0438\\u0301?$\")\n                          nil))\n            :plural   (case padezh\n                        :nominative    (case gender\n                                         :feminine   #\"\u0438\\u0301?$\"\n                                         :masculine  #\"\u0438\\u0301?$\"\n                                         :neuter     #\"\u043c\u0435\u043d\u0430\\u0301?$\"\n                                         nil)\n                        :genitive      (case gender\n                                         :feminine   #\"\u0435\\u0301?\u0439$\"\n                                         :masculine  #\"\u0435\\u0301?\u0439$\"\n                                         :neuter     #\"\u043c\u0451\u043d$\"\n                                         nil)\n                        nil))\n        nil))))\n\n(defn adj-ending\n  [word gender animate padezh chislo]\n  (if (= chislo :plural) #\"[\u044b\u0438]\\u0301?[\u0435\u043c\u0445]?\u0438?$\"\n    (case gender\n      :masculine #\"(?:[\u044b\u043e\u0438]\\u0301?\u0439|[\u043e\u0435]\\u0301?\u0433\u043e|[\u043e\u0435]\\u0301?\u043c\u0443|[\u044b\u0438\u043e\u0435\u0451]\\u0301?\u043c)$\"\n      :feminine  #\"(?:[\u0430\u044f]\\u0301?\u044f|[\u0443\u044e]\\u0301?\u044e|[\u043e\u0435]\\u0301?\u0439)$\"\n      :neuter    #\"(?:[\u043e\u0435]\\u0301?\u0435|[\u043e\u0435]\\u0301?\u0433\u043e|[\u043e\u0435]\\u0301?\u043c\u0443|[\u044b\u0438\u043e\u0435\u0451]\\u0301?\u043c)$\"\n      nil)))\n"]}