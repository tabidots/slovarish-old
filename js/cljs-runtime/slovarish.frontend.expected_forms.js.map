{"version":3,"sources":["slovarish/frontend/expected_forms.cljs"],"mappings":";AAMA,2CAAA,3CAAKA;AAEL,gDAAA,hDAAKC;AAEL,2CAAA,3CAAMC,8FACHC;AADH,AAEE,oBACE,AAACC,kBAAQ,AAACC,qBAAW,CAAA,6CAAA,zCAASL,yDAAcG;AAD9C;;AAAA,GAGE,qCAAA,rCAACG,gCAAaH;AAHhB;;AAAA,oBAIE,kBAAA,lBAACC,4BAAmBD;AAJtB;;AAAA,GAKE,qCAAA,rCAACG,gCAAaH;AALhB;;AAAA,GAME,qCAAA,rCAACG,gCAAaH;AANhB;;AAAA,AAAA;;;;;;;;AASF,AAAA,8CAAA,sDAAAI,pGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4EAAA,5EAAMD,uFACFN;AADJ,AAEG,yDAAA,lDAACQ,6CAAKR,SAAO,yBAAA,xBAAK,AAACS,gBAAMT;;;AAF5B,CAAA,4EAAA,5EAAMM,uFAGFI,EAAEV;AAHN,AAIG,yDAAA,lDAACQ,6CAAKR,SAAO,CAAG,AAACS,gBAAMT,QAAMU;;;AAJhC,CAAA,sEAAA,tEAAMJ;;AAAN,AAMA,gDAAA,hDAAMK;AAAN,AAAA;;AAIA,sDAAA,tDAAOC,oHACJC,MAAMC;AADT,AAEE,IAAMC,WAAU,qDAAA,mFAAA,gEAAA,6DAAA,rQAACC,+CAAOH;IAClBI,WAAU,qDAAA,mFAAA,gEAAA,yDAAA,jQAACD,+CAAOH;IAClBK,OAAU,AAACC,0EAAUF;IACrBG,SAAU,qDAAA,mFAAA,6DAAA,yDAAA,iEAAA,/TAACJ,+CAAOH;IAClBQ,YAAU,AAACtB,yCAAOgB;AAJxB,AAKE,oBAEED;AACE,GACE,yCAAA,zCAACX,gCAAac;AAAiB,IAAAK,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACU,wFAAA,hFAAK,AAACH,0EAAUD;;;KAD1B;AAEU,aAAA,LAAKA;;;;AAFf,MAAA,KAAAX,MAAA,CAAA,mEAAAe;;;;AADjC,GAIE,yCAAA,zCAACnB,gCAAac;AAAiB,4FAAA,pFAAK,0EAAA,1EAACE,8EAAYD;;AAJnD,GAKE,yCAAA,zCAACf,gCAAac;AAAiB,aAAA,LAAKC;;AALtC,AASQ,OAACC,0EAAUF;;;;;;AAZvB,oBAeE,iBAAAO,eAAA,iFAAA,sDAAA;AAAA,AAAA,QAAAA,6CAAAA,wDAAAA,bAAWH,oCAAAA;;AACT,IAAAI,WAAA,mFAAOJ,UAAUD;AAAjB,AAAA,GAAA,AAAAM,6CAAA,mFAAA,gDAAA,8DAAAD;AACsB,aAAA,LAAKP;;AAD3B,GAAA,AAAAQ,6CAAA,mFAAA,gDAAA,iEAAAD;AAEsB,aAAA,LAAKP;;AAF3B,GAAA,AAAAQ,6CAAA,mFAAA,iDAAA,8DAAAD;AAGsB,aAAA,LAAKP;;AAH3B,GAAA,AAAAQ,6CAAA,mFAAA,iDAAA,iEAAAD;AAIsB,aAAA,LAAKP;;AAJ3B,AAAA,MAAA,KAAAX,MAAA,CAAA,mEAAAkB;;;;;;;AAhBJ,GAqBE,uDAAA,vDAACC,6CAAEL;AAAqB,aAAA,LAAKH;;AArB/B,GAsBE,uDAAA,vDAACQ,6CAAEL;AAAqB,aAAA,LAAKH;;AAtB/B,GAuBE,uDAAA,vDAACQ,6CAAEL;AAAqB,aAAA,LAAKH;;AAvB/B,oBA0BE,AAACjB,kBAAQ,AAACC,qBAAW,CAAA,mDAAA,zCAAUL,yDAAckB;AAC3C,IAAAY,WAAMP;IAANO,eAAA,EAAA,CAAAA,oBAAAJ,oBAAA,AAAAI,aAAA;AAAA,AAAA,QAAAA;KAAA;AACU,wFAAA,hFAAK,AAACR,0EAAUD;;;KAD1B;AAEU,wFAAA,hFAAK,AAACC,0EAAUD;;;;AAF1B,MAAA,KAAAX,MAAA,CAAA,mEAAAoB;;;;AA3BJ,oBA8BE,iBAAAC,oBAAK,oDAAA,pDAACF,6CAAEN;AAAR,AAAA,GAAAQ;AACK,OAAC3B,kBAAQ,AAACC,qBAAW,CAAA,uEAAA,zCAAeL,yDAAckB;;AADvDa;;;AAEE,aAAA,LAAKV;;AAhCT,GAiCE,yCAAA,zCAACf,gCAAaY;AACZG;;AAlCJ,oBAmCE,AAACjB,kBAAQ,AAACC,qBAAW,CAAA,8CAAA,mDAAA,5FAAUL,8CAAYC,8DAAmBiB;AAC5D,aAAA,LAAKG;;AApCT,oBAqCE,AAACjB,kBAAQ,AAACC,qBAAW,CAAA,6CAAA,mDAAA,5FAASL,8CAAYC,8DAAmBiB;AAC3D,aAAA,LAAKG;;AAtCT,AAwCQA;;;;;;;;;;;;;AAEZ,gDAAA,hDAAMW,wGACHhB,MAAMC;AADT,AAEE,IAAMI,OAAK,AAACN,oDAAaC,MAAMC;AAA/B,AACE,IAAAgB,qBACU,AAAC7B,kBAAQ,AAACC,qBAAW,CAAA,oDAAA,iDAAA,1FAAgBL,iDAAeA,mEAC3CqB;AAFnB,AAAA,GAAA,CAAAY,sBAAA;AAYEZ;;AAZF,IAAAa,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAWE;WAAX,AAAAD,4CAAAD,WAAA,IAAA,lEAAqCG;QAArC,AAAAF,4CAAAD,WAAA,IAAA,/DAAgDI;QAAhD,AAAAH,4CAAAD,WAAA,IAAA,/DAAiEK;WAAjE,AAAAJ,4CAAAD,WAAA,IAAA,lEAAwEM;AAAxE,AAGE,IAAMC,QAAM,kBACE,iBAAAC,eAAA,iFAAA,cAAA,cAAA,cAAA,cAAA,cAAA;AAAA,AAAA,QAAAA,6CAAAA,gDAAAA,LAA4BJ,4BAAAA;MAD9B,SAAA,kOAAA,SAAA,AAAA,zNAEE,eAAA,qDAAA,iFAAA,cAAA,cAAA,jLAACK,8DAAOL,EAAEC;;AAFxB,AAIE,GACE,AAACV,6CAAES,EAAEC;AAAwBlB;;AAD/B,GAEE,AAACuB,cAAI,iBAAAC,eAAA,iFAAA,cAAA,cAAA,cAAA;AAAA,AAAA,QAAAA,6CAAAA,gDAAAA,LAAoBN,4BAAAA;;AAAIlB;;AAF/B,oBAGE,iBAAAyB,eAAA,iFAAA,cAAA;AAAA,AAAA,QAAAA,6CAAAA,gDAAAA,LAAYR,4BAAAA;;AAAiB,oDAAKD,MAAOI,kDAAMF,+CAAEC;;AAHnD,AAI+B,oDAAKH,kDAAKC,GAAEG,kDAAMF,+CAAEC","names":["slovarish.frontend.expected-forms/vowels","slovarish.frontend.expected-forms/soft-vowels","slovarish.frontend.expected-forms/ending","word","cljs.core/re-find","cljs.core/re-pattern","clojure.string/ends-with?","var_args","G__46086","slovarish.frontend.expected-forms/chop-last","js/Error","cljs.core.subs","cljs.core/count","n","slovarish.frontend.expected-forms/expected-np","slovarish.frontend.expected-forms/expected-gp*","table","irregular-stem?","nom-sing","cljs.core.get_in","nom-plur","base","slovarish.frontend.expected_forms.chop_last","stress","ns-ending","G__46087","cljs.core/Keyword","fexpr__46088","G__46089","cljs.core._EQ_","G__46090","and__4251__auto__","slovarish.frontend.expected-forms/expected-gp","temp__5755__auto__","vec__46091","cljs.core.nth","_","head","x","y","tail","vowel","fexpr__46094","cljs.core/some","cljs.core/not","fexpr__46095","fexpr__46096"],"sourcesContent":["(ns slovarish.frontend.expected-forms\n  \"Namespace for marking irregular nominative plural stems and genitive plural forms.\"\n  (:require [clojure.string :as s]))\n\n;; http://babelfish.50webs.com/languages/Russian%20Genitive%20Plural.html\n\n(def vowels \"\u0430\u0435\u0438\u043e\u0443\u044f\u0451\u044d\u044e\u044b\")\n\n(def soft-vowels \"\u044f\u0438\u0435\u0451\u044e\")\n\n(defn ending\n  [word]\n  (cond\n    (re-find (re-pattern (str \"[\" vowels \"]$\")) word)\n    ,                         :vowel\n    (s/ends-with? word \"\u044c\")   :soft\n    (re-find #\"[\u0448\u0436\u0449\u0447]$\" word) :sibilant\n    (s/ends-with? word \"\u0439\")   :j\n    (s/ends-with? word \"\u0446\")   :ts\n    :else                     :hard))\n\n(defn chop-last\n  ([word]\n   (subs word 0 (dec (count word))))\n  ([n word]\n   (subs word 0 (- (count word) n))))\n\n(defn expected-np\n  []\n  nil)\n\n(defn- expected-gp*\n  [table irregular-stem?]\n  (let [nom-sing  (get-in table [:nominative :singular :text])\n        nom-plur  (get-in table [:nominative :plural :text])\n        base      (chop-last nom-plur) ; in case of fleeting vowels\n        stress    (get-in table [:genitive :plural :stress] :stem)\n        ns-ending (ending nom-sing)]\n    (cond\n      ;; Irregular nominative plural forms\n      irregular-stem?\n      , (cond\n          (s/ends-with? nom-plur \"\u044c\u044f\")   (case stress\n                                           :ending (str (chop-last base) \"\u0435\u0439\")\n                                           :stem   (str base \"\u0435\u0432\"))\n          (s/ends-with? nom-plur \"\u043c\u0435\u043d\u0430\") (str (chop-last 2 base) \"\u0451\u043d\")\n          (s/ends-with? nom-plur \"\u0438\")    (str base \"\u0435\u0439\")\n          ;; Known cases: -\u0430\u043d\u0438\u043d/\u044f\u043d\u0438\u043d -> -\u0430\u043d, -\u043e\u043d\u043e\u043a/\u0451\u043d\u043e\u043a -> -\u0430\u0442\n          ;; TODO: All other cases will probably be feminine nouns, with \u0435/\u0451 alternation\n          ;; but check the irregular-stem fn to make sure\n          :else (chop-last nom-plur))\n\n      ;; Consonant endings\n      (#{:j :ts} ns-ending)\n      , (case [ns-ending stress]\n          [:j :stem]          (str base \"\u0435\u0432\")\n          [:j :ending]        (str base \"\u0451\u0432\")\n          [:ts :stem]         (str base \"\u0435\u0432\")\n          [:ts :ending]       (str base \"\u043e\u0432\"))\n      (= ns-ending :hard)     (str base \"\u043e\u0432\")\n      (= ns-ending :sibilant) (str base \"\u0435\u0439\")\n      (= ns-ending :soft)     (str base \"\u0435\u0439\")\n\n      ;; Null-ending cases\n      (re-find (re-pattern (str \"\u044c[\" vowels \"]$\")) nom-sing)\n      , (case stress\n          :ending (str (chop-last base) \"\u0435\u0439\")\n          :stem   (str (chop-last base) \"\u0438\u0439\"))\n      (and (= stress :ending)\n           (re-find (re-pattern (str \"[\u0448\u0436\u0449\u0447][\" vowels \"]$\")) nom-sing))\n      , (str base \"\u0435\u0439\")\n      (s/ends-with? nom-sing \"\u0446\u0435\") ; \u043e\u043a\u043e\u043d\u0446\u0435 -> \u043e\u043a\u043e\u043d\u0435\u0446 / \u043e\u043a\u043e\u043d\u0446\u0435\u0432\n      , base\n      (re-find (re-pattern (str \"[^\" vowels \"][\" soft-vowels \"]$\")) nom-sing)\n      , (str base \"\u044c\")\n      (re-find (re-pattern (str \"[\" vowels \"][\" soft-vowels \"]$\")) nom-sing)\n      , (str base \"\u0439\")\n\n      :else base)))\n\n(defn expected-gp\n  [table irregular-stem?]\n  (let [base (expected-gp* table irregular-stem?)]\n    (if-some [[_                         head       x                y      tail]\n              (re-find (re-pattern (str \"(.*?)([^\" vowels \"])([^\" vowels \"])(\u044c)?$\"))\n                       base)]\n      (let [vowel (cond\n                    (#{\"\u0448\" \"\u0436\" \"\u0449\" \"\u0447\" \"\u044c\" \"\u0439\"} x) \"\u0435\"\n                    (some #{x y} #{\"\u043a\" \"\u0433\" \"\u0445\"})   \"\u043e\"\n                    :else                          \"\u0435\")]\n        (cond\n          (= x y)                      base\n          (not (#{\"\u043a\" \"\u043b\" \"\u043d\" \"\u0446\"} y)) base\n          (#{\"\u044c\" \"\u0439\"} x)               (str head   vowel y tail)  ; \u0447\u0430\u0439\u043a\u0430, \u043a\u043e\u043b\u044c\u0446\u043e\n          :else                        (str head x vowel y tail)))\n      base)))\n"]}