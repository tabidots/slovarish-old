{"version":3,"sources":["slovarish/frontend/verb_view.cljs"],"mappings":"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","names":["js/slovarish","js/slovarish.frontend","js/slovarish.frontend.verb-view","js/slovarish.frontend.verb-view.which-forms?","slovarish.frontend.verb-view/which-forms?","reagent.core.atom","js/slovarish.frontend.verb-view.which-past-set?","slovarish.frontend.verb-view/which-past-set?","slovarish.frontend.verb-view/verb-type-names","slovarish.frontend.verb-view/reset-views","seq__31206","cljs.core/seq","chunk__31207","count__31208","i__31209","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/assoc","seq__31210","chunk__31211","count__31212","i__31213","slovarish.frontend.verb-view/destress","word","G__31214","clojure.string/replace","slovarish.frontend.verb-view/monosyllable?","cljs.core._EQ_","cljs.core/re-seq","slovarish.frontend.verb-view/similar-conjugation?","ya","inf","other-ya","G__31215","fexpr__31216","slovarish.frontend.data/all-verbs","G__31217","cljs.core/seq?","clojure.string/ends-with?","cljs.core/re-find","slovarish.frontend.verb-view/same-past-tense-stress?","forms","cljs.core/every?","cljs.core/some?","p1__31218#","p1__31219#","slovarish.frontend.verb-view/defective-ya","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.verb-view/display-form","p__31223","map__31224","cljs.core/--destructure-map","cljs.core.get","seq31220","G__31221","G__31222","self__4851__auto__","css-class","form","prefix","clojure.string.join","slovarish.frontend.verb-view/stress-patterns","verb-class","vec__31225","cljs.core.nth","_","nonpast","past","past-alt","or__4253__auto__","slovarish.frontend.verb-view/past-tense-forms","stress","primary?","vec__31229","m","f","n","p","p1__31228#","cljs.core.map","cljs.core/second","cljs.core/vals","primary-tag","pattern","and__4251__auto__","cljs.core/not","G__31232","p__31238","map__31239","slovarish.frontend.verb-view/single-verb","verb-type","rank","infinitive","aspect","conjugation","class","category","partner","verb","map__31240","map__31241","map__31242","map__31243","past-part","pres-part","imperative","ty","on","my","vy","oni","masculine","feminine","neuter","plural","pres-act","pres-pass","pres-adv","past-act","past-pass","past-adv","bare","similars","G__31244","fexpr__31245","slovarish.frontend.data/verbs-by-category","cljs.core.remove","p1__31233#","cljs.core.filter","p1__31234#","p1__31235#","cljs.core.sort_by","cljs.core/<","cljs.core.get_in","slovarish.frontend.state/display-language","p1__31236#","p1__31237#","cljs.core/empty?","G__31246","cljs.core/Keyword","js/Error","cljs.core/reset!","slovarish.frontend.state/input","slovarish.frontend.state/which-result?","slovarish.frontend.state/results","fexpr__31247","cljs.core.doall","iter__4652__auto__","s__31249","cljs.core/LazySeq","c__4650__auto__","size__4651__auto__","b__31251","cljs.core/chunk-buffer","i__31250","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31248","cljs.core/cons","cljs.core/rest","vb","cljs.core.distinct","cljs.core.take","G__31253","fexpr__31252","cljs.core.keyword","e","G__31254","G__31255","G__31257","G__31259","fexpr__31258","cljs.core/some","G__31260","G__31261","G__31263","fexpr__31262","G__31265","fexpr__31264","G__31267","fexpr__31266","G__31268","clojure.string/includes?","fexpr__31269","p__31271","map__31272","slovarish.frontend.verb-view/verb-table","motion-partner","definiteness","self","partner-aspect","partner-verb","G__31273","G__31275","fexpr__31274","p1__31270#","motion-partner-verb","G__31276","fexpr__31277","G__31278","G__31279","G__31280","G__31282","fexpr__31281","goog.dom/getElement","goog.dom.classlist/set"],"sourcesContent":["(ns slovarish.frontend.verb-view\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.dom :as gdom]\n            [goog.dom.classlist :as cl]\n            [goog.style :as style]\n            [goog.color :as gcolor]\n            [clojure.string :as s]\n            [cljs.reader :as reader]\n            [slovarish.frontend.state :refer [input results which-result? result display-language]]\n            [slovarish.frontend.data :refer [all-verbs verbs-by-category]]))\n\n(defonce which-forms?\n  (r/atom {:indefinite :main :definite :main :imperfective :main :perfective :main}))\n\n(defonce which-past-set?\n  (r/atom {:indefinite :main :definite :main :imperfective :main :perfective :main}))\n\n(def verb-type-names\n  {\"indefinite\"   {:emoji \"\ud83d\udd04\" :english \"indef\" :russian \"\u0440\u0430\u0437\u043d\u043e\u043d\u0430\u043f.\"}\n   \"definite\"     {:emoji \"\u27a1\ufe0f\" :english \"def\" :russian \"\u043e\u0434\u043d\u043e\u043d\u0430\u043f.\"}\n   \"imperfective\" {:emoji \"\u23f3\" :english \"impf\" :russian \"\u041d\u0421\u0412\"}\n   \"perfective\"   {:emoji \"\ud83d\udccc\" :english \"pf\" :russian \"\u0421\u0412\"}})\n\n(defn reset-views []\n  (doseq [v (keys @which-forms?)]\n    (swap! which-forms? assoc v :main))\n  (doseq [v (keys @which-past-set?)]\n    (swap! which-past-set? assoc v :main)))\n\n(defn destress [word]\n  (some-> word (s/replace #\"[\\u0300\\u0301]\" \"\")))\n\n(defn monosyllable? [word]\n  (= 1 (count (re-seq #\"[\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b]\" word))))\n\n(defn similar-conjugation?\n  [ya inf]\n  (when inf\n    (when-let [other-ya (some->> (destress inf)\n                                 (@all-verbs)\n                                 (first)\n                                 :conjugation\n                                 :ya)]\n      (cond-> other-ya\n              (seq? other-ya) first\n              :always (s/ends-with? (re-find #\"\\S\\u0301?\\S\\u0301?(?:\u0441\u044c)?$\" ya))))))\n\n(defn same-past-tense-stress?\n  [forms]\n  (when (every? some? forms)\n    (or (every? #(re-find #\"\\u0301(?:\u0441\u044c)?$\" %) forms)\n        (every? #(re-find #\"[\u0430\u043e\u0438](?:\u0441\u044c)?$\" %) forms))))\n\n(def defective-ya\n  {\"\u043f\u043e\u0431\u0435\u0434\u0438\u0301\u0442\u044c\" \"\u0441\u043c\u043e\u0433\u0443\u0301 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\"\n   \"\u0443\u0431\u0435\u0434\u0438\u0301\u0442\u044c\"  \"\u0441\u043c\u043e\u0433\u0443\u0301 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\"\n   \"\u0434\u0435\u0440\u0437\u0438\u0301\u0442\u044c\"  \"\u0433\u043e\u0432\u043e\u0440\u044e\u0301 \u0434\u0435\u0440\u0437\u043e\u0441\u0442\u0438\"})\n\n(defn display-form\n  [css-class form & {:keys [prefix] :or {prefix \"\"}}]\n  (if (nil? form)\n    [:div.verb-form.empty {:class css-class} \"\\u200B\"]\n    (if (string? form)\n      [:div.verb-form {:class css-class} (str prefix form)]\n      [:div.verb-form {:class css-class} (str prefix (s/join \", \" form))])))\n\n(defn stress-patterns\n  [verb-class]\n  (let [[_                            nonpast        past           past-alt]\n        (re-find #\"(?:\\d+\\W*|irreg\\-)([a-c]'?)(?:/?([a-c]\\*?'*))?(?:,([a-c]))?\"\n                 verb-class)]\n    {:nonpast  nonpast\n     :past     (or past \"a\")\n     ;; a: stem; b: masc stem, else end; b*: end,\n     ;; c: fem end, else stem;\n     ;; c' masc stem, fem end, neut stem or end, plur stem;\n     ;; c'': masc stem or end, fem end, n-p end or stem\n     ;; impersonal verbs have only neuter past forms\n     :past-alt past-alt}))\n\n(defn past-tense-forms\n  [stress primary? past]\n  (if (nil? (:masculine past)) ; impersonal verbs\n    [:div.verb-form.row1.past.neuter.light.triple-row (:neuter past)]\n\n    (let [[m f n p]   (map #(cond\n                              (string? %) %\n                              primary?    (first %)\n                              :else       (second %))\n                           (vals past))\n          primary-tag (if primary? \"primary\" \"alternate\")\n          pattern     (if (and (not primary?)\n                               (:past-alt stress))\n                        (:past-alt stress)\n                        (:past stress))]\n      (case pattern\n        \"a\" (cond\n              (re-find #\"\u043b\u0441\u044f$\" m)\n              [:<>\n               [:div.verb-form.row1.past.light.triple-row {:class primary-tag}\n                (str (s/replace m #\"\u0441\u044f$\" \"|\u0441\u044f\") \", -\u0430\u0441\u044c, -\u043e\u0441\u044c, -\u0438\u0441\u044c\")]]\n\n              (or (and (re-find #\"\u043b$\" m) (= f (str m \"\u0430\")))\n                  (and (monosyllable? m) (= (destress f) (str m \"\u0430\"))))\n              [:<>\n               [:div.verb-form.row1.past.light.triple-row {:class primary-tag}\n                (str (s/replace f #\"\u0430$\" \"\") \", -\u0430, -\u043e, -\u0438\")]]\n\n              (re-find #\"\u0441\u044f$\" m)\n              [:<>\n               [:div.verb-form.row1.past.masculine.light.irregular-form {:class primary-tag}\n                m]\n               [:div.verb-form.row2.past.light.double-row {:class primary-tag}\n                (str f \", -\u043e\u0441\u044c, -\u0438\u0441\u044c\")]]\n\n              :else\n              [:<>\n               [:div.verb-form.row1.past.masculine.light.irregular-form {:class primary-tag}\n                m]\n               [:div.verb-form.row2.past.light.double-row {:class primary-tag}\n                (str f \", -\u043e, -\u0438\")]])\n\n        \"b\" [:<>\n             [:div.verb-form.row1.past.masculine.light.irregular-form {:class primary-tag}\n              m]\n             [:div.verb-form.row2.past.light.double-row {:class primary-tag}\n              (str f \", -\u043e\u0301, -\u0438\u0301\")]]\n\n        \"b*\" (if (s/ends-with? m \"\u043b\u0441\u044f\u0301\")\n               [:div.verb-form.row1.past.light.triple-row {:class primary-tag}\n                (str (s/replace m #\"\u0441\u044f\u0301$\" \"|\u0441\u044f\u0301\") \", -\u0430\u0301\u0441\u044c, -\u043e\u0301\u0441\u044c, -\u0438\u0301\u0441\u044c\")]\n               [:<>\n                [:div.verb-form.row1.past.masculine.light.unpredictable-stress {:class primary-tag}\n                 m]\n                [:div.verb-form.row2.past.light.double-row {:class primary-tag}\n                 (str f \", -\u043e\u0301\u0441\u044c, -\u0438\u0301\u0441\u044c\")]])\n\n        \"c\" [:<>\n             [:div.verb-form.row1.past.masculine.light {:class primary-tag}\n              m]\n             [:div.verb-form.row2.past.feminine.light.unpredictable-stress {:class primary-tag}\n              f]\n             [:div.verb-form.row3.past.light {:class primary-tag}\n              (str n \", -\u0438\")]]\n\n        \"c'\" [:<>\n              [:div.verb-form.row1.past.masculine.light {:class primary-tag} m]\n              [:div.verb-form.row2.past.feminine.light.unpredictable-stress {:class primary-tag}\n               (str f (when (s/ends-with? n \"\u043e\u0301\") \", -\u043e\u0301\"))]\n              [:div.verb-form.row3.past.light {:class primary-tag}\n               (str n (when (s/ends-with? n \"\u043e\") \", -\u0438\"))]]\n\n        \"c''\" [:<>\n               [:div.verb-form.row1.past.masculine.light\n                {:class (str (when (s/ends-with? m \"\u043b\u0441\u044f\u0301\") \"unpredictable-stress \")\n                             primary-tag)}\n                m]\n               (if (s/ends-with? n \"\u043e\u0301\u0441\u044c\")\n                 [:div.verb-form.row2.past.light.double-row {:class primary-tag}\n                  (str f \", -\u043e\u0301\u0441\u044c, -\u0438\u0301\u0441\u044c\")]\n                 [:<>\n                  [:div.verb-form.row2.past.feminine.light.unpredictable-stress {:class primary-tag}\n                   f]\n                  [:div.verb-form.row3.past.light {:class primary-tag}\n                   (if (s/ends-with? n \"\u043e\u0301\u0441\u044c\")\n                     (str n \", -\u0438\u0301\u0441\u044c\")\n                     (str n \", -\u0438\u0441\u044c\"))]])]\n\n        nil))))\n\n(defn single-verb\n  [verb-type {:keys [rank infinitive aspect conjugation class category partner] :as verb}]\n  (when verb\n    (let [{:keys [past past-part pres-part\n                  imperative ya ty on my vy oni]}    conjugation\n          {:keys [masculine feminine neuter plural]} past\n          {:keys [pres-act pres-pass pres-adv]}       pres-part\n          {:keys [past-act past-pass past-adv]}       past-part\n          bare     (destress infinitive)\n          stress   (stress-patterns class)\n          ;; TODO: Need to accomodate bi-class verbs somehow\n          similars (cond->> (@verbs-by-category category)\n                     :always      (remove #{infinitive partner})\n                     (seq? ya)    (filter #(similar-conjugation? (first ya) %))\n                     (string? ya) (filter #(similar-conjugation? ya %))\n                     :always      (sort-by #(get % :rank 30000) <))]\n      [:div.verb-entry {:class verb-type}\n       [:div.top-left\n        [:span.verb-type (get-in verb-type-names [verb-type @display-language])]\n        [:span.infinitive {:class verb-type}\n         (get-in verb-type-names [verb-type :emoji])\n         \" \"\n         infinitive]\n        [:span.verb-type class]\n        [:span rank]]\n       (if (empty? similars)\n         [:div.top-right \"unique verb\"]\n         [:div.top-right\n          (case @display-language\n            :english \"conjugates like \"\n            :russian \"\u0441\u043f\u0440\u044f\u0433\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \")\n          [:select {:name \"similar-conjugation\"\n                    :onFocus #(do\n                                (set! (-> % .-target .-selectedIndex) -1)\n                                (-> % .-target .blur))\n                    :onChange #(let [word (-> % .-target .-value (destress))]\n                                 (reset! input word)\n                                 (reset! which-result? 0)\n                                 (reset! results (@all-verbs word))\n                                 (reset-views))}\n           (doall\n             (for [vb (distinct (take 50 similars))]\n               ^{:key vb}\n               [:option {:value (destress vb)} vb]))]])\n\n       [:div.top-header-cell\n        [:select {:name (str verb-type \"-verb-view\")\n                  :value ((keyword verb-type) @which-forms?)\n                  :onChange (fn [e]\n                              (swap! which-forms? assoc (keyword verb-type)\n                                     (-> e .-target .-value (keyword))))}\n         [:option {:value :main :defaultValue true} \"main forms\"]\n         [:option {:value :participles} \"participles\"]]]\n       [:div.top-header-cell.full-width\n        (if (= verb-type \"perfective\")\n          (case @display-language\n            :english \"future\" :russian \"\u0431\u0443\u0434.\")\n          (case @display-language\n            :english \"present\" :russian \"\u043d\u0430\u0441\u0442.\"))]\n       [:div]\n       [:div.top-header-cell.full-width\n        (str (case @display-language :english \"past\" :russian \"\u043f\u0440\u043e\u0448.\")\n         \" \")\n        (when (and (= ((keyword verb-type) @which-forms?) :main)\n                   (some seq? (vals past)))\n          [:<> \" \"\n           [:a {:onMouseOver #(swap! which-past-set? assoc (keyword verb-type) :alternate)\n                :onMouseOut  #(swap! which-past-set? assoc (keyword verb-type) :main)}\n            \"\ud83d\udd00\"]])]\n       [:div.top-header-cell.half-width\n        (case @display-language\n          :english \"imperative\" :russian \"\u043f\u043e\u0432\u0435\u043b.\")]\n\n       (case ((keyword verb-type) @which-forms?)\n         :main\n         [:<>\n          (if (or on my vy (nil? ty))\n            [:<>\n             [:div.left-header-cell.row1 \"\u044f / \u043c\u044b\"]\n             [:div.left-header-cell.row2 \"\u0442\u044b / \u0432\u044b\"]\n             [:div.left-header-cell.row3 \"\u043e\u043d(\u0430, \u043e) / \u043e\u043d\u0438\"]\n             [display-form \"present ya half-width\" ya]\n             [display-form \"my half-width\" my]\n             (if (and ty (re-find #\"\u0445\u043e\u0442\u0435\u0442\u044c(?:\u0441\u044f)?\" (destress infinitive)))\n               [display-form \"present ty half-width unpredictable-stress\" ty]\n               [display-form \"present ty half-width\" ty])\n             [display-form \"vy half-width\" vy]\n             (if (re-find #\"\u0445\u043e\u0442\u0435\u0442\u044c(?:\u0441\u044f)?\" (destress infinitive))\n               [display-form \"present on half-width unpredictable-stress\" on]\n               [display-form \"present on half-width\" on])\n             [display-form \"oni half-width\" oni]]\n            [:<>\n             [:div.left-header-cell.row1 \"\u044f\"]\n             [:div.left-header-cell.row2 \"\u0442\u044b\"]\n             [:div.left-header-cell.row3 \"\u043e\u043d\u0438\"]\n             [display-form \"present ya full-width\" ya]\n             (if (= (:nonpast stress) \"c\")\n               [display-form \"present ty full-width unpredictable-stress\" ty]\n               [display-form \"present ty full-width\" ty])\n             (if (= (:nonpast stress) \"c\")\n               [display-form \"present oni full-width unpredictable-stress\" oni]\n               [display-form \"present oni full-width\" oni])])\n\n          [:<>\n           [:div.middle-header-cell.row1 \"\ud83d\udc68\"]\n           (if (and (= (:past stress) \"c'\")\n                    (= ((keyword verb-type) @which-past-set?) :alternate))\n             [:<>\n              [:div.middle-header-cell.row2 \"\ud83d\udc69\ud83d\udc7d\"]\n              [:div.middle-header-cell.row3 \"\ud83d\udc6b\"]]\n             [:<>\n              [:div.middle-header-cell.row2 \"\ud83d\udc69\"]\n              [:div.middle-header-cell.row3 \"\ud83d\udc7d\ud83d\udc6b\"]])\n           [past-tense-forms stress\n            (= ((keyword verb-type) @which-past-set?) :main)\n            past]\n           (when (some seq? (vals past))\n             [:div.past-trigger\n              {:onMouseOver #(swap! which-past-set? assoc (keyword verb-type) :alternate)\n               :onMouseOut  #(swap! which-past-set? assoc (keyword verb-type) :main)}])]]\n\n         :participles\n         [:<>\n          [:div.middle-header-cell.row1 \"active\"]\n          [:div.middle-header-cell.row2 \"passive\"]\n          [:div.middle-header-cell.row3 \"adverbial\"]\n\n          (when-not (= aspect :pf)\n           [:<>\n            [display-form \"row1 present active participle\" pres-act]\n            [display-form \"row2 present passive participle\" pres-pass]\n            [display-form \"row3 present adverbial participle\" pres-adv]])\n\n          [display-form \"row1 past active participle\" past-act]\n          [display-form\n           (cond-> \"row2 past passive participle \"\n                   (s/includes? class \"(-\u0451-)\") (str \"irregular-form\")\n                   (s/includes? class \"(-\u043e-)\") (str \"irregular-form\")\n                   (#{\"1a\u2466\"} class)           (str \"unpredictable-stress\"))\n           past-pass]\n          [display-form \"row3 past adverbial participle\" past-adv]])\n\n       [display-form \"row1 imperative\" (:ty imperative)]\n       [display-form \"row2 imperative\" (:vy imperative)]])))\n\n(defn verb-table\n  [{:keys [infinitive aspect conjugation partner motion-partner definiteness] :as self}]\n  (if self\n    (let [partner-aspect (if (= aspect :pf) :impf :pf)\n          partner-verb   (some->> (@all-verbs (destress partner))\n                                  (filter #(and (or (= partner (:infinitive %))\n                                                    (monosyllable? partner))\n                                                (= partner-aspect (:aspect %))))\n                                  (first))\n          motion-partner-verb (some->> (or motion-partner\n                                           (:motion-partner partner-verb))\n                                       (destress)\n                                       (@all-verbs)\n                                       (first))]\n      [:div#verb-table\n       (if motion-partner-verb\n         ;; Verbs of motion: Indefinite, definite, perfective\n         [:<>\n          [single-verb \"indefinite\" (case definiteness\n                                      :indefinite self\n                                      :definite motion-partner-verb\n                                      nil motion-partner-verb)]\n          [single-verb \"definite\"   (case definiteness\n                                      :definite self\n                                      :indefinite motion-partner-verb\n                                      nil partner-verb)]\n          [single-verb \"perfective\" (case definiteness\n                                      :definite partner-verb\n                                      :indefinite (->> (:partner motion-partner-verb)\n                                                       (destress)\n                                                       (@all-verbs)\n                                                       (first))\n                                      nil self)]]\n         ;; Regular verbs: Imperfective, perfective\n         [:<>\n          [single-verb \"imperfective\" (if (= aspect :impf) self partner-verb)]\n          [single-verb \"perfective\"   (if (= aspect :pf) self partner-verb)]])])\n    (do\n      (-> (gdom/getElement \"word-input\")\n          (cl/set \"default\"))\n      [:div \"Please enter a verb.\"])))\n\n;; Past participle short forms\n#_(some-> (get-cell 5 3)\n          (s/replace #\"\u043d+\u044b\u0439$\" \"\u043d\")\n          (s/replace #\"\u044b\u0439$\" \"\"))\n\n;; Imperative\n#_(cond\n    (s/ends-with? imperative \"\u0441\u044c\") (str (chop-last imperative 2) \"(\u0442\u0435)\u0441\u044c\")\n    (s/ends-with? imperative \"\u0441\u044f\") (str (chop-last imperative 2) \"(\u0441\u044f/\u0442\u0435\u0441\u044c)\")\n    :else (str imperative \"(\u0442\u0435)\"))\n"]}