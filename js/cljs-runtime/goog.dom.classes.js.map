{
"version":3,
"file":"goog.dom.classes.js",
"lineCount":85,
"mappings":"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",
"sources":["goog/dom/classes.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for adding, removing and setting classes.  Prefer\n * {@link goog.dom.classlist} over these utilities since goog.dom.classlist\n * conforms closer to the semantics of Element.classList, is faster (uses\n * native methods rather than parsing strings on every call) and compiles\n * to smaller code as a result.\n *\n * Note: these utilities are meant to operate on HTMLElements and\n * will not work on elements with differing interfaces (such as SVGElements).\n */\n\n\ngoog.provide('goog.dom.classes');\n\ngoog.require('goog.array');\n\n\n/**\n * Sets the entire class name of an element.\n * @param {Node} element DOM node to set class of.\n * @param {string} className Class name(s) to apply to element.\n * @deprecated Use goog.dom.classlist.set instead.\n */\ngoog.dom.classes.set = function(element, className) {\n  'use strict';\n  /** @type {!HTMLElement} */ (element).className = className;\n};\n\n\n/**\n * Gets an array of class names on an element\n * @param {Node} element DOM node to get class of.\n * @return {!Array<?>} Class names on `element`. Some browsers add extra\n *     properties to the array. Do not depend on any of these!\n * @deprecated Use goog.dom.classlist.get instead.\n */\ngoog.dom.classes.get = function(element) {\n  'use strict';\n  var className = /** @type {!Element} */ (element).className;\n  // Some types of elements don't have a className in IE (e.g. iframes).\n  // Furthermore, in Firefox, className is not a string when the element is\n  // an SVG element.\n  return typeof className === 'string' && className.match(/\\S+/g) || [];\n};\n\n\n/**\n * Adds a class or classes to an element. Does not add multiples of class names.\n * @param {Node} element DOM node to add class to.\n * @param {...string} var_args Class names to add.\n * @return {boolean} Whether class was added (or all classes were added).\n * @deprecated Use goog.dom.classlist.add or goog.dom.classlist.addAll instead.\n */\ngoog.dom.classes.add = function(element, var_args) {\n  'use strict';\n  var classes = goog.dom.classes.get(element);\n  var args = Array.prototype.slice.call(arguments, 1);\n  var expectedCount = classes.length + args.length;\n  goog.dom.classes.add_(classes, args);\n  goog.dom.classes.set(element, classes.join(' '));\n  return classes.length == expectedCount;\n};\n\n\n/**\n * Removes a class or classes from an element.\n * @param {Node} element DOM node to remove class from.\n * @param {...string} var_args Class name(s) to remove.\n * @return {boolean} Whether all classes in `var_args` were found and\n *     removed.\n * @deprecated Use goog.dom.classlist.remove or goog.dom.classlist.removeAll\n *     instead.\n */\ngoog.dom.classes.remove = function(element, var_args) {\n  'use strict';\n  var classes = goog.dom.classes.get(element);\n  var args = Array.prototype.slice.call(arguments, 1);\n  var newClasses = goog.dom.classes.getDifference_(classes, args);\n  goog.dom.classes.set(element, newClasses.join(' '));\n  return newClasses.length == classes.length - args.length;\n};\n\n\n/**\n * Helper method for {@link goog.dom.classes.add} and\n * {@link goog.dom.classes.addRemove}. Adds one or more classes to the supplied\n * classes array.\n * @param {Array<string>} classes All class names for the element, will be\n *     updated to have the classes supplied in `args` added.\n * @param {Array<string>} args Class names to add.\n * @private\n */\ngoog.dom.classes.add_ = function(classes, args) {\n  'use strict';\n  for (var i = 0; i < args.length; i++) {\n    if (!goog.array.contains(classes, args[i])) {\n      classes.push(args[i]);\n    }\n  }\n};\n\n\n/**\n * Helper method for {@link goog.dom.classes.remove} and\n * {@link goog.dom.classes.addRemove}. Calculates the difference of two arrays.\n * @param {!Array<string>} arr1 First array.\n * @param {!Array<string>} arr2 Second array.\n * @return {!Array<string>} The first array without the elements of the second\n *     array.\n * @private\n */\ngoog.dom.classes.getDifference_ = function(arr1, arr2) {\n  'use strict';\n  return arr1.filter(function(item) {\n    'use strict';\n    return !goog.array.contains(arr2, item);\n  });\n};\n\n\n/**\n * Switches a class on an element from one to another without disturbing other\n * classes. If the fromClass isn't removed, the toClass won't be added.\n * @param {Node} element DOM node to swap classes on.\n * @param {string} fromClass Class to remove.\n * @param {string} toClass Class to add.\n * @return {boolean} Whether classes were switched.\n * @deprecated Use goog.dom.classlist.swap instead.\n */\ngoog.dom.classes.swap = function(element, fromClass, toClass) {\n  'use strict';\n  var classes = goog.dom.classes.get(element);\n\n  var removed = false;\n  for (var i = 0; i < classes.length; i++) {\n    if (classes[i] == fromClass) {\n      classes.splice(i--, 1);\n      removed = true;\n    }\n  }\n\n  if (removed) {\n    classes.push(toClass);\n    goog.dom.classes.set(element, classes.join(' '));\n  }\n\n  return removed;\n};\n\n\n/**\n * Adds zero or more classes to an element and removes zero or more as a single\n * operation. Unlike calling {@link goog.dom.classes.add} and\n * {@link goog.dom.classes.remove} separately, this is more efficient as it only\n * parses the class property once.\n *\n * If a class is in both the remove and add lists, it will be added. Thus,\n * you can use this instead of {@link goog.dom.classes.swap} when you have\n * more than two class names that you want to swap.\n *\n * @param {Node} element DOM node to swap classes on.\n * @param {?(string|Array<string>)} classesToRemove Class or classes to\n *     remove, if null no classes are removed.\n * @param {?(string|Array<string>)} classesToAdd Class or classes to add, if\n *     null no classes are added.\n * @deprecated Use goog.dom.classlist.addRemove instead.\n */\ngoog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {\n  'use strict';\n  var classes = goog.dom.classes.get(element);\n  if (typeof classesToRemove === 'string') {\n    goog.array.remove(classes, classesToRemove);\n  } else if (Array.isArray(classesToRemove)) {\n    classes = goog.dom.classes.getDifference_(classes, classesToRemove);\n  }\n\n  if (typeof classesToAdd === 'string' &&\n      !goog.array.contains(classes, classesToAdd)) {\n    classes.push(classesToAdd);\n  } else if (Array.isArray(classesToAdd)) {\n    goog.dom.classes.add_(classes, classesToAdd);\n  }\n\n  goog.dom.classes.set(element, classes.join(' '));\n};\n\n\n/**\n * Returns true if an element has a class.\n * @param {Node} element DOM node to test.\n * @param {string} className Class name to test for.\n * @return {boolean} Whether element has the class.\n * @deprecated Use goog.dom.classlist.contains instead.\n */\ngoog.dom.classes.has = function(element, className) {\n  'use strict';\n  return goog.array.contains(goog.dom.classes.get(element), className);\n};\n\n\n/**\n * Adds or removes a class depending on the enabled argument.\n * @param {Node} element DOM node to add or remove the class on.\n * @param {string} className Class name to add or remove.\n * @param {boolean} enabled Whether to add or remove the class (true adds,\n *     false removes).\n * @deprecated Use goog.dom.classlist.enable or goog.dom.classlist.enableAll\n *     instead.\n */\ngoog.dom.classes.enable = function(element, className, enabled) {\n  'use strict';\n  if (enabled) {\n    goog.dom.classes.add(element, className);\n  } else {\n    goog.dom.classes.remove(element, className);\n  }\n};\n\n\n/**\n * Removes a class if an element has it, and adds it the element doesn't have\n * it.  Won't affect other classes on the node.\n * @param {Node} element DOM node to toggle class on.\n * @param {string} className Class to toggle.\n * @return {boolean} True if class was added, false if it was removed\n *     (in other words, whether element has the class after this function has\n *     been called).\n * @deprecated Use goog.dom.classlist.toggle instead.\n */\ngoog.dom.classes.toggle = function(element, className) {\n  'use strict';\n  var add = !goog.dom.classes.has(element, className);\n  goog.dom.classes.enable(element, className, add);\n  return add;\n};\n"],
"names":["goog","provide","require","dom","classes","set","goog.dom.classes.set","element","className","get","goog.dom.classes.get","match","add","goog.dom.classes.add","var_args","args","Array","prototype","slice","call","arguments","expectedCount","length","add_","join","remove","goog.dom.classes.remove","newClasses","getDifference_","goog.dom.classes.add_","i","array","contains","push","goog.dom.classes.getDifference_","arr1","arr2","filter","item","swap","goog.dom.classes.swap","fromClass","toClass","removed","splice","addRemove","goog.dom.classes.addRemove","classesToRemove","classesToAdd","isArray","has","goog.dom.classes.has","enable","goog.dom.classes.enable","enabled","toggle","goog.dom.classes.toggle"]
}
