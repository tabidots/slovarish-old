{"version":3,"sources":["slovarish/frontend/display_inflections.cljs"],"mappings":"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","names":["slovarish.frontend.display-inflections/destress","word","G__1025927","clojure.string/replace","slovarish.frontend.display-inflections/monosyllable?","cljs.core._EQ_","cljs.core/count","cljs.core/re-seq","slovarish.frontend.display-inflections/destress-mono","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","slovarish.frontend.display-inflections/dstr","seq1025932","self__4852__auto__","cljs.core/seq","xs","G__1025938","cljs.core.apply","cljs.core/str","cljs.core/deref","slovarish.frontend.state/show-stress?","slovarish.frontend.display-inflections/fleeting-vowel-indices","base","inflected","cljs.core/merge","iter__4652__auto__","s__1025946","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__1025948","cljs.core/chunk-buffer","i__1025947","vec__1025954","cljs.core/-nth","cljs.core.nth","vec__1025957","vec__1025960","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__1025945","cljs.core/chunk-rest","vec__1025963","cljs.core/first","vec__1025966","vec__1025969","cljs.core/cons","cljs.core/rest","i","c1","_","c2","a'","c3","c4","b'","p1__1025943#","cljs.core.map","cljs.core.partition","cljs.core.range","cljs.core/map","cljs.core/vector","a","b","and__4251__auto__","cljs.core/re-find","clojure.string/includes?","slovarish.frontend.display-inflections/decompose-fv","idx","form","temp__5755__auto__","vec__1025975","fv","clojure.string/starts-with?","cljs.core/re-pattern","slovarish.frontend.display-inflections/display-form","p__1025986","map__1025987","cljs.core/--destructure-map","cljs.core.get","seq1025981","G__1025982","cljs.core/next","G__1025983","self__4851__auto__","css-class","prefix","fv-idx","supplement","G__1025989","cljs.core/seq?","clojure.string.join","cljs.core.conj","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.display-inflections\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as s]\n            [slovarish.frontend.state :refer [show-stress?]]))\n\n(defn destress [word]\n  (some-> word (s/replace #\"[\\u0300\\u0301]\" \"\")))\n\n(defn monosyllable? [word]\n  (= 1 (count (re-seq #\"[\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b]\" word))))\n\n(defn destress-mono [word]\n  (if (monosyllable? word) (destress word) word))\n\n(defn dstr\n  \"Like str, but will automatically destress if stress marks are toggled off.\"\n  [& xs]\n  (cond->> (apply str xs)\n    (false? @show-stress?) destress))\n\n(defn fleeting-vowel-indices\n  [base inflected]\n  (apply merge\n    (for [[i [c1 _ c2 :as a']\n           [c3 _ c4 :as b']] (->> [base inflected]\n                                  (map #(partition 3 1 (destress %)))\n                                  (cons (rest (range)))\n                                  (apply map vector))\n          :let [a (apply str a')\n                b (apply str b')]]\n      (cond\n        (and (re-find #\"[^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b][\u043e\u0435][^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b]\" a)\n             (s/includes? b (str c1 c2)))                   {:base-fv-idx i}\n        (and (re-find #\"[^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b][\u043e\u0435][^\u0430\u0435\u0438\u043e\u0443\u044f\u044d\u044e\u0451\u044b]\" b)\n             (s/includes? a (str c3 c4)))                   {:inflected-fv-idx i}\n        :else nil))))\n\n(defn decompose-fv\n  [idx form]\n  (if-some [[_ a fv b]\n            (if (s/starts-with? form \"\u043e\u0431\u043e\u043f\u0440\") ; hard-coded exception for \u043e\u043f\u0435\u0440\u0435\u0301\u0442\u044c\u0441\u044f\n              (re-find (re-pattern (str \"^((?:.\\u0301?){\" (dec idx) \"})(\u0431\u043e)(.*)\"))\n                       form)\n              (re-find (re-pattern (str \"^((?:.\\u0301?){\" idx \"})([\u0435\u043e\u0451\u0438]\\u0301?)(.*)\"))\n                       form))]\n    [:<>\n     [:span a]\n     [:span.fleeting-vowel fv]\n     [:span b]]\n    form)) ;; if fv-idx is beyond the length of the form - cf. \u0431\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439\n\n(defn display-form\n  [css-class form & {:keys [prefix fv-idx supplement] ; supplement can be any Hiccup element\n                     :or {prefix nil fv-idx nil supplement nil}}]\n  (if form\n    [:div.word-form {:class css-class}\n     (cond->> form\n       (string? form)         destress-mono\n       (seq? form)            (map destress-mono)\n       (seq? form)            (s/join \", \")\n       prefix                 (str prefix)\n       (false? @show-stress?) destress\n       fv-idx                 (decompose-fv fv-idx))\n     supplement]\n    [:div.word-form {:class (if (string? css-class)\n                              (str css-class \" empty\")\n                              (conj css-class \"empty\"))}\n     \"\\u200B\"]))\n"]}