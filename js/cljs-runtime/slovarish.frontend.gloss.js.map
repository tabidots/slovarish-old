{"version":3,"sources":["slovarish/frontend/gloss.cljs"],"mappings":"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","names":["slovarish.frontend.gloss/smart-quotes","string","clojure.string/replace","slovarish.frontend.gloss/remove-pronunciation-guide","G__53116","slovarish.frontend.gloss/decompose-gloss","cljs.core/re-find","slovarish.frontend.gloss/format-gloss","marked-up","cljs.reader.read_string","p__53117","map__53118","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.gloss/render-glosses","text","infinitive","gloss","distinction","class","cljs.core/empty?","vec__53119","seq__53120","cljs.core/seq","first__53121","cljs.core/first","cljs.core/next","vec__53122","cljs.core.nth","primary","secondary","glosses","cljs.core.distinct","clojure.string.split","_","field","main","more-info?","or__4253__auto__","iter__4652__auto__","s__53126","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__53128","cljs.core/chunk-buffer","i__53127","cljs.core/-nth","vec__53129","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__53125","cljs.core/chunk-rest","vec__53132","cljs.core/cons","cljs.core/rest","item","k","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.gloss\n  (:require [cljs.reader :as reader]\n            [clojure.string :as s]))\n\n(defn smart-quotes\n  [string]\n  (-> string\n      (s/replace #\"'(?=\\S)\" \"\u2019\")\n      (s/replace #\"\\\"(?=\\s|$)\" \"\u201d\")\n      (s/replace #\"\\\"(?=\\b|[\u0401\u0451\u0410-\u044f])\" \"\u201c\")))\n\n(defn remove-pronunciation-guide\n  \"Removes the Romanization after Cyrillic text in Wiktionary glosses.\"\n  [string] ; could do this in the backend, but let's test it out for now\n  (some-> string\n    (s/replace #\"((?:[\u0401\u0451\u0410-\u044f]\\u0301?)+)\\s\\(.+?\\)\" \"$1\")))\n\n(defn decompose-gloss\n  [string]\n  (re-find #\"(\\(.+?\\))?\\s?(.+?)$\" string))\n\n(defn format-gloss\n  [string]\n  (let [marked-up (-> string\n                      (smart-quotes)\n                      (s/replace #\"((?:[\u0401\u0451\u0410-\u044f\\u0301])+\\s?)\" \"\\\" [:span.gloss-cyr \\\"$1\\\"] \\\"\")\n                      (s/replace #\"(\\(.+?\\)(?!\\)))\" \"\\\" [:span.gloss-note \\\"$1\\\"] \\\"\"))]\n    (-> (str \"[:span \\\"\" marked-up \"\\\"]\")\n        (s/replace #\"\\\"\\\"\" \"\")\n        (reader/read-string))))\n\n(defn render-glosses\n  [{:keys [text infinitive gloss distinction]} class]\n  (when-not (empty? gloss)\n    (let [[primary & secondary :as glosses]\n          ,               (distinct (s/split gloss #\"\\|\")) ; NOTE: `distinct` fixes a quirk with words like '\u043b\u044e\u0431\u0438\u0442\u044c\u0441\u044f'\n          [_ field main]  (-> primary remove-pronunciation-guide decompose-gloss)\n          more-info?      (or field distinction secondary)]\n      [:div.gloss-wrapper\n       [:div.primary-gloss\n        {:class [(when more-info? \"more-info\") class]}\n        [:strong (format-gloss main)]\n\n        (when distinction\n          [:span.italic \"\\u00A0(\" distinction \")\"])\n\n        [:div.gloss-popup\n         [:ul.gloss-list\n          (for [item glosses\n                :let [[k field main] (-> item remove-pronunciation-guide decompose-gloss)]]\n            ^{:key (str (or text infinitive) k)}\n            [:li\n             (when field [:em field \" \"])\n             [:span.gloss-main (format-gloss main)]])]]]])))\n"]}