{"version":3,"sources":["hickory/convert.cljc"],"mappings":";AAMA;;;;;;;;;oCAAA,pCAAMA,gFAQHC;AARH,AASE,OAACC,wBAAgB,AAACC,mBAAW,AAACC,8BAAsBH;;AAEtD;;;;;;;6CAAA,7CAAMI,kGAMHJ;AANH,AAOE,OAACK,4CAAIJ,wBACA,AAACK,4BAAoB,AAACH,8BAAsBH;;AAEnD;;;;;oCAAA,pCAAMO,gFAIHC;AAJH,AAKE,GAAI,OAASA;AACX,OAACC,0BAAkBD;;AACnB,AAAA,AACE,IAAAE,WAAM,AAAA,mFAAOF;IAAbE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,OAACG,6CAAKN,kCAAkB,AAAA,uFAAUC;;;KAFpC;AAIE,OAACM,6BAAqB,mDAAA,mFAAA,wDAAA,9LAACC,+CAAOP,6MACR,mDAAA,mFAAA,wDAAA,9LAACO,+CAAOP,qNACR,mDAAA,mFAAA,wDAAA,9LAACO,+CAAOP;;;KANhC;AAQE,oBAAI,iBAAAQ,WAA2B,AAAA,kFAAMR;AAAjC,AAAA,0IAAAQ,wDAAAA,1LAACC,kEAAAA,4EAAAA;;AACH,GAAI,AAACC,uBAAOC,wBAAQ,AAAA,uFAAUX;AAG5B,OAACY,8CAAMC,iBAAO,AAAA,kFAAMb,KAAK,6CAAA,7CAACc,gFAAQ,AAAA,sFAAQd,MAAM,AAAA,uFAAUA;;AAC1D,MAAO,gDAAA,sDAAA,2CAAA,jJAACe,yNAEiBf;;;AAC3B,OAACY,8CAAMC,iBAAO,AAAA,kFAAMb,KAAK,6CAAA,7CAACc,gFAAQ,AAAA,sFAAQd,MACnC,AAACH,4CAAIE,kCAAkB,AAAA,uFAAUC;;;;KAjB5C;AAmBE,QAAA,6MAAA,1JAAY,AAACY,8CAAMI,cAAI,AAAA,uFAAUhB;;;;AAnBnC,MAAA,KAAAI,MAAA,CAAA,mEAAAF","names":["hickory.convert/hiccup-to-hickory","hiccup-forms","hickory.core/as-hickory","hickory.core/parse","hickory.render/hiccup-to-html","hickory.convert/hiccup-fragment-to-hickory","cljs.core.map","hickory.core/parse-fragment","hickory.convert/hickory-to-hiccup","dom","hickory.utils/html-escape","G__44245","cljs.core/Keyword","js/Error","cljs.core.mapv","hickory.utils/render-doctype","cljs.core.get_in","G__44246","hickory.utils/unescapable-content","cljs.core/every?","cljs.core/string?","cljs.core.apply","cljs.core/vector","cljs.core.into","cljs.core.ex_info","cljs.core/str"],"sourcesContent":["(ns hickory.convert\n  \"Functions to convert from one representation to another.\"\n  (:require [hickory.render :as render]\n            [hickory.core :as core]\n            [hickory.utils :as utils]))\n\n(defn hiccup-to-hickory\n  \"Given a sequence of hiccup forms representing a full document,\n   returns an equivalent hickory node representation of that document.\n   This will perform HTML5 parsing as a full document, no matter what\n   it is given.\n\n   Note that this function is heavyweight: it requires a full HTML\n   re-parse to work.\"\n  [hiccup-forms]\n  (core/as-hickory (core/parse (render/hiccup-to-html hiccup-forms))))\n\n(defn hiccup-fragment-to-hickory\n  \"Given a sequence of hiccup forms representing a document fragment,\n   returns an equivalent sequence of hickory fragments.\n\n   Note that this function is heavyweight: it requires a full HTML\n   re-parse to work.\"\n  [hiccup-forms]\n  (map core/as-hickory\n       (core/parse-fragment (render/hiccup-to-html hiccup-forms))))\n\n(defn hickory-to-hiccup\n  \"Given a hickory format dom object, returns an equivalent hiccup\n   representation. This can be done directly and exactly, but in general\n   you will not be able to go back from the hiccup.\"\n  [dom]\n  (if (string? dom)\n    (utils/html-escape dom)\n    (try\n      (case (:type dom)\n        :document\n        (mapv hickory-to-hiccup (:content dom))\n        :document-type\n        (utils/render-doctype (get-in dom [:attrs :name])\n                              (get-in dom [:attrs :publicid])\n                              (get-in dom [:attrs :systemid]))\n        :element\n        (if (utils/unescapable-content (:tag dom))\n          (if (every? string? (:content dom))\n            ;; Merge :attrs contents with {} to prevent nil from getting into\n            ;; the hiccup forms when there are no attributes.\n            (apply vector (:tag dom) (into {} (:attrs dom)) (:content dom))\n            (throw (ex-info\n                    \"An unescapable content tag had non-string children.\"\n                    {:error-location dom})))\n          (apply vector (:tag dom) (into {} (:attrs dom))\n                 (map hickory-to-hiccup (:content dom))))\n        :comment\n        (str \"<!--\" (apply str (:content dom)) \"-->\")))))\n\n"]}