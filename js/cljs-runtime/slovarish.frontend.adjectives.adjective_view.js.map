{"version":3,"sources":["slovarish/frontend/adjectives/adjective_view.cljs"],"mappings":"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","names":["slovarish.frontend.adjectives.adjective-view/special-stem-type","form","clojure.string/ends-with?","cljs.core._EQ_","letter","cljs.core/re-find","clojure.string/includes?","slovarish.frontend.adjectives.adjective-view/endings","gender","possessive?","end-stress?","special-stem","G__1026834","or__4253__auto__","and__4251__auto__","fexpr__1026835","fexpr__1026841","slovarish.frontend.adjectives.adjective-view/show-long-forms","long-form","reflexive?","vec__1026854","cljs.core.nth","_","stem","m-end","fexpr__1026866","cljs.core.doall","iter__4652__auto__","s__1026868","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__1026870","cljs.core/chunk-buffer","i__1026869","vec__1026871","cljs.core/-nth","vec__1026874","seq__1026875","first__1026876","cljs.core/first","cljs.core/next","vec__1026877","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__1026867","cljs.core/chunk-rest","vec__1026911","vec__1026917","seq__1026918","first__1026919","vec__1026920","cljs.core/cons","cljs.core/rest","emoji","strong?","nom","other-cases","a","b","p1__1026846#","cljs.core.juxt","cljs.core.subs","slovarish.frontend.display-inflections/destress","slovarish.frontend.display_inflections.dstr","s__1026890","b__1026892","i__1026891","vec__1026895","iter__1026889","vec__1026902","s__1026924","b__1026926","i__1026925","vec__1026932","iter__1026923","vec__1026936","p1__1026847#","slovarish.frontend.adjectives.adjective-view/buffer-vowel-idx","m","cljs.core.not_EQ_","clojure.string/replace","vec__1026948","vec__1026951","old","end-1","chars","new","end-2","slovarish.frontend.adjectives.adjective-view/irregular-short-forms","slovarish.frontend.adjectives.adjective-view/stress-index","slovarish.frontend.adjectives.adjective-view/short-form-has-diff-stem-stress?","short-forms","cljs.core/not","cljs.core/select-keys","cljs.core/vals","cljs.core/flatten","p1__1026960#","cljs.core.remove","p1__1026961#","cljs.core/not-any?","p__1026978","map__1026979","cljs.core/--destructure-map","cljs.core.get","slovarish.frontend.adjectives.adjective-view/breakdown-short-forms","f","n","p","p1__1026966#","fv-idx","cljs.core/deref","slovarish.frontend.state/input","cljs.core/every?","cljs.core/string?","slovarish.frontend.display-inflections/monosyllable?","p1__1026968#","slovarish.frontend.display-inflections/display-form","cljs.core/seq?","cljs.core/second","p1__1026977#","s__1026988","b__1026990","i__1026989","vec__1026997","vec__1027000","iter__1026987","vec__1027003","vec__1027006","forms","cljs.core/coll?","p__1027015","map__1027016","slovarish.frontend.adjectives.adjective-view/adj-table","adjective?","participle?","from-verb","from-noun","gloss","comparatives","superlatives","adverb","abstract-noun","rank","self","vec__1027022","without-reflexive","mark-sf-stress?","cljs.core.filter","alternates?","cljs.core/some","cljs.core.apply","cljs.core/concat","verb","G__1027025","G__1027031","cljs.core/Keyword","js/Error","slovarish.frontend.state/display-language","vec__1027032","G__1027036","G__1027040","s__1027048","b__1027050","i__1027049","map__1027053","iter__1027047","map__1027062","class","distinction","sf","no-long-form?","fexpr__1027054","fexpr__1027063","slovarish.frontend.gloss/smart-quotes","G__1027057","G__1027064","slovarish.frontend.navigation.go_to_word","G__1027058","G__1027069","G__1027073","G__1027077","G__1027079","s__1027083","b__1027085","i__1027084","iter__1027082","noun","G__1027092","cljs.core/chunk-first"],"sourcesContent":["(ns slovarish.frontend.adjectives.adjective-view\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [goog.dom :as gdom]\n            [goog.dom.classlist :as cl]\n            [goog.style :as style]\n            [goog.color :as gcolor]\n            [clojure.string :as s]\n            [cljs.reader :as reader]\n            [slovarish.frontend.state :refer [input results which-result? result display-language show-stress? which-verb-forms?]]\n            [slovarish.frontend.navigation :refer [go-to-word]]\n            [slovarish.frontend.data :refer [all-adjectives top-2k-words]]\n            [slovarish.frontend.display-inflections :refer [destress display-form dstr monosyllable?]]\n            [slovarish.frontend.gloss :refer [render-glosses smart-quotes]]))\n\n(defn special-stem-type\n  [form]\n  (if (or (s/ends-with? form \"\u043d\u0438\u0439\") (= form \"\u043a\u0430\u0301\u0440\u0438\u0439\"))\n    :soft\n    (let [letter (re-find #\".(?=.\\u0301?.(?:\u0441\u044f)?$)\" form)]\n      (cond\n        (s/includes? \"\u0448\u0449\u0436\u0447\" letter) :sibilant\n        (s/includes? \"\u043a\u0433\u0445\" letter)  :velar\n        :else nil))))\n\n(defn endings\n  [gender possessive? end-stress? special-stem]\n  (case gender\n    \"masculine\"\n    (cond\n      possessive?            [:strong nil \"\u044c\u0435\u0433\u043e\" \"\u044c\u0435\u043c\u0443\" \"\u044c\u0438\u043c\" \"\u044c\u0435\u043c\"]\n      (or (and (= :sibilant special-stem) end-stress?)\n          (= :velar special-stem))\n      ,                      [nil nil \"\u043e\u0433\u043e\" \"\u043e\u043c\u0443\" \"\u0438\u043c\" \"\u043e\u043c\"]\n      end-stress?            [nil nil \"\u043e\u0433\u043e\" \"\u043e\u043c\u0443\" \"\u044b\u043c\" \"\u043e\u043c\"]\n      (#{:sibilant :soft} special-stem)\n      ,                      [:strong nil \"\u0435\u0433\u043e\" \"\u0435\u043c\u0443\" \"\u0438\u043c\" \"\u0435\u043c\"]\n      :else                  [nil nil \"\u043e\u0433\u043e\" \"\u043e\u043c\u0443\" \"\u044b\u043c\" \"\u043e\u043c\"])\n    \"feminine\"\n    (cond\n      possessive?            [:strong \"\u044c\u044f\" \"\u044c\u044e\" \"\u044c\u0435\u0439\"]\n      (= special-stem :soft) [:strong \"\u044f\u044f\" \"\u044e\u044e\" \"\u0435\u0439\"]\n      :else                  [nil \"\u0430\u044f\" \"\u0443\u044e\" \"\u043e\u0439\"])\n    \"neuter\"\n    (cond\n      possessive?            [:strong \"\u044c\u0435\" \"\u044c\u0435\u0433\u043e\" \"\u044c\u0435\u043c\u0443\" \"\u044c\u0438\u043c\" \"\u044c\u0435\u043c\"]\n      (or (and (= :sibilant special-stem) end-stress?)\n          (= :velar special-stem))\n      ,                      [nil \"\u043e\u0435\" \"\u043e\u0433\u043e\" \"\u043e\u043c\u0443\" \"\u0438\u043c\" \"\u043e\u043c\"]\n      end-stress?            [nil \"\u043e\u0435\" \"\u043e\u0433\u043e\" \"\u043e\u043c\u0443\" \"\u044b\u043c\" \"\u043e\u043c\"]\n      (#{:sibilant :soft} special-stem)\n      ,                      [:strong \"\u0435\u0435\" \"\u0435\u0433\u043e\" \"\u0435\u043c\u0443\" \"\u0438\u043c\" \"\u0435\u043c\"]\n      :else                  [nil \"\u043e\u0435\" \"\u043e\u0433\u043e\" \"\u043e\u043c\u0443\" \"\u044b\u043c\" \"\u043e\u043c\"])\n    \"plural\"\n    (cond\n      possessive?   [:strong \"\u044c\u0438\" \"\u044c\u0438\u0445\" \"\u044c\u0438\u043c\" \"\u044c\u0438\u043c\u0438\"]\n      special-stem  [:strong \"\u0438\u0435\" \"\u0438\u0445\" \"\u0438\u043c\" \"\u0438\u043c\u0438\"]\n      :else         [nil \"\u044b\u0435\" \"\u044b\u0445\" \"\u044b\u043c\" \"\u044b\u043c\u0438\"])\n    nil))\n\n(defn show-long-forms\n  [long-form reflexive?]\n  (when long-form\n    (let [[_ stem m-end] (re-find #\"((?:[^\\u0301]\\u0301?)+)([^\\u0301]\\u0301?\u0439)$\" long-form)\n          possessive?    (#{\"\u0442\u0440\u0435\u0301\u0442\u0438\u0439\" \"\u0447\u0435\u0439\"} long-form)\n          end-stress?    (re-find #\"\\u0301(?=\\S$)\" long-form)\n          special-stem   (special-stem-type long-form)]\n      [:<>\n\n       (doall\n         (for [[emoji gender] [[\"\ud83d\udc68\" \"masculine\"] [\"\ud83d\udc69\" \"feminine\"]\n                               [\"\ud83d\udc7d\" \"neuter\"] [\"\ud83d\udc6b\" \"plural\"]]\n               :let [[strong? nom & other-cases] (endings gender possessive? end-stress? special-stem)\n                     [a b]                       ((juxt first #(subs % 1)) (or nom (destress m-end)))]]\n           ^{:key gender}\n           [:<>\n            [:div.column\n             [:div.top-row {:class gender}\n              [:div.emoji emoji]\n              [:span.word-form {:class gender}\n               (if strong?\n                 [:<> [:strong (dstr a end-stress?)] b]\n                 (dstr a end-stress? b))\n               reflexive?]]\n\n             [:div.oblique-drawer {:class gender}\n              (doall\n                (for [form (cons nom other-cases)\n                      :let [[a b] ((juxt first #(subs % 1)) (or form (destress m-end)))]]\n                  ^{:key (str gender form)}\n                  [:<>\n                   [:div.word-form.oblique.light {:class gender}\n                    [:span\n                     (dstr stem)\n                     [:span.ending\n                      (if strong?\n                        [:<> [:strong (dstr a end-stress?)] b]\n                        (dstr a end-stress? b))]\n                     reflexive?]]]))]]]))])))\n\n(defn buffer-vowel-idx\n  [long-form m]\n  (when (and long-form\n             m\n             (not= m (s/replace long-form #\"\u043d+\u044b\u0439$\" \"\u043d\")))\n    (let [[_ old end-1] (re-find #\"(.)(.)(?=.{2}$)\" (destress long-form))\n          [_ chars new end-2] (re-find #\"(.*?)(.)(.)$\" (destress m))]\n      (when (and (not= old new) (= end-1 end-2))\n        (count chars)))))\n\n(def irregular-short-forms ; Wade's grammar, section 162\n  #{\"\u0431\u043e\u043b\u044c\u0448\u043e\u0301\u0439\" \"\u0434\u043e\u0441\u0442\u043e\u0301\u0439\u043d\u044b\u0439\" \"\u0438\u0301\u0441\u043a\u0440\u0435\u043d\u043d\u0438\u0439\" \"\u043c\u0430\u0301\u043b\u0435\u043d\u044c\u043a\u0438\u0439\" \"\u0441\u0438\u0301\u043d\u0438\u0439\" \"\u0441\u043e\u0301\u043b\u0451\u043d\u044b\u0439\"})\n\n(defn stress-index\n  \"Rough approxmination of stem stress index.\"\n  [form]\n  (count (re-find #\".+?[\\u0301\u0451]\" form)))\n\n(defn short-form-has-diff-stem-stress?\n  \"Marks adjectives like \u0434\u0435\u0448\u0451\u0432\u044b\u0439, \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439.\"\n  [long-form short-forms]\n  (when (and long-form\n             short-forms\n             (not= long-form \"\u0441\u043c\u0435\u0448\u043d\u043e\u0301\u0439\")\n             (not (irregular-short-forms long-form)))\n    (->> (select-keys short-forms [:m :f :n :p])\n         (vals)\n         (flatten)\n         (remove #(or (nil? %)\n                      (s/ends-with? % \"\\u0301\")))\n         (not-any? #(= (stress-index %)\n                       (stress-index long-form))))))\n\n(defn breakdown-short-forms\n  [long-form {:keys [m f n p]}]\n  (let [fv-idx      (buffer-vowel-idx @input (if (string? m)\n                                               (destress m)\n                                               (destress (first m))))\n        end-stress? #(s/ends-with? % \"\\u0301\")]\n    (if (and (every? string? [m f n p])\n             (not (monosyllable? m))\n             (every? #(= m (s/replace % #\".\\u0301?$\" \"\")) [f n p]))\n      [:div.column.quad-gradient\n       [display-form \"quad-gradient single short-form light\"\n        (str m \" + \" (re-find #\".\\u0301?$\" f) \", \" (re-find #\".\\u0301?$\" n) \", \" (re-find #\".\\u0301?$\" p))]]\n\n      [:<>\n       (cond\n         (nil? m) [:div.column.short-form.no-form.italic.sans\n                   \"(no masculine short form)\"]\n         (seq? m) [:div.column\n                   [display-form [\"masculine primary on short-form\" (if fv-idx \"irregular-form\" \"light\")]\n                                 (first m) :fv-idx fv-idx]\n                   [display-form [\"masculine alternate off d-none short-form\" (if (> fv-idx (count (second m))) \"irregular-form\" \"light\")]\n                                 (second m) :fv-idx fv-idx]]\n         :else    [:div.column\n                   [display-form [\"masculine single short-form\" (if fv-idx \"irregular-form\" \"light\")]\n                    m :fv-idx fv-idx]])\n\n       (cond\n         (and (every? string? [f n p])\n              (every? #(s/includes? % (s/replace f #\".\\u0301?$\" \"\")) [n p]))\n         [:div.column.triple-gradient\n          [display-form [\"triple-gradient single short-form\" (if (end-stress? f)\n                                                               \"unpredictable-stress\"\n                                                               \"light\")]\n           (str f \", -\" (re-find #\".\\u0301?$\" n) \", -\" (re-find #\".\\u0301?$\" p))]]\n\n         :else\n         (doall\n           (for [[gender [a b :as forms]] [[\"feminine\" f]\n                                           [\"neuter\" n]\n                                           [\"plural\" p]]]\n             (cond\n               (nil? forms)\n               [:div.column.short-form.no-form.italic.sans\n                \"(no \" gender \" short form)\"]\n\n               (coll? forms)\n               ^{:key gender}\n               [:div.column\n                [display-form [gender \"primary on short-form\" (if (end-stress? a) \"unpredictable-stress\" \"light\")] a]\n                [display-form [gender \"alternate off d-none short-form\" (if (end-stress? b) \"unpredictable-stress\" \"light\")] b]]\n               :else\n               ^{:key gender}\n               [:div.column\n                [display-form [gender \"single short-form\" (if (end-stress? forms) \"unpredictable-stress\" \"light\")] forms]]))))])))\n\n(defn adj-table\n  [{:keys [adjective? participle? from-verb from-noun long-form gloss\n           short-forms comparatives superlatives adverb\n           abstract-noun rank] :as self}]\n  (let [[_ without-reflexive reflexive?]\n        ,                (when long-form (re-find #\"(.+?)(\u0441[\u044f\u044c])?$\" long-form))\n        mark-sf-stress?  (short-form-has-diff-stem-stress? long-form\n                                                           (first (filter :class short-forms)))\n        alternates?      (some coll? (vals (apply concat short-forms)))\n        verb             (or from-verb (some-> short-forms first :from-verb))] ; \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0439, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439\n    (when self\n      [:div#adj-table\n\n       [:div.column-header.sans\n        (case @display-language\n          :english \"long form\"\n          :russian \"\u043f\u043e\u043b\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430\")]\n       (if long-form\n         [:div.long-forms.flex.row\n          ;; need to break up the reflexive for adjectives like \u043a\u0430\u0436\u0443\u0449\u0438\u0439\u0441\u044f\n          (let [[_ without-reflexive reflexive?] (re-find #\"(.+?)(\u0441[\u044f\u044c])?$\" long-form)]\n            [show-long-forms without-reflexive reflexive?])]\n         [:div.long-forms.flex.row.no-form.italic.sans\n          (case @display-language\n            :english \"(no long form)\"\n            :russian \"(\u043f\u043e\u043b\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u043d\u0435\u0442)\")])\n\n       [:span.column-header.sans\n        {:class (when mark-sf-stress? \"unpredictable-stress\")}\n        (case @display-language\n          :english \"short forms\"\n          :russian \"\u043a\u0440\u0430\u0442\u043a\u0438\u0435 \u0444\u043e\u0440\u043c\u044b\")\n        (when mark-sf-stress?\n          [:span.italic.sans.note \" (different stem stress)\"])]\n       (when alternates?\n         [:span.alternate-forms-trigger \"\ud83d\udd00\"])\n       (if (some :class short-forms) #_short-forms ; \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0439, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439\n         (doall\n           (for [{:keys [m f n p class distinction participle? from-verb] :as sf} short-forms\n                 :let [no-long-form? (and (#{\"\u0442\u0435\u0301\u0441\u043d\u044b\u0439\" \"\u0448\u0438\u0440\u043e\u0301\u043a\u0438\u0439\" \"\u0434\u043b\u0438\u0301\u043d\u043d\u044b\u0439\" \"\u0443\u0301\u0437\u043a\u0438\u0439\"} long-form)\n                                          (s/includes? distinction \"too\"))]]\n             ^{:key (str (or m f) \"-\" class)}\n             [:<>\n              ;; TOP ROW\n              [:div.short-forms-header\n               [:div.gloss-wrapper\n                (when distinction\n                 [:div.primary-gloss.serif.default\n                  (smart-quotes distinction)\n                  [:div.gloss-popup\n                   [:ul.gloss-list\n                    [:li (smart-quotes distinction)]]]])]\n               (when no-long-form?\n                 [:span.italic.sans.note (case @display-language\n                                           :english \"(no long form)\"\n                                           :russian \"(\u043f\u043e\u043b\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u043d\u0435\u0442)\")])\n               (when (and participle? adjective?)\n                 [:div.flex.row\n                  [:div.participle-type.italic.sans.note\n                   (str (if class  ; \u043e\u0431\u0448\u0430\u0440\u043f\u0430\u043d\u043d\u044b\u0439\n                          \"also as the \"\n                          \"no short forms as the \")\n                        participle? \" of\")]\n                  [:a.word-button\n                   {:on-click #(go-to-word (destress from-verb) :target-pos :verb)}\n                   from-verb]])]\n              ;; BOTTOM ROW\n              [:div.short-forms.flex.row\n               (if class\n                 [breakdown-short-forms long-form sf]\n                 (when-not participle?\n                   [:div.no-form.italic.sans\n                    (case @display-language\n                      :english \"(no non-participial short forms)\"\n                      :russian \"(\u043d\u0435\u043f\u0440\u0438\u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u0440\u0430\u0442\u043a\u0438\u0445 \u0444\u043e\u0440\u043c \u043d\u0435\u0442)\")]))]]))\n         [:div.short-forms.flex.row.no-form.italic.sans\n          (case @display-language\n            :english \"(no short forms)\"\n            :russian \"(\u043a\u0440\u0430\u0442\u043a\u0438\u0445 \u0444\u043e\u0440\u043c \u043d\u0435\u0442)\")])\n\n       (when verb\n         [:div.flex.row\n          [:div.italic.sans.row-header (case @display-language\n                                        :english \"derived from\" :russian \"\u043e\u0442 \u0433\u043b\u0430\u0433\u043e\u043b\u0430\")]\n          [:a.word-button {:on-click #(go-to-word (destress verb) :target-pos :verb)}\n           (dstr verb)]])\n       (when from-noun\n         [:div.flex.row\n          [:div.italic.sans.row-header (case @display-language\n                                         :english \"derived from\" :russian \"\u043e\u0442 \u0441\u0443\u0449.\")]\n          (doall\n            (for [noun from-noun]\n              ^{:key noun}\n              [:a.word-button {:on-click #(go-to-word (destress noun) :target-pos :noun)}\n               (dstr noun)]))])\n\n       (when (or adverb comparatives superlatives)\n         [:div.column-header.sans\n          (case @display-language\n            :english \"other forms\"\n            :russian \"\u0434\u0440\u0443\u0433\u0438\u0435 \u0444\u043e\u0440\u043c\u044b\")])\n       [:div.more-forms\n        (when adverb\n          [:div.flex.row\n           [:div.italic.sans.row-header \"-ly\"]\n           [display-form \"default\" adverb]])\n        (when comparatives\n          [:div.flex.row\n           [:div.italic.sans.row-header \"-er\"]\n           [display-form \"default\" comparatives]])\n        (when superlatives\n          [:div.flex.row\n           [:div.italic.sans.row-header \"-est\"]\n           [display-form \"default\" superlatives]])]])))\n"]}